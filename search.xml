<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[高级Auto Layout笔记]]></title>
      <url>http://blog.liushuaiko.be/blog/2016/07/09/advanced-autolayout/</url>
      <content type="html"><![CDATA[<p>本文是objc.io中「Advanced Auto Layout Toolbox」的学习笔记。</p>
<a id="more"></a>
<p>Auto Layout，想说爱你不容易。</p>
<h3 id="1-布局过程"><a href="#1-布局过程" class="headerlink" title="1. 布局过程"></a>1. 布局过程</h3><p>在使用了Auto Layout情况下，View显示到屏幕上分为3个阶段：</p>
<p>约束计算：发生自子View-&gt;父View。通过显式调用<code>setNeedsUpdateConstraints</code>来触发这个过程，实际上更改约束会自动触发这个过程。在自定义View中，可以覆盖<code>updateConstraints</code>来添加或变更约束。<br>布局：发生自父View-&gt;子View。将1中计算的结果，应用到View的frame上。通过显式调用<code>setNeedsLayout</code>来触发这个过程，这个函数很廉价，因为所有的布局请求都会合并成一个layout过程去做。当然，可以通过调用<code>layoutIfNeeded</code>来迫使系统立刻更新布局。在自定义View中，可以通过覆盖<code>layoutSubviews</code>方法来hook这个过程。<br>展示：这个过程与是否使用了Auto Layout无关。发生自父View-&gt;子View。通过显式调用<code>setNeedsDisplay</code>来触发这个过程，视图的绘制过程也会被合并。类似地，可以覆盖<code>drawRect:</code>来hook这个过程。</p>
<p>以上三个阶段是依次发生的，每一步都会依赖它的前一步。要注意，以上三个阶段这是一个迭代的过程，比如布局阶段可能触发了另一个约束计算的过程，这个计算过程又触发了新的布局过程等等。</p>
<h3 id="2-Intrinsic-Content-Size"><a href="#2-Intrinsic-Content-Size" class="headerlink" title="2. Intrinsic Content Size"></a>2. Intrinsic Content Size</h3><p>Intrinsic这个词的意思，「本质的、固有的」。一个View的Intrinsic Content Size意指这个View想要舒舒服服地显示出来，需要多大的size。对于一个<code>numberOfLines</code>为0的Label来说，它的<code>preferredMaxLayoutWidth</code>确定、font确定，则它的<code>intrinsicContentSize</code>就定下来了。不是所有的View都有<code>intrinsicContentSize</code>，在自定义的View中，可以覆盖<code>intrinsicContentSize</code>方法来返回Intrinsic Content Size，并可以通过调用<code>invalidateIntrinsicContentSize</code>来通知布局系统在下一个布局过程采用新的Intrinsic Content Size。</p>
<h3 id="3-Compression-Resistance-和-Content-Hugging"><a href="#3-Compression-Resistance-和-Content-Hugging" class="headerlink" title="3. Compression Resistance 和 Content Hugging"></a>3. Compression Resistance 和 Content Hugging</h3><p>首先明确：这两个属性都是讨论的前提是View在相应的维度有Intrinsic Content Size。实际上，这两个属性和Intrinsic Content Size都是被翻译成约束来实现的。举个例子（请务必多读几遍这个例子）：假设一个Label的Intrinsic Content Size是{100, 30}，它在水平和竖直方向上的Compression Resistance优先级是750，在水平和竖直方向的Content Hugging优先级是250，那么这些被转成了如下约束：</p>
<pre><code>H:[label(&lt;=100@250)]
H:[label(&gt;=100@750)]
V:[label(&lt;=30@250)]
V:[label(&gt;=30@750)]
</code></pre><h3 id="4-Alignment-Rect"><a href="#4-Alignment-Rect" class="headerlink" title="4. Alignment Rect"></a>4. Alignment Rect</h3><p>Auto Layout操作的是View的Alignment Rect，不是View的Frame。这是个伟大的概念，用于把View的布局和显示解耦，虽然大部分情况它们是相等的。同样，View的Intrinsic Content Size也指的是Alignment Rect。在View有阴影、自定义Badge时，这个概念会很有用。在自定义的View中，可以通过覆盖<code>alignmentRectInsets</code>，来返回在特定的Frame下，Alignment Rect的edge insets是多少。还可以覆盖<code>alignmentRectForFrame:</code>和<code>frameForAlignmentRect:</code>来实现更精细的控制，蛋这两个方法必须互为反函数。</p>
<h3 id="5-其它"><a href="#5-其它" class="headerlink" title="5. 其它"></a>5. 其它</h3><p>如果自定义的View是基于Auto Layout封装，那么它就不能在未开启Auto Layout的Window上使用，因此最好覆盖View的<code>requiresConstraintBasedLayout</code>，返回YES来宣称这件事。<br>程序挂掉：NSInternalInconsistencyException, reason: ‘Auto Layout still required after executing -layoutSubviews. 原因通常因为是我们在第2个阶段（布局阶段）更改了约束，这通常是在被覆盖的<code>layoutSubviews</code>方法里做的，这触发了第1个阶段，但是却没有再次触发布局阶段。通常的解决办法是在更改约束后再次调用<code>[super layoutSubviews]</code>来显式触发布局过程。<br>Auto Layout的性能：<a href="http://floriankugler.com/2013/04/22/auto-layout-performance-on-ios/" target="_blank" rel="external">http://floriankugler.com/2013/04/22/auto-layout-performance-on-ios/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[日本关西游记]]></title>
      <url>http://blog.liushuaiko.be/blog/2016/07/09/japan-kansai/</url>
      <content type="html"><![CDATA[<p>前段时间到日本关西地区玩了几天，发现了日本一些耐人寻味的细节。</p>
<a id="more"></a>
<ol>
<li>秩序。日本人乘坐上下楼扶梯都是单人靠一侧，让出一个过道给那些赶时间的人快速行走。虽然所在地不同靠左还是靠右不一定，但是几乎看不到有人站成一排堵住扶梯。</li>
<li>礼仪。日本的服务业很发达，商场、地铁、酒店的服务员全都笑脸相迎，“阿狸嘎豆”说个不停，而且说的时候会点头示意，甚至鞠躬的也不在少数，在这种氛围下你也会不自觉变得更有礼貌，并觉得钱花的很舒服。曾在公交车上见到了一个很萌很有意思的公益广告，旨在提醒乘客在使用耳机时，注意耳机的漏音打扰到身边的人，这个细节着实震撼到我了。</li>
<li>内敛。在街上很少见到豪车，大多数是日系简单实用的轿车，也很少见到外形夸张的豪宅，倒是雅致精巧的小木屋很常见，屋门口大多摆放着精心侍弄的花卉和盆景，人们衣着朴实，讲话声音很小，街上的女人都带着妆容，涂着红腮，即便是老妇人也不例外，这使得你一眼就能看出哪些是游客，哪些是当地人。</li>
<li>完善。公共场所无障碍指示标识随处可见，几乎每个公共卫生间都有无障碍设施，公交车在停车上下客时，车身会向门的一侧倾斜以方便乘客上下车，在停车场或者建筑工地等车辆频繁出入的门口，会有专人看守，控制车辆，在没人经过的时候才放行车辆。</li>
</ol>
<p>另外，在Apple Store见到Apple TV，在街上看到人们刷Twitter，在电子用品商场见到Chromecast和装着原生Android的Nexus手机，刚开始居然会觉得不适应，然后一下子明白，这很正常。</p>
<p>不舒服的地方？也有。逆行的人也很多，车辆不会主动让行人，我到过的几个地方没有禁摩托车，经常会有年轻人骑着摩托轰着油门经过，多普勒效应尤为刺耳。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2015，永远年轻，永远热泪盈眶]]></title>
      <url>http://blog.liushuaiko.be/blog/2015/12/30/my-2015/</url>
      <content type="html"><![CDATA[<p>这一年，在 AliExpress 度过了完整的一年。</p>
<p>这一年，感触、思考、压力、挑战、完美、不完美，就像落下的雨点，大珠小珠落玉盘。</p>
<a id="more"></a>
<embed src="http://www.xiami.com/widget/40156335_1772001102/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent">

<p>就从换房子开始吧。</p>
<p>在豆瓣上认识了跟我年纪相仿的小王同学，我们一起看了很多房子，在这个过程中我学会了如何去判断一个房子的好坏、性价比高低，对公司附近的小区的了如指掌。虽然最后由于种种原因没有一起合租，但是这真是一段很令人难忘的经历。最后我们租的房子都还不错，我找到了公司附近的 CBD 旁边的一个小区，对我来说可能是公司附近最好的小区了。</p>
<p>如果让我周末在家里呆一天，看一天电视，那么晚上回顾这一天，我肯定会有一种浪费生命罪恶感，甚至会为之抓狂。但是更罪恶的是，如果这一天让我在外面暴走，哪怕什么都不干，没有一点收获，我居然会觉得很充实。好吧，5月份之前，几乎每周末都会找一下午，约上震宇兄去西湖，绕着西湖溜达溜达，看场电影，一起吃个晚饭，随便扯扯。吃完饭各自回家前，我们会在马路边，在天桥上，甚至在公交车站，旁若无人地大声喊上一句：“fxxk，明天又要上班了！”</p>
<p>有一段时间的周末，我们迷上了一个 iPad 上的密室逃脱游戏，我们找了一个很偏僻的星巴克，断断续续，花了还挺久的，给刷通关了，然后通过玩这个游戏发现，自己居然不算太笨。</p>
<p>接着，5月末，震宇兄被变化到滨江了。我凭借着丰富的找房经验，给他不停地推荐我住的小区的房子。最后，如我所愿，震宇兄还真跟我住到了同一个小区。</p>
<p>在接下来的周末里，how could you believe that…</p>
<p>骑自行车去钱塘江边，把即兴在地摊上买的小风筝在喝一口水的功夫内放丢，然后在某宝上买了一个3倍大的风筝，最终放飞;<br>在1688上批发了一批儿童小飞碟，类似竹蜻蜓的东西，到 CBD 去卖，巧妙与 cops 周旋，最终盈亏平衡；<br>逢热片必坐地铁穿过钱塘江去一个人少价低环境好的电影院看了它，回去的路上一路狂喷；<br>自己做晚饭，震宇兄秀刀工手被割伤两次；<br>在公司锁上自行车后才发现没带钥匙;<br>God damn insane！</p>
<h3 id="程序猿"><a href="#程序猿" class="headerlink" title="程序猿"></a>程序猿</h3><p>前几天大飞问我，说你现在不停地做需求做业务，也没时间钻研一些新技术吧。</p>
<p>我想了想，一切脱离业务的技术都是耍流氓。技术不能凭空产生，一定得先有业务需求（广义上的）才会有技术。一定不要只完成某个需求，而要把它做好，做精。在这方面我一直觉得我做的还是不错的，总是能在完成需求的过程中迸发出很多点子，也总是能尝试一些新的东西，效果还不错。</p>
<p>上半年一直投入在 iPad App 的开发。可以说这是我技术提升的踏板。因为种种原因我在 iPad App 上的「权力」还是比较大的，带我的小伙技术也非常扎实，跟着他做了不少，也学了不少。</p>
<p>我们一起提高 App 质量，改进开发流程，优化 App 性能，产出了很多质量还不错的组件，在这个过程中我也渐渐熟悉公司的业务，熟悉 iOS 开发的套路，熟悉一个需求的生命周期，处处留心皆学问。</p>
<p>九月份开始转投 iPhone 的开发，开发了一个模块，做了一个很核心的业务，有了 iPad 的基础，开发起来还算顺手。</p>
<p>当然，今年也自学了一些东西。能想起来的就 Core Animation 和 Swfit 了。今年买了苹果的开发者资格，自学 Swift 写了一个看妹子的 App，最终因为某些原因没通过审核，但是当我照例晒到朋友圈时，Fenng 居然给我点了赞，在 GitHub 上发的时候，onevcat 还 star 了，这些都是很哦妹子嘤的经历。</p>
<h3 id="双十一"><a href="#双十一" class="headerlink" title="双十一"></a>双十一</h3><p>记得大一时，一天晚上，熄灯后，都准备睡觉时，彪彪还在那玩电脑，鼠标啪啪点个不停，一脸兴奋的告诉我们，光棍节，某宝在各种促销，都玩疯了！原来这货还在买球鞋。</p>
<p>5年后，十一黄金周前夕，我结束了4天的休假，赶回公司，加班准备双十一。</p>
<p>后面一段时间，整个 Team 都很累。</p>
<p>大促 App 发布当晚，看得出来，大家都像刚改造好放出来一样，以自己的方式释放着压力。然而，居然发现了一个挺严重的 bug，我的。坦率地讲，当时很慌，顶着巨大的压力修复，进入了新的一轮打包过程……</p>
<p>发布后第二天中午，哦不，当天，我们凌晨3点回去的，我们去公司旁一家小店吃了寿司，随便扯扯淡，轻松的感觉，久违了。</p>
<p>双十一对我来说是一次考验也是一次历练，那时候第一次有种真真切切的，我在做一些事情，我在创造价值的感觉，哦妹子嘤。</p>
<h3 id="买买买"><a href="#买买买" class="headerlink" title="买买买"></a>买买买</h3><p>一次跟朋友闲扯，得出一个结论，干这一行好尴尬，赚的钱吧，不太容易让孩子成为富二代，但也不至于生活的太差。这个结论真是太对了。</p>
<p>今年买了很多东西，捷安特自行车、Dell U2515H、电动牙刷，坚果手机，甚至萌生了把小时候因为父母给的钱不够买不起的小玩意儿都买回来的想法[doge脸]。</p>
<p>此外，今年买了很多 App，买了很多 Service，VPS 、GitHub 私有 repo 等等，这也是工作后观念的一个转变，免费的总是最贵的。</p>
<p>上半年的股市热，我买了点基金，以另一种方式参与到了炒股的大潮中，结局能猜到，很惨。好在没投太多，因此损失不是特别大，但是整件事情让我明白是该学学经济、理财方面的知识了。</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul>
<li>年度必看国产剧：《琅琊榜》</li>
<li>年度必看美剧：《疑犯追踪》《无耻之徒》</li>
<li>年度可看国产电影：《烈日灼心》《老炮儿》</li>
<li>年度必看外国电影：《火星救援》</li>
<li>年度 iOS 开发者必用工具：FLEX</li>
<li>年度必买 App：1Password Dash Reeder</li>
<li>年度最不值得购买商品：坚果手机</li>
</ul>
<h3 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h3><p>目前能想到的是多学一些经济知识，还有一些设计 &amp; Sketch方面的知识，技术上就不说了，因为我觉得自己总能找到一些点，做一些有趣的事情。</p>
<p>最后，每个经历都是一次成长，希望自己能不忘初心，厚积薄发，永远年轻，永远热泪盈眶。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[提高工作效率篇之命令行版的 Alfred —— z]]></title>
      <url>http://blog.liushuaiko.be/blog/2015/12/17/awesome-z/</url>
      <content type="html"><![CDATA[<p> z 是一个非常 awesome 的脚本，它通过分析并记录你 <code>cd</code> 命令的路径，建立它自己的数据索引，之后通过 z 命令可以快速跳到你想要 cd 的目录下。对于需要频繁在命令行中切换路径的工友来说，简直是神器。</p>
 <a id="more"></a>
<p>一图胜千言：</p>
<p><img src="http://7nj23c.com1.z0.glb.clouddn.com/awesome_z.gif" alt="awesome_z"></p>
<p>如何安装呢？</p>
<p>如果你用的是 zsh + oh-my-zsh，整个过程大概需要花费30秒。</p>
<p>打开<code>~/.zshrc</code>，找到 <code>plugins</code>这一行：</p>
<pre><code>plugins=(git osx sublime)
</code></pre><p>添加 z：</p>
<pre><code>plugins=(git osx sublime z)
</code></pre><p>然后 restart 命令行，先 cd 一番，让 z 学习一下，之后就尽情的 z 吧！</p>
<p>如果你没有使用 zsh，或者没有使用 oh-my-zsh，稍麻烦一点点。</p>
<p>首先去这里 <a href="https://github.com/rupa/z" target="_blank" rel="external">https://github.com/rupa/z</a> 把脚本 z.sh 下载下来，之后在 <code>~/.zshrc</code> 中加上这样的一句话，在命令行打开后执行 z：</p>
<pre><code>source /path/to/z.sh
</code></pre><p>如果你甚至没有使用 zsh，那么可能要在 ~/.bashrc 里加上类似的命令：</p>
<pre><code>. /path/to/z.sh
</code></pre><p>BTW，可以用 <code>z -l</code> 来看目前 z 的数据情况。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[给iOS App添加基于3D touch的Quick Actions]]></title>
      <url>http://blog.liushuaiko.be/blog/2015/10/28/iOS9-Quick-Actions/</url>
      <content type="html"><![CDATA[<p>3D Touch 的问世，给 iOS App 交互增加了更多的可能。（废话）</p>
<p>Apple 官方介绍了3种应用场景：</p>
<a id="more"></a>
<ul>
<li>给 App 增加 Quick Actions：重按 App 图标，弹出一个快捷菜单</li>
<li>Peek &amp; Pop：轻按弹出 preview，再用力一点按 commit</li>
<li>绘图类 App：例如按压的力道不同，线条的粗细则不同</li>
</ul>
<p>本文介绍了如何给 iOS App 添加基于 3D touch 的 Quick Actions，也即 Shortcut Items。</p>
<p>其实 Apple 给的 <a href="https://developer.apple.com/library/prerelease/ios/samplecode/ApplicationShortcuts/Introduction/Intro.html#//apple_ref/doc/uid/TP40016545" target="_blank" rel="external">Sample Project</a> 非常翔实，读者可以直接下下来运行来看。</p>
<h3 id="没有屌屌的6s真机，我该怎么办呢？"><a href="#没有屌屌的6s真机，我该怎么办呢？" class="headerlink" title="没有屌屌的6s真机，我该怎么办呢？"></a>没有屌屌的6s真机，我该怎么办呢？</h3><p>这里有个对 iPhone 模拟器的小 tweak——<a href="https://github.com/DeskConnect/SBShortcutMenuSimulator" target="_blank" rel="external">SBShortcutMenuSimulator</a>，可以让 6s 模拟器展示出某个 App 的快捷菜单。</p>
<p>但要注意的是，这个 tweak 并没有模拟 3D touch，而只能模拟展示某个 App 的 Quick Actions。</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="http://7nj23c.com1.z0.glb.clouddn.com/iOS_quick_action_1.png" width="30%"></p>
<h3 id="开始添加"><a href="#开始添加" class="headerlink" title="开始添加"></a>开始添加</h3><p>为 App 添加 Shortcut 有两种方式，一种是直接在 info.plist 里配置，另一种是通过代码添加。在代码里添加至少需要 App 运行过一次才会生效。</p>
<h3 id="在-info-plist-里配置：向系统注册-Static-类型的-Quick-Actions"><a href="#在-info-plist-里配置：向系统注册-Static-类型的-Quick-Actions" class="headerlink" title="在 info.plist 里配置：向系统注册 Static 类型的 Quick Actions"></a>在 info.plist 里配置：向系统注册 Static 类型的 Quick Actions</h3><p><img src="http://7nj23c.com1.z0.glb.clouddn.com/iOS_quick_action_2.png" width="70%"></p>
<p>添加很简单。</p>
<ul>
<li><code>UIApplicationShortcutItemType</code>（必须） - 菜单项的ID，将来处理菜单的点击事件时，可以用来标识菜单项</li>
<li><code>UIApplicationShortcutItemTitle</code>（必须） &amp; <code>UIApplicationShortcutItemSubtitle</code>（可选） - 菜单项的标题&amp;副标题</li>
<li><code>UIApplicationShortcutItemIconType</code>(可选) &amp; <code>UIApplicationShortcutItemIconFile</code>（可选） - 系统预置了<a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIApplicationShortcutIcon_Class/#//apple_ref/c/tdef/UIApplicationShortcutIconType" target="_blank" rel="external">几种icon类型</a>，当然，你也可以指定icon文件，见 <a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIApplicationShortcutIcon_Class/" target="_blank" rel="external">UIApplicationShortcutIcon</a></li>
<li><code>UIApplicationShortcutItemUserInfo</code>（可选） - 用于传递信息，例如可以把App当前版本等信息传到代码中，即在代码中获取到 Shortcut Item 实例时，可以进一步获取这个字典，拿到里面的信息</li>
</ul>
<h3 id="在代码里添加：运行时动态注册-Quick-Actions"><a href="#在代码里添加：运行时动态注册-Quick-Actions" class="headerlink" title="在代码里添加：运行时动态注册 Quick Actions"></a>在代码里添加：运行时动态注册 Quick Actions</h3><p>上图中的每个菜单项抽象到代码中是一个<code>UIApplicationShortcutItem</code>类，<code>UIApplication</code>类中新增了一个属性<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplication_Class/#//apple_ref/occ/instp/UIApplication/shortcutItems" target="_blank" rel="external"><code>shortcutItems</code></a>。我们需要在<code>application:didFinishLaunchingWithOptions:</code>中给这个属性赋值。</p>
<pre><code>#define BUILD_TYPE(X) [NSString stringWithFormat:@&quot;%@.%@&quot;, [NSBundle mainBundle].bundleIdentifier, X]

if (!application.shortcutItems || application.shortcutItems.count == 0) {
    UIApplicationShortcutItem *item = [[UIMutableApplicationShortcutItem alloc] initWithType:BUILD_TYPE(@&quot;Type3&quot;)
                                                                              localizedTitle:@&quot;GitHub&quot;
                                                                           localizedSubtitle:@&quot;liushuaikobe&quot;
                                                                                        icon:[UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypeLove]
                                                                                    userInfo:nil];
    application.shortcutItems = @[item];
}
</code></pre><p>要注意的是，在代码里直接设置<code>application.shortcutItems</code>不会覆盖掉我们在 info.plist 里静态设置的菜单项，会 append 在 info.plist 中菜单项的后面。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>系统会优先显示静态的 Quick Actions，然后看看还有没有地方再决定是否展示动态的 Quick Actions。至于最多显示几个，官方文档也没给出明确的数字，只是用「system-defined limit」带过。不过经过测试，目前最多只能展示4个。</p>
<p>此外，在runtime获取到的<code>shortcutItems</code>，也只包括动态注册的 Quick Actions，静态注册的 Actions 是不包括在内的，因此在为这个数组赋值时，要注意加一个只注册一次的保护，先判断里面有没有值。</p>
<h3 id="Shortcut的事件处理"><a href="#Shortcut的事件处理" class="headerlink" title="Shortcut的事件处理"></a>Shortcut的事件处理</h3><p><code>UIApplicationDelegate</code>给我们提供了一个回调：<code>application:performActionForShortcutItem:completionHandler:</code>，用于处理 App 的 Quick Actions。无论 App 的 Quick Action 启动了 App 还是重新让 App 回到前台，这个方法都会被调用。</p>
<p>因此，我们可以把处理 Quick Actions 的逻辑放在这里：</p>
<pre><code>- (BOOL)handleQuickActions:(UIApplicationShortcutItem *)item {

    void (^handle)(NSString *) = ^(NSString *type) {
        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@&quot;Handle&quot; message:type preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction *action = [UIAlertAction actionWithTitle:@&quot;OK&quot; style:UIAlertActionStyleDefault handler:nil];
        [alertController addAction:action];

        [self.window.rootViewController presentViewController:alertController animated:YES completion:nil];
    };

    if ([item.type isEqualToString:BUILD_TYPE(@&quot;Type1&quot;)]) {
        handle(item.type);
        return YES;
    } else if ([item.type isEqualToString:BUILD_TYPE(@&quot;Type2&quot;)]) {
        handle(item.type);
        return YES;
    } else if ([item.type isEqualToString:BUILD_TYPE(@&quot;Type3&quot;)]) {
        handle(item.type);
        return YES;
    }

    return NO;
}

- (void)application:(UIApplication *)application performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem completionHandler:(void (^)(BOOL))completionHandler {
    BOOL hasHandled = [self handleQuickActions:shortcutItem];
    completionHandler(hasHandled); // 告诉系统Quick Actions有没有被妥善处理
}
</code></pre><p>当 Quick Actions 启动（不是从后台唤醒到前台）了 App 时，<code>UIApplicationDelegate</code>中的方法<code>application:willFinishLaunchingWithOptions:</code>和<code>application:didFinishLaunchingWithOptions:</code>还是会照常被调用，且这两个方法被调用了之后，<code>- application:performActionForShortcutItem:completionHandler:</code>才会被调用。</p>
<p>这种情况下，被点击的 Shortcut Item 会被放在这两个方法的参数 Options 字典中，作为<code>UIApplicationLaunchOptionsShortcutItemKey</code>这个 key 的 value。因此，当你不得不在这两个方法中对 App 由 Quick Action 启动做一些特别的处理，那么官方的 Demo 推荐这样做：</p>
<pre><code>// 首先在实现了 UIApplicationDelegate 的类中增加一个这样的实例变量，
// 用于保存当前触发 Quick Action 的 Shortcut Item 的引用

UIApplicationShortcutItem *_currentItem;

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    if (launchOptions &amp;&amp; launchOptions[UIApplicationLaunchOptionsShortcutItemKey]) {

        // 说明是由 Quick Action 启动的App
        // 获取到 Shortcut Item 的引用

        _currentItem = launchOptions[UIApplicationLaunchOptionsShortcutItemKey];

        // 如若返回NO，则系统不会调用 performActionForShortcutItem 方法
        // 因为我们会在 applicationDidBecomeActive 做出处理
        // 因此这里不希望 performActionForShortcutItem 先处理一下

        return NO;
    }

    return YES;
}

// 接着，在 applicationDidBecomeActive 时，做出处理

- (void)applicationDidBecomeActive:(UIApplication *)application {
    if (_currentItem) {
        [self handleShortcartItem:_currentItem];
        _currentItem = nil;
    }
}
</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>官方的 Sample Project 用 Swift 编写，综合使用了 <code>guard</code>，新式 enum 等多个 Swift 新特性，强烈建议读者前去阅读。</p>
<p>以上。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一篇不算晚的Auto Layout入门教程]]></title>
      <url>http://blog.liushuaiko.be/blog/2015/09/22/autolayout-introduction/</url>
      <content type="html"><![CDATA[<p>自打我混iOS圈以来，写UI就使用的是frame绝对布局。说是「绝对」，但在写的时候也已带着动态的思想了。比如，尽可能地用<code>autoResizingMask</code>。但是对于那种mask不能用的场景，在写布局时就像在做小学几何题，很是复杂。</p>
<p>在近期的项目中，尝试了Auto Layout，试着把自己的心得总结一下。</p>
<a id="more"></a>
<h3 id="Auto-Layout-简介"><a href="#Auto-Layout-简介" class="headerlink" title="Auto Layout 简介"></a>Auto Layout 简介</h3><p>网上介绍Auto Layout的文章很多，有一点大家很少提到。就Auto Layout本身来说，它并不是什么新鲜的技术。Auto Layou系统是<a href="https://en.wikipedia.org/wiki/Cassowary_(software" target="_blank" rel="external">Cassowary</a>算法的Cocoa实现。Cassowary是一个在二十世纪九十年代被发明，解析<strong>线性</strong>等式、不等式约束的一个算法。</p>
<p>开发者提供一系列的<strong>布局规则</strong>给Cocoa Auto Layout系统，它基于Cassowary算法，把规则转换成了View(s)的frame，完成了布局。这个所谓的「布局规则」，就是Auto Layout里的「约束」，Constraint。</p>
<p>前面说到，Cassowary算法解析的线性等式、不等式，因此，我们提供给Auto Layout的约束是线性的约束。可以简单把线性约束理解为用一次方程来描述的约束。</p>
<p>一次方程，它的基本形式（以等式为例）</p>
<pre><code>y = kx + b
</code></pre><p>自然地，在Auto Layout中，一个约束该长什么样子：</p>
<pre><code>view1的某个属性 = k * view2的某个属性 + b
</code></pre><p>如上面所示，一个约束描述了两个属性之间的关系，涉及到了7个量（view1、属性1、关系、view2、属性2、k、b）。</p>
<p>我们就是把这种形式的一条条的规则提供给Auto Layout，它综合了许许多多这样的规则，来完成布局。</p>
<p>「Hey，小奥，这个View要靠左显示，离它爹10像素吧！」<br>「小奥，这个Label跟它上面的按钮垂直居中！」</p>
<p>怎么样？反正给我的感受是，frame布局是我们替机器思考，而Auto Layout，是为我们自己思考。</p>
<h3 id="Constraint-in-Code"><a href="#Constraint-in-Code" class="headerlink" title="Constraint in Code"></a>Constraint in Code</h3><p>上文我们介绍了在逻辑中该怎么去表示一个「约束」。那落实到代码中，该怎么表示呢？</p>
<p>苹果给我们提供了这样一个类，用作代码中一个约束的抽象——<code>NSLayoutConstraint</code>。</p>
<p>它有一个很长的构造方法，返回一个约束实例，这个方法的参数就是上面提到的7个量：</p>
<pre><code>NSLayoutConstraint *c = [NSLayoutConstraint constraintWithItem:view1 attribute:attr1
                                                     relatedBy:relation
                                                        toItem:view2 attribute:attr2
                                                    multiplier:k constant:b];
</code></pre><p>通过这个方法，我们构造一个又一个的<code>NSLayoutConstraint</code>实例，通过把这些实例add给合适的View的方式提供给Auto Layout System，就完成了代码层面的添加约束的过程。</p>
<h3 id="Before-starting"><a href="#Before-starting" class="headerlink" title="Before starting"></a>Before starting</h3><p>在你迫不及待的想上手之前，有两点务必记住。</p>
<ul>
<li>代码上忘掉<code>frame</code>和<code>autoresizingMask</code></li>
<li>父View当前的大小是不可靠的</li>
</ul>
<p>对于第一点，由于Auto Layout System已经接管了frame的设置，如果你再来掺一脚，会有很多诡异的问题。注意我说的是在代码上忘掉<code>frame</code>，在思考某个特定View的约束时，还是要想到它的frame的概念的。回想我们的frame布局时代，一个frame：</p>
<pre><code>{x, y, width, height}
</code></pre><p>有四个量，也就是说至少需要四个量才能确定一个View的布局，逻辑上想想确实是那么回事。那我在我们添加某个View的约束时，也至少需要四个约束，才能确定一个View的布局。</p>
<pre><code>水平方向：我在哪？我多宽？
竖直方向：我在哪？我多高？
　　　　　　　　　　　　　---- 一个View的独白
</code></pre><p>忘掉<code>autoresizingMask</code>同理。我们甚至<strong>必须要</strong>显式地设置<code>translatesAutoresizingMaskIntoConstraints</code>来保证约束的正确解析。当你在Auto Layout里摸爬滚打，痛不欲生却无论如何也没有正确优雅的布局映入你眼帘的时候，一定要记得回过头来看看，是不是忘记把相关View的这个属性设置为<code>NO</code>了！</p>
<p>对于第二点，这是为了强迫你用动态的思维去思考该怎么描述约束。走出根据父View的bounds来设置子View的frame的时代吧，enjoy Auto Layout！</p>
<h3 id="Add-Constraints"><a href="#Add-Constraints" class="headerlink" title="Add Constraints"></a>Add Constraints</h3><p>接下来我们就开始计划着给View添加约束了。假设给了你一块地（一个View），你要给它的子View们添加约束，用Auto Layout进行布局，大致的思路如下：</p>
<ul>
<li>给这些Views大致分分组。当子View很多时，没必要全把他们当儿子。合理地用一些Container View，把儿子变成孙子，达到简化约束的目的。</li>
<li>确定儿子们的布局依赖等级关系。举个例子，要想确定儿子A的位置，首先我得知道儿子B的位置。换句话说，只要儿子B的位置确定了，那么儿子A的位置就能确定。</li>
<li>找出那些只依赖父亲的儿子，也即依赖关系最顶层的儿子（一定存在），先添加它们的约束。</li>
<li>根据依赖关系层级，逐级添加约束</li>
</ul>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>假设我们要实现一个TableView，它的每个Cell中有个ImageView，显示一张图。大致效果如下图所示。</p>
<p><img src="http://7nj23c.com1.z0.glb.clouddn.com/autolayout1.png" width="40%"></p>
<p>按着上面的思路，因为这个父亲（TableView Cell的contentView，注意使用Auto Layout布局TableView Cell一定要把儿子加在cotnentView上，不然在iOS 7、8上会有很诡异的问题）只有一个儿子，布局依赖关系也就很清楚了，开始构思约束。</p>
<p>Wait，在添加约束前，要先告知Auto Layout System ImageView和self.contentView的父子关系：</p>
<pre><code>_imageView = [[UIImageView alloc] init];
_imageView.backgroundColor = [UIColor orangeColor];
_imageView.translatesAutoresizingMaskIntoConstraints = NO; // Don&apos;t forget !!
[self.contentView addSubview:_imageView];
</code></pre><p>OK，首先，这个ImageView的上、左、下距离它爹各20，约束如下：</p>
<pre><code>NSLayoutConstraint *c1 = [NSLayoutConstraint constraintWithItem:_imageView attribute:NSLayoutAttributeLeft
                                                      relatedBy:NSLayoutRelationEqual
                                                         toItem:self.contentView attribute:NSLayoutAttributeLeft
                                                     multiplier:1 constant:20];

NSLayoutConstraint *c2 = [NSLayoutConstraint constraintWithItem:_imageView attribute:NSLayoutAttributeTop
                                                      relatedBy:NSLayoutRelationEqual
                                                         toItem:self.contentView attribute:NSLayoutAttributeTop
                                                     multiplier:1 constant:20];

NSLayoutConstraint *c3 = [NSLayoutConstraint constraintWithItem:_imageView attribute:NSLayoutAttributeBottom
                                                      relatedBy:NSLayoutRelationEqual
                                                         toItem:self.contentView attribute:NSLayoutAttributeBottom
                                                     multiplier:1 constant:-20];
</code></pre><p>来分析一下。垂直方向，当<code>self.contentView</code>的高度确定后，由于我们指定了<code>_imageView</code>的上下边距，则y和height都能被确定；水平方向上，我们指定了左边距，能确定x，但是width不能确定，因此我们还需要一个约束：</p>
<pre><code>NSLayoutConstraint *c4 = [NSLayoutConstraint constraintWithItem:_imageView attribute:NSLayoutAttributeWidth
                                                      relatedBy:NSLayoutRelationEqual
                                                         toItem:_imageView attribute:NSLayoutAttributeHeight
                                                     multiplier:1 constant:0];
</code></pre><p><code>c4</code>告诉了Auto Layout System，<code>_imageView</code>的长和宽相等。这样，它的约束就齐活了。</p>
<p>接着，这四个约束要给谁加。注意，每个约束要加载这个约束涉及到的两个View的<strong>最小父View</strong>上，Forgiveness，这是我自己提出的概念。注意到<code>c1</code>，<code>c2</code>，<code>c3</code>涉及到的两个View是<code>self.contentView</code>和<code>_imageView</code>，其中<code>_imageView</code>是<code>self.contentView</code>的子View，因此约束就需要加给<code>self.contentView</code>。</p>
<pre><code>[self.contentView addConstraints:@[c1, c2, c3]];
</code></pre><p><code>c4</code>涉及到的两个View是<code>_imageView</code>本身，约束加给它自己。</p>
<pre><code>[_imageView addConstraint:c4];
</code></pre><p>运行起来，结果如下图。</p>
<p><img src="http://7nj23c.com1.z0.glb.clouddn.com/autolayout2.png" width="30%"></p>
<h3 id="Visual-Format-Language"><a href="#Visual-Format-Language" class="headerlink" title="Visual Format Language"></a>Visual Format Language</h3><p>继续上面的例子。或许你会抱怨，每个View都需要搞这么一发，得写多少代码啊！</p>
<p>苹果贴心地给我们搞了一套形象地表示约束的方法——Visual Format Language（VFL）。</p>
<p>上面的<code>c1</code>，<code>c2</code>，<code>c3</code>可以表示成：</p>
<pre><code>CGFloat leftMargin = 20;

NSArray *cs = [NSLayoutConstraint constraintsWithVisualFormat:@&quot;H:|-(leftMargin)-[_imageView]&quot;
                                                      options:0 metrics:@{@&quot;leftMargin&quot;: @(leftMargin)}
                                                        views:NSDictionaryOfVariableBindings(_imageView)];
NSArray *cs1 = [NSLayoutConstraint constraintsWithVisualFormat:@&quot;V:|-20-[_imageView]-20-|&quot;
                                                      options:0 metrics:nil
                                                        views:NSDictionaryOfVariableBindings(_imageView)];

[self.contentView addConstraints:cs];
[self.contentView addConstraints:cs1];
</code></pre><p>要把VFL说完，得新写一篇文章了啊，篇幅限制，就不展开叙述了，具体请看：<a href="https://developer.apple.com/library/prerelease/tvos/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage.html" target="_blank" rel="external">官网文档</a>。</p>
<h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>如果认真看到这，那么相信你是真的入门了。Auto Layout的东西还有很多，值得你去花时间继续深入调研。</p>
<p>比如，每个约束还有优先级之分。当Auto Layout System发现你给它的约束有冲突，它会根据有冲突的约束的优先级进行仲裁。</p>
<p>还有一些其它的东西是入门之后需要细细体会的，最好自己写一些Demo。</p>
<ul>
<li><a href="https://www.objc.io/issues/3-views/advanced-auto-layout-toolbox/#frame-vs-alignment-rect" target="_blank" rel="external">Frame vs. Alignment Rect</a></li>
<li><a href="https://www.objc.io/issues/3-views/advanced-auto-layout-toolbox/#intrinsic-content-size" target="_blank" rel="external">Intrinsic Content Size 以及 Compression Resistance 和 Content Hugging</a></li>
<li><a href="https://www.objc.io/issues/3-views/advanced-auto-layout-toolbox/#animation" target="_blank" rel="external">Animation with Auto Layout</a></li>
</ul>
<hr>
<p> <em>参考文献</em></p>
<ul>
<li><a href="http://stacks.11craft.com/cassowary-cocoa-autolayout-and-enaml-constraints.html" target="_blank" rel="external">http://stacks.11craft.com/cassowary-cocoa-autolayout-and-enaml-constraints.html</a></li>
<li><a href="http://www.informit.com/articles/article.aspx?p=2151265" target="_blank" rel="external">http://www.informit.com/articles/article.aspx?p=2151265</a></li>
<li><a href="http://sourceforge.net/p/cassowary/wiki/Home/" target="_blank" rel="external">http://sourceforge.net/p/cassowary/wiki/Home/</a></li>
<li><a href="http://stackoverflow.com/a/16281229/1108052" target="_blank" rel="external">http://stackoverflow.com/a/16281229/1108052</a></li>
<li><a href="https://www.objc.io/issues/3-views/advanced-auto-layout-toolbox/" target="_blank" rel="external">https://www.objc.io/issues/3-views/advanced-auto-layout-toolbox/</a></li>
<li><a href="https://developer.apple.com/library/prerelease/tvos/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage.html" target="_blank" rel="external">https://developer.apple.com/library/prerelease/tvos/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage.html</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Core Text实现支持iOS 6的图文混排]]></title>
      <url>http://blog.liushuaiko.be/blog/2015/05/23/CoreText-Introduction/</url>
      <content type="html"><![CDATA[<p>为了让图文混排支持iOS 6，不得不暂时放弃学习TextKit，不过正好也借着这个机会了解了文字排版的一些基本知识，以及如何直接使用底层的Core Text API，来进行图文混排。正所谓出来混，总是要还的，学一些这方面的知识，对学习TextKit也是很有帮助的！</p>
<p>本文将介绍使用Core Text的API，结合Core Graphics来实现支持iOS 6的图文混排的基本思想及方法。</p>
<a id="more"></a>
<p>效果图预览：</p>
<p><img src="http://vars.qiniudn.com/CoreTextDemo.png" width="30%"></p>
<h3 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h3><p>Core Text是进行文字排版的工具，为了更称手地使用它，了解一些文字排版的基础知识很有必要。为了后续理解方便，强烈建议先阅读<a href="http://geeklu.com/2013/03/core-text/" target="_blank" rel="external">这篇很好的文章</a>，我就不拾人牙慧了。</p>
<p>但是祭出这两幅幅神图还是很有必要的。</p>
<p><img src="http://vars.qiniudn.com/glyphterms.png" width="50%"></p>
<p><img src="http://vars.qiniudn.com/glyphmetrics.png" width="50%"></p>
<p>基于上图，有几个点还是需要强调一下：</p>
<ul>
<li>Baseline，基线。想想你是如何在四线三格纸上写英文字母的，基线就相当于第三条线</li>
<li>Line Origin，行原点。把一橫行文字的基线看成是一条线段，线段的起点就是这行的Line Origin</li>
<li>Ascent，上高。一行文字，共享一条基线，最高的字形到基线的高就是上高，是一个正值</li>
<li>Descent，下高。同Ascent，最深的字形到基线的高就是下高，是一个负值</li>
<li>leading，行距。行与行之间的距离</li>
</ul>
<p>那么再回过头来看Core Text中一些基本的概念以及对应的类。</p>
<p>进行文字的绘制，总得有个地方吧！也即总得告诉CT在那块把字给画出来？这个所谓的「地方」，就是CTFrame。<br>在使用的过程中，我们通常是用一个AttributedString来初始化一个CTFrame的工厂<code>CTFramesetter</code>，然后用这个工厂结合一个<code>CGPath</code>，来得到一个CTFrame。</p>
<p>CT在CTFrame上绘制文字的时候，不会超出这个Frame，一行显示不下，新起一行，「行」在CT中的对象模型就是CTLine。<br>对于每一行，具有相同属性（对，就是你给AttributedString添加的属性）的紧挨着的字形集合体，被称为一个CTRun。</p>
<p>一个Run在渲染的时候，如果设置了CTRunDelegate，那么便会向它的Delegate询问一些信息，包括这个Run的Ascent、Descent，以及宽度等等。注意CT是一个C级别的库，CTRunDelegate也是通过C语言中函数指针来完成设置的，详见下面的代码。</p>
<p>有关Core Text的几个核心概念可以参考下图：</p>
<p><img src="http://vars.qiniudn.com/coretextterms.png" alt="coretextterms.png"></p>
<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>我们使用Core Text来进行排版（typeset）和文字的绘制，并利用其获取图片位置，使用Core Graphics进行图片的绘制。</p>
<p>这个过程可以分成两步。</p>
<ol>
<li>使用CT进行文字的排版和绘制，为该显示图片的地方留出位置</li>
<li>遍历每一行，按行画出这行的图片</li>
</ol>
<h3 id="Go-Go-Go"><a href="#Go-Go-Go" class="headerlink" title="Go Go Go"></a>Go Go Go</h3><p>在对基本的概念以及思想了解各大概后，便可以动手来实现了！</p>
<p>且慢，为了测试结果更加直观，我们先编写一些工具方法，代码如下：</p>
<pre><code>- (void)drawBorder:(CGRect)rect inContext:(CGContextRef)context {
    CGPathRef rectBorderPath = CGPathCreateWithRect(rect, NULL);
    [[UIColor redColor] setStroke];
    CGContextAddPath(context, rectBorderPath);
    CGContextDrawPath(context, kCGPathStroke);
    CFRelease(rectBorderPath);
}

- (void)drawPoint:(CGPoint)point inContext:(CGContextRef)context {
    CGContextFillRect(context, CGRectMake(point.x, point.y, 2, 2));
}

// 先转换坐标系再画点
- (void)drawPoint:(CGPoint)point inContext:(CGContextRef)context inRect:(CGRect)rect {
    UIView *view = [[UIView alloc] initWithFrame:rect];
    view.backgroundColor = [UIColor yellowColor];
    [self addSubview:view];
    CGPoint pointInSelf = [self convertPoint:point fromView:view];
    [view removeFromSuperview];
    [self drawPoint:pointInSelf inContext:context];
}
</code></pre><p>终于可以上关键代码了，代码中注释已经很翔实了！</p>
<pre><code>- (void)drawRect:(CGRect)rect {
    [super drawRect:rect];

    CGContextRef context = UIGraphicsGetCurrentContext();

    // 翻转坐标系
    CGContextSetTextMatrix(context, CGAffineTransformIdentity);
    CGContextTranslateCTM(context, 0, CGRectGetHeight(self.bounds));
    CGContextScaleCTM(context, 1.0, -1.0);

    // 可以在翻转坐标系之前也画个红绿色块来对比坐标系Y轴翻转的效果
    CGContextSetRGBFillColor (context, 1, 0, 0, 1);
    CGContextFillRect (context, CGRectMake (100, 100, 100, 100 ));
    CGContextSetRGBFillColor (context, 0, 1, 0, .5);
    CGContextFillRect (context, CGRectMake (150, 205, 100, 100));

    // 准备CGPath，用于CTFrame的构造
    CGMutablePathRef path = CGPathCreateMutable();
    CGFloat frameOffsetX = 20.0f;
    CGFloat frameOffsetY = 20.0f;
    CGRect textFrame = CGRectInset(self.bounds, frameOffsetX, frameOffsetY);
    CGPathAddRect(path, NULL, textFrame);

    [self drawBorder:textFrame inContext:context];

    // 装文字的AttributedString
    NSMutableAttributedString *str = [[NSMutableAttributedString alloc] initWithString:@&quot;Our destiny offers not the cup of despair, but the chalice of opportunity. So let us seize it, not in fear, but in gladness.——R.M. Nixon&quot; attributes:@{NSForegroundColorAttributeName: [UIColor greenColor], NSFontAttributeName: [UIFont systemFontOfSize:22]}];

    // 构造CTRunDelegate，用以给占着图片位置的空字符的CTRun作为Delegate，提供这些Run的宽、上下高等
    NSDictionary *attrs = @{@&quot;key&quot;: @&quot;vars.me&quot;};
    CTRunDelegateCallbacks imageCallbacks;
    imageCallbacks.version = kCTRunDelegateVersion1;
    imageCallbacks.dealloc = deallocCallback;
    imageCallbacks.getDescent = descentCallback;
    imageCallbacks.getAscent = ascentCallback;
    imageCallbacks.getWidth = widthCallback;
    // http://stackoverflow.com/a/12919404/1108052
    CTRunDelegateRef runDelegate = CTRunDelegateCreate(&amp;imageCallbacks, (void *)CFBridgingRetain(attrs)); // 第二个参数就是传给callBack函数的void *类型的参数

    // 随机构造几个装有图片占位符的AttributedString，插入到上面装文字的AttributedString中
    unichar space = 0xFFFC; // 图片占位符，为什么用0xFFFC下述详情
    NSString *spaceStr = [NSString stringWithCharacters:&amp;space length:1];
    // 装有图片占位符的AttributedString，注意，其属性中有一个@&quot;imageName&quot;属性，这是我们区别一个Run是否是图片Run的标识，见下面遍历每行Run部分
    NSMutableAttributedString *imageStr = [[NSMutableAttributedString alloc] initWithString:spaceStr attributes:@{(NSString *)kCTRunDelegateAttributeName: (__bridge id)runDelegate, @&quot;imageName&quot;: @&quot;001.png&quot;}];
    [str insertAttributedString:imageStr atIndex:5];
    [str insertAttributedString:imageStr atIndex:55];
    [str insertAttributedString:imageStr atIndex:75];
    [str insertAttributedString:imageStr atIndex:105];
    [str insertAttributedString:imageStr atIndex:135];

    // 构造CTFrame
    CTFramesetterRef framesetter = CTFramesetterCreateWithAttributedString((CFAttributedStringRef)str);
    CTFrameRef frame = CTFramesetterCreateFrame(framesetter, CFRangeMake(0, str.length), path, NULL);

    // 得到Frame中的每一行，装在一个CFArray里
    CFArrayRef lines = CTFrameGetLines(frame);

    // 得到每一行的Line Origin（见上述知识储备部分），用以计算每一行的图片位置，注意，得到的点是以CTFrame为坐标系的坐标
    CGPoint lineOrigins[CFArrayGetCount(lines)];
    CTFrameGetLineOrigins(frame, CFRangeMake(0, 0), lineOrigins);

    // 下面遍历Frame中的每一行，逐行绘制图片
    for (CFIndex i = 0; i &lt; CFArrayGetCount(lines); ++i) {
        CTLineRef line = CFArrayGetValueAtIndex(lines, i);

        [self drawPoint:lineOrigins[i] inContext:context inRect:textFrame];

        // 得到这行中的所有CTRun，状态一个CFArray里
        CFArrayRef runs = CTLineGetGlyphRuns(line);

        // 遍历这行所有Run
        for (CFIndex j = 0; j &lt; CFArrayGetCount(runs); ++j) {
            CTRunRef run = CFArrayGetValueAtIndex(runs, j);
            NSDictionary *attrs = (NSDictionary *)CTRunGetAttributes(run);

            // 如果某个Run的@&quot;imageName&quot;属性不为空，则说明这个Run是图片占位符，开始计算这个Run的位置，用CG画图
            NSString *imageName = attrs[@&quot;imageName&quot;];
            if (imageName) {
                CGPoint lineOrigin = lineOrigins[i];

                CGRect imageRunBounds; // 注意：得到的imageRun的bounds，也是在CTFrame坐标系中
                CGFloat imageRunAsent, imageRunDecent;
                imageRunBounds.size.width = CTRunGetTypographicBounds(run, CFRangeMake(0, 0), &amp;imageRunAsent, &amp;imageRunDecent, NULL);
                imageRunBounds.size.height = imageRunAsent + imageRunDecent;
                imageRunBounds.origin.x = lineOrigin.x + CTLineGetOffsetForStringIndex(line, CTRunGetStringRange(run).location, NULL);
                imageRunBounds.origin.y = lineOrigin.y;

                // 开始画图
                UIImage *image = [UIImage imageNamed:imageName];
                if (image) {
                    // 注意：画图时由于是在当前View的Context中，因此我们要根据CTFrame坐标系中的imageRunBounds，转换成在View坐标系的imageDrawRect
                    CGRect imageDrawRect;
                    imageDrawRect.origin.x = imageRunBounds.origin.x + lineOrigin.x + frameOffsetX;
                    imageDrawRect.origin.y = imageRunBounds.origin.y +  frameOffsetY;
                    imageDrawRect.size = imageRunBounds.size;

                    // 用CG画图
                    CGContextDrawImage(context, imageDrawRect, image.CGImage);

                    [self drawBorder:imageDrawRect inContext:context];
                }
            }
        }
    }

    CTFrameDraw(frame, context);

    CFRelease(runDelegate);
    CFRelease(frame);
    CFRelease(path);
    CFRelease(framesetter);
}
</code></pre><p>CTRunDelegate的回调函数代码如下。</p>
<pre><code>#pragma mark - CTRunDelegate

void deallocCallback(void* ref) {
    CFBridgingRelease(ref);
}

CGFloat ascentCallback(void *ref) {

    NSDictionary *attr = (__bridge NSDictionary *)ref;
    NSLog(@&quot;%@&quot;, attr[@&quot;key&quot;]);

    return 32;
}

CGFloat descentCallback(void* ref) {
    return 0;
}

CGFloat widthCallback(void* ref) {
    return 32;
}
</code></pre><p>对代码的理解可以结合下图（使用Sketch画的，真是个好工具）：</p>
<p><img src="http://vars.qiniudn.com/CoreTextCode.png" alt="CoreTextCode.png"></p>
<p>此外，关于上面的代码有几点补充，一是坐标系Y轴翻转的问题，前面推荐过的那篇很好的文章已经说的很详细了，这里就不做赘述了；二是为什么占位符要选择0xFFFC，有两方面原因，一个是<code>kCTRunDelegateAttributeName</code>的官方文档推荐使用这个值，二是经过我自己的测试(iPhone 5)，使用这个值有如下优势，自动把一个imageRun当成一个单词处理：</p>
<p><img src="http://vars.qiniudn.com/CTCompare.png" width="50%"></p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="http://geeklu.com/2013/03/core-text/" target="_blank" rel="external">Core Text 入门</a></li>
<li><a href="http://www.raywenderlich.com/4147/core-text-tutorial-for-ios-making-a-magazine-app" target="_blank" rel="external">Core Text Tutorial for iOS: Making a Magazine App</a></li>
<li><a href="http://blog.devtang.com/blog/2013/10/21/the-tech-detail-of-ape-client-3/" target="_blank" rel="external">猿题库iOS客户端的技术细节（三）：基于CoreText的排版引擎</a></li>
<li><a href="https://developer.apple.com/library/prerelease/ios/documentation/Carbon/Reference/CoreText_Framework_Ref/index.html" target="_blank" rel="external">Core Text Reference Collection</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UICollectionView的数据预加载及图片加载逻辑的优化]]></title>
      <url>http://blog.liushuaiko.be/blog/2015/04/26/UICollectionView-Optimizing/</url>
      <content type="html"><![CDATA[<p>当App中使用了<code>UICollectionView</code>以瀑布流的形式来呈现数据时，站在用户的角度，用户在自上至下一页一页浏览这些内容的过程中，当用户感到滑动很流畅自然，每页内容从无到有需要用户等待的时间很短甚至几乎感觉不到，那么<code>UICollectionView</code>才会带给用户一个很好的体验。本文介绍了为了达到这两个目的所作出的一些客户端的优化。</p>
<a id="more"></a>
<h3 id="数据的预加载"><a href="#数据的预加载" class="headerlink" title="数据的预加载"></a>数据的预加载</h3><p>数据预加载的目的是不必等到用户某一时刻浏览到CollectionView的末尾了，也即本地已经没有更多数据展示了才去发请求拿下一页数据，而是有一个预判，用户就快要看完本地的数据了，可以向Server要下一页数据了！</p>
<p>为了实现预加载，最开始的方案是在UI层面的预判。根据<code>UICollectionView</code>的基类是<code>UIScrollView</code>，大致思路是对于沿竖直方向滚动的CollectionView，考察它的<code>contentOffset.y</code>和<code>conetntSize.height</code>，结合CollectionView的<code>frame.size.height</code>，可以计算CollectionView全部内容底下还有多高没展示出来，如果高度小于我们预先设定的阈值（用户快滑到底了），那么就触发加载下一页的请求。</p>
<p>这样做似乎没什么问题，但是仔细想想，其实并不优雅。一方面，一旦有UI调整的需求，CollectionView每行的高度有调整时，我们也要去调整阈值，来决定是否去请求下一页数据；另一方面，App中不同场景下的CollectionView每行高度不同，需要根据不同场景去Tuning，找出合适的阈值。</p>
<p>后来很自然想到在逻辑上进行预判，也就是我们现在使用的方案。</p>
<p><code>UICollectionView</code>每个Cell都需要一个数据模型对象（Data Transfer Object，下称DTO）来支持它的显示，通常客户端拿到的服务端返回的数据后，做一系列的解析，得到一个一个DTO，用以支持CollectionView的展示。到代码层面DTO们被保存在一个数组里，任意时刻在正确的状态下<code>UICollectionView</code>的总Cell数量应该跟当前本地DTO的个数相等，Cell跟DTO是一一对应的关系，<strong>数据的预加载本质上就是DTO的预加载</strong>。</p>
<p>用户在滚动<code>UICollectionView</code>时，当<code>UICollectionView</code>根据预定的配置觉得它该展示某行某列的Cell时，会向它的DataSource[2]发送<code>collectionView:cellForItemAtIndexPath:</code>消息[3]，询问那行那列该展示什么，这个方法返回一个Cell对象，<code>UICollectionView</code>拿到这个Cell后就把它展示在相应位置。通常这个方法中要做的重要事情就是去上文提到的保存DTO的数组中根据Cell的行列索引找到这个Cell对应的DTO，根据DTO对Cell配置一番，返回给<code>UICollectionView</code>。</p>
<p> 顺着这个思路，在这个方法中可以知道当前<code>UICollectionView</code>需要展示的Cell的索引，由于Cell跟DTO是一一对应的关系，那我们也知道了当前需要的DTO在总数据模型对象中的索引，当剩下的数据模型对象不够支持一页的显示时，就去请求下一页。</p>
<p>表达的可能有点抽象，假设请求一次Server返回20个DTO，过程可以更形象化一点：</p>
<pre><code>- CollectionView: 数据源数据源，用户滑到第181个Cell要露出来了，快给我！
- DataSource: 好的，我首先要去拿第181个Cell对应的DTO，根据这个配置好一个Cell给你去展示！
等等，你都已经展示到第181个Cell了啊！我发现DTO目前本地总共只有200个，200 - 181 = 19 &lt; 20不够支持你展示下一页所需要的20个Cell了，我先发起一个异步请求，去拿新一页的DTO！
</code></pre><p>关键代码，很简单：</p>
<pre><code>NSUInteger countOfDataModel = dataModel.count; // 目前本地有的DTO数量
NSUInteger currentRequestIndex = indexPath.row; // 当前需要的Cell索引，也即当前需要的数据模型索引

if (countOfDataModel - currentRequestIndex &lt; 19) {
    [self fetchNextPageAsync];
}
</code></pre><p>要注意的问题是要做好防止重复发送请求的保护工作。</p>
<h3 id="图片加载逻辑优化"><a href="#图片加载逻辑优化" class="headerlink" title="图片加载逻辑优化"></a>图片加载逻辑优化</h3><p>当<code>UICollectionView</code>的每个Cell都需要展示一个（或多个）图片时，在上文提到的根据DTO配置Cell过程中，会根据DTO中指定的图片的URL，发送一个异步的图片请求，等到图片请求完毕了，再把图片展示到对应的Cell上（当然，可以把这一切交给<code>SDWebImage</code>: ）。</p>
<p>或许你会问，加载图片已经是异步了啊，我还要优化什么？不，这远远不够。在实际的测试中，这种朴素的做法依然会带来明显的滑动过程的卡顿。使用Instruments进行profile发现，在滑动过程中始终会丢那么15帧左右，不能忍！</p>
<p>再回到<code>UICollectionView</code>继承自<code>UIScrollView</code>上来。通过<code>UIScrollView</code>的Delegate，我们能感知到滑动过程中CollectionView的各种关键状态，包括用户的手是否正在拖拽，以及CollectionView是否正在滑动、减速等等，这就是我们优化的秘密武器！</p>
<p>那么，本着不该做的事情不要做，或者等到不得不做的时候再做的原则，让我们分析用户在滑动CollectionView的过程中有哪些地方可以细抠。</p>
<ul>
<li>用户在滑动（拖拽）CollectionView时（手与屏幕正在接触），很有可能是用户在认真逐个浏览每个Cell，要去加载当前可见Cell的图片</li>
<li>用户滑动CollectionView结束后，手离开了屏幕，并引发了CollectionView减速时，<strong>预判</strong>CollectionView减速结束后静止时的状态，对于那些将来静止时用户可见的Cell，提前去加载它们的图片；对于那些只是“昙花一现”的Cell，即它们只是在减速的过程中出现那么一刹那，就被“顶”上去了，只加载这些Cell中图片在本地有缓存的图片（从内存中加载，不值得去发网络请求，即使是异步的也不值得）</li>
<li>减速结束后，CollectionView处于静止状态，加载当前全部可见Cell的图片</li>
</ul>
<p>OK，那么来看我们怎么实现它。</p>
<p>对于CollectionView的每个Cell，我们给它添加一个异步加载图片的方法<code>loadImage</code>。直接上关键代码，看了便知。</p>
<pre><code>// CollectionView将来静止时可见的区域，同时也是标识CollectionView当前是正在被用户拖拽还是已经被拖拽完毕并正在减速
@property (nonatomic, strong) CGRect *targetRect;

#pragma mark - UICollectionView DataSource

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    // ....
    [self loadImageForCell:cell atIndexPath:indexPath];
    // ....
}

#pragma mark - UIScrollView Delegate

- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView {
    self.targetRect = nil;
    [self loadImageForVisibleCells];
}

- (void)scrollViewWillEndDragging:(UIScrollView *)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint *)targetContentOffset {
    self.targetRect = CGRectMake(targetContentOffset-&gt;x, targetContentOffset-&gt;y, scrollView.frame.size.width, scrollView.frame.size.height);
}

- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView {
    self.targetRect = nil;
    [self loadImageForVisibleCells];
}

#pragma mark - Decide to Load Image For Cells

- (void)loadImageForCell:(AESmartCollectionFlowViewCell *)cell
        atIndexPath:(NSIndexPath *)indexPath {
    // Cell的targetURLString是指派给Cell的新的图片URL，在根据Cell的DTO配置Cell时为其赋值
    if (!cell.targetURLString) {
        return;
    }
    // Cell的imageURLString是Cell的当前正在显示的图片URL
    if (![cell.targetURLString isEqualToString:cell.imageURLString] || cell.isDisplayingPlaceholderNow) {
        SDWebImageManager *manager = [SDWebImageManager sharedManager];
        UICollectionViewLayoutAttributes *attr = [self.collectionView layoutAttributesForItemAtIndexPath:indexPath];
        CGRect cellFrame = attr.frame;

        BOOL shouldLoadImageForCurrentCell = YES;
        // 如果正在减速而且当前Cell的frame不在将来滑动停止后的可见区域
        if (self.targetRect &amp;&amp; !CGRectIntersectsRect(self.targetRect.CGRectValue, cellFrame)) {
            // 那么只有Cell的targetURL在内存的缓存中，才去加载它
            SDImageCache *imageCache = [SDImageCache sharedImageCache];
            NSString *key = [manager cacheKeyForURL:[NSURL URLWithString:cell.targetURLString]];
            if (![imageCache imageFromMemoryCacheForKey:key]) {
                shouldLoadImageForCurrentCell = NO;
            }
        }
        if (shouldLoadImageForCurrentCell) {
            [cell loadImage];
        }
    }
}

- (void)loadImageForVisibleCells {
    NSArray *visibleCells = [self.collectionView visibleCells];
    for (UICollectionViewCell *cell in visibleCells) {
        NSIndexPath *indexPath = [self.collectionView indexPathForCell:cell];
        [self loadImageForCell:cell atIndexPath:indexPath];
    }
}
</code></pre><p>做了这些努力后，再去profile一下，发现网速良好情况下滑动时帧率只丢了那么1、2帧，而且滑动起来无明显卡顿！</p>
<h3 id="要么不做，要么做绝"><a href="#要么不做，要么做绝" class="headerlink" title="要么不做，要么做绝"></a>要么不做，要么做绝</h3><p>哈哈，这个有点狠啊，颇有朱元璋的风格。</p>
<p>做了这么多后，我们发现，数据预加载完毕后，向CollectionView发送<code>reloadData</code>消息通知它数据模型变化时，就在这一瞬间，还是会导致CollectionView卡顿那么一下下。</p>
<p>好吧不能忍，封装一个我们自己的<code>reloadData</code>方法，在这里简单的hold住reload，根据上文中的<code>targetRect</code>属性的标记作用，当且仅当在CollectionView减速停止后，再去真正向它发送<code>reloadData</code>消息。在这里仅提供思路，不做赘述了。</p>
<p>此外，在开发中，我们把这一系列的方法以<code>NSObject</code>类的Category形式做一个封装，这样不管谁是CollectionView的Delegate或者DataSource都可以从容应对。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这里头还是有一定玄机的，篇幅限制只写了关键思路，真正的实践需要一个状态机的思维，不断去感受不断去测试不断去Tuning。当然，<code>UITableView</code>的优化完全可以使用相同的方式。最后，用户可能感受不到你做了什么，但起码，对得起自己的情怀：）。</p>
<hr>
<h5 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h5><ul>
<li>[1] Android中的<code>GridView</code></li>
<li>[2] Android中的Adapter</li>
<li>[3] Android中的<code>getView()</code>方法</li>
</ul>
<h5 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h5><ul>
<li><a href="http://tech.glowing.com/cn/practice-in-uiscrollview/" target="_blank" rel="external">UIScrollView 实践经验</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Manacher's algorithm：优雅的求最长回文子串]]></title>
      <url>http://blog.liushuaiko.be/blog/2015/04/12/Manachers-algorithm/</url>
      <content type="html"><![CDATA[<p>2015年第一篇文章，力求做到用中文把<a href="http://en.wikipedia.org/wiki/Longest_palindromic_substring#Manacher.27s_algorithm" target="_blank" rel="external">Manacher’s算法</a>解释的通俗易懂。</p>
<a id="more"></a>
<h3 id="历史-amp-背景"><a href="#历史-amp-背景" class="headerlink" title="历史&amp;背景"></a>历史&amp;背景</h3><p>Manacher’s算法是Manacher在1975年提出的一个在线性时间里找出给定字符串中全部回文子串的算法，随着人们的研究，人们发现Manacher’s算法也可以用来求给定字符串的<strong>最长</strong>回文子串，当然也是线性时间。再后来，有两个小伙提出了基于suffix trees的算法，同样是线性时间求解最长回文子串，慢慢地，人们又找到了一些高效的并行算法求解这类问题。</p>
<p>本文将阐述Manacher’s算法用于求解给定字符串的最长回文子串，样例代码使用Python。</p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>Manacher’s算法真的很简单，你只要静下心来，花二十分钟来阅读并理解以下文字，绝对可以理解，理解了就一辈子都忘不了，接着你会暗暗叫绝，这算法真太赞了。相信你在看到本文之前也看了很多其他的文章，为了减少读者的理解障碍，使用的变量名称我都会尽量跟其他文章的一样。</p>
<h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a><strong>预处理</strong></h4><hr>
<p>为了将最长子串长度为奇数和偶数这两种情况统一转成奇数情况处理，Manacher’s算法在输入字符串的每个字符之间加了一个特殊字符；</p>
<p>为了简化处理过程中遍历字符串时对边界条件的判断，在开头加上另一个特殊字符，这些特殊字符要保证不会出现在任何输入字符串里，见下图：</p>
<p><img src="http://vars.qiniudn.com/manacher_5.png" alt="manacher_5"></p>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><strong>准备工作</strong></h4><hr>
<p>OK，下面是理解这个算法的过程中，要<strong>随时装在脑子</strong>里的一些东西：</p>
<ul>
<li>回文串：由于我们预处理，我们只考虑回文串为奇数的情况，回文串的特性就是<strong>对称</strong>，记住<strong>对称</strong>，在脑子里想想沿着回文串中间的那个字符（下称中心字符）把回文串对折的场景吧，完美的重合。我们把处理后得到的字符串叫s</li>
<li>考虑s中的任一回文子串，该回文串的中心字符在s中的索引记为center，这个回文串中某个字符在s中的索引是i，那么该字符在该回文串中对称字符的索引<code>j = 2 * center - i</code>，见下图：</li>
</ul>
<p><img src="http://vars.qiniudn.com/manacher_4.png" alt="manacher_4"></p>
<h4 id="高能预警"><a href="#高能预警" class="headerlink" title="高能预警"></a><strong>高能预警</strong></h4><hr>
<p>上面的你都理解了，那么我们看算法的精髓部分，静下心。</p>
<p>首先介绍一下变量，仔细阅读，很重要，下面的叙述是基于这些变量的：</p>
<p><img src="http://vars.qiniudn.com/manacher_1.png" alt="manacher_1"></p>
<p>OK，初始假设 current_longest_p_str 的中心字符是 s[0]，也即 center=0，且假设 p[0]=0。</p>
<p>从 s[1] 开始遍历 s（略过我们为了处理边界在开头加的特殊字符），对 s[i]，分两种情况来看：</p>
<h5 id="情况1"><a href="#情况1" class="headerlink" title="情况1"></a><strong>情况1</strong></h5><hr>
<p>s[i] 在 current_longest_p_str 内（如果在的话，可以进一步得出，s[i] 一定在其右半部分，因为是按顺序遍历s，i一定大于center）。</p>
<p>记i关于center的对称点为j（别忘了<code>j = 2 * center - i</code>）</p>
<p>此时，如果<code>i + p[j] &lt; mx</code>的话，等价于<code>j - p[j] &gt; mx的对称点</code>，意味着，以 s[j] 为中心的最长回文串完完整整的在current_longest_p_str内，根据current_longest_p_str的对称性，可得以s[i]为中心的最长回文串也完完整整的在current_longest_p_str内，因此 p[i]=p[j] 成立，见下图：</p>
<p><img src="http://vars.qiniudn.com/manacher_3.png" alt="manacher_3"></p>
<p>如果<code>i + p[j] &gt;= mx</code>的话，意味着，以 s[j] 为中心的最长回文串的一部分在 current_longest_p_str 内。根据 current_longest_p_str 的对称性我们可以知道，以 s[i] 为中心的最长回文子串，至少可以延展到 mx。那 mx 之后的部分呢？由于 mx 之后的字符串我们没办法利用 current_longest_p_str 的对称性了，没办法，只能一个一个去匹配了。转到代码上就是我们可以把 p[i] 置为 mx - i，也即我们已经知道s[i]向右可以扩展到 mx 了（下图橙色框起来部分），再根据逐步向两侧扩展的情况去更新 p[i] 。见下图。</p>
<p><img src="http://vars.qiniudn.com/manacher_2.png" alt="manacher_2"></p>
<p>综合以上两种情况，可以得出<code>p[i] = min(p[j], mx - i)</code>，也即<code>p[i] = min(p[2 * center - i], mx - i)</code>。</p>
<h5 id="情况2"><a href="#情况2" class="headerlink" title="情况2"></a><strong>情况2</strong></h5><hr>
<p>s[i]不在 current_longest_p_str 中，没办法利用 current_longest_p_str 的对称性，只能先将 p[i] 置为0，再向两侧扩展一个一个匹配来更新 p[i] 了。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pre_process</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>.join((<span class="string">"$#"</span>, <span class="string">"#"</span>.join(s), <span class="string">"#"</span>))</div><div class="line"></div><div class="line">    <span class="comment"># @return a string</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></div><div class="line">        s_new = self.pre_process(s)</div><div class="line">        p = [<span class="number">0</span>]</div><div class="line">        center = <span class="number">0</span></div><div class="line">        mx = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s_new)):</div><div class="line">            <span class="comment"># 情况2，s[i]不在current_longest_p_str中</span></div><div class="line">            <span class="keyword">if</span> i &gt; mx:</div><div class="line">                p.append(<span class="number">0</span>)</div><div class="line">            <span class="comment"># 情况1，s[i]在current_longest_p_str中</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                p.append(min(mx - i, p[<span class="number">2</span> * center - i]))</div><div class="line">            <span class="comment"># 没办法，只能一个一个去匹配了</span></div><div class="line">            <span class="comment"># 注意，对于以s[i]为中心的最长回文子串完完整整包括在current_longest_p_str的情况，while循环不会执行，想想为什么</span></div><div class="line">            <span class="keyword">while</span> (i - p[i] - <span class="number">1</span>) &gt; <span class="number">0</span> <span class="keyword">and</span> (i + p[i]  + <span class="number">1</span>) &lt; len(s_new) <span class="keyword">and</span> s_new[i - p[i] - <span class="number">1</span>] == s_new[i + p[i] + <span class="number">1</span>]:</div><div class="line">                p[i] += <span class="number">1</span></div><div class="line">            <span class="comment"># 更新current_longest_p_str相关信息</span></div><div class="line">            <span class="keyword">if</span> p[i] &gt; mx - center:</div><div class="line">                center = i</div><div class="line">                mx = i + p[i]</div><div class="line">        <span class="keyword">return</span> s_new[center - p[center]: center + p[center] + <span class="number">1</span>].replace(<span class="string">"#"</span>, <span class="string">""</span>)</div></pre></td></tr></table></figure>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>希望能给你带来一点帮助，如有理解错误，恳请指正。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="http://www.felix021.com/blog/read.php?2040" target="_blank" rel="external">Manacher’s ALGORITHM: O(n)时间求字符串的最长回文子串</a></li>
<li><a href="http://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-1/" target="_blank" rel="external">Manacher’s Algorithm – Linear Time Longest Palindromic Substring – Part 1</a></li>
<li><a href="http://articles.leetcode.com/2011/11/longest-palindromic-substring-part-ii.html" target="_blank" rel="external">Longest Palindromic Substring Part II</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的2014]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/12/30/my-2014/</url>
      <content type="html"><![CDATA[<p>不知是自己接触的技术越来越牛逼了还是接触的东西越来越弱智了，这一年真的很少提笔去写一些技术上的文章。这种表达个人情感的文章写多了又会觉得自己很矫情，那么今年的年终总结我会力求不带任何感情色彩。</p>
<a id="more"></a>
<h4 id="改变"><a href="#改变" class="headerlink" title="改变"></a>改变</h4><p>哈尔滨到杭州，旧知己到新搭档，Android到iOS，无拘无束到谨小慎微，只求自己的棱角不被磨平，无论何时像鹏总那样保持着对技术的热爱与激情。</p>
<p>做得饭越来越好吃。</p>
<h4 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h4><ul>
<li>《白夜行》</li>
<li>《嫌疑犯X的献身》</li>
<li>《Objective-C高级编程》</li>
<li>《iOS Programming : The Big Nerd Ranch Guide》</li>
</ul>
<h4 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h4><ul>
<li>电影：37部，《星际穿越》等</li>
<li>美剧：4部，《绝命毒师》、《权力的游戏》、《越狱》、《行尸走肉》</li>
</ul>
<h4 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h4><p>青岛4日游。</p>
<h4 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h4><ul>
<li>第一次坐飞机</li>
<li>第一次坐高铁</li>
<li>第一次海淘</li>
<li>第一份工资</li>
<li>第一次用工资给父母买东西</li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li>2个月全职+￥6300考下了驾照</li>
<li>往instagram上传了38张照片</li>
<li>写了13篇技术博客</li>
</ul>
<h4 id="入手的东西"><a href="#入手的东西" class="headerlink" title="入手的东西"></a>入手的东西</h4><ul>
<li>Kindle Paperwhite 2</li>
<li>Razer DeathAdder 鼠标</li>
<li>Logitech M545 无线鼠标</li>
<li>RainDesign mStand</li>
<li>Casio AQ-S810W-1AV Solar Watch</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>技术提高不多。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python入门分享]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/12/29/Python-Introduction/</url>
      <content type="html"><![CDATA[<p>给组内小伙伴们分享Python知识做的slides，本来分享共有三场，但是由于种种原因第三场取消了，也就没去准备.其实第三次分享本来也是要讲那些“Google + 官方文档”就可以搞定的东西。把前两次分享的slides给大家分享出来。</p>
<p>在slideshare上，自备梯子。</p>
<a id="more"></a>
<p><iframe src="//www.slideshare.net/slideshow/embed_code/43048982" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ssuser146893/python-1-43048982" title="Introduction to Python-1" target="_blank">Introduction to Python(1) - History and Basics</a> </strong> from <strong><a href="//www.slideshare.net/ssuser146893" target="_blank">Shuai Liu</a></strong> </div></p>
<p><iframe src="//www.slideshare.net/slideshow/embed_code/43048983" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ssuser146893/python-2-43048983" title="Introduction to Python-2" target="_blank">Introduction to Python(2) - Advanced and Be Pythonic</a> </strong> from <strong><a href="//www.slideshare.net/ssuser146893" target="_blank">Shuai Liu</a></strong> </div></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书的日子]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/11/07/when-I-was-at-school/</url>
      <content type="html"><![CDATA[<p>说来也巧，晚上跟意林匆匆吃了个饭，晚上回来听到的第一首歌就是曾经听意林唱过的。</p>
<a id="more"></a>
<p>郝云的<a href="http://www.xiami.com/song/1772141275" target="_blank" rel="external">《活着》</a>。那是大学里最后一次班饭，吃完了大家似乎还不尽兴，由彪彪撺掇着去了学校后面的KTV，大家外表上没有表现出任何要散伙的伤感，班上的几个比较腼腆的同学还是不怎么说话，对唱歌不感冒的几个同学凑成一桌打起了牌。记不清是谁点了这首歌，但开始是梁栋拿着话筒准备唱的，意林是属于比较活跃的类型，听到前奏后赶忙去抢了另一只话筒，就这样我全程听完了他们唱的这首歌。</p>
<p>听的时候就一个感觉，我靠将来的生活不会就是歌里唱的那样吧。</p>
<p>梁栋，大一军训时站我身边的人。那时大家都很腼腆，努力给人留个好印象。意林跟梁栋都是我隔壁宿舍的，他们给我的感觉就是从来不为学分绩发愁，每天都过得很快乐，因此听歌的时候我觉得这首歌真是配极了他们。</p>
<p>今天跟意林说到，来杭小三分之一年了。很多时候真是怀念极了哈尔滨那个冰天雪地的城市，怀念极了在大学的日子。当时我决定放弃保研，家人，各种同学等我深爱的人都说别了吧，offer年年有，保研弃了将来再想读研可就难了，甚至是到现在，就在今晚，吃完饭时意林还说，“你这能保研的不保研”，我也是醉了。那么现在你问我呢，谈不上后悔，就两点让我耿耿于怀，其一，现在生活中，没有一个想骂“傻B”就可以不用思考直接脱口而出的人，更多情况甚至思考了也不能脱口而出，其二，不会随便喊两句，就会有人跟我一起去游泳，去滑冰，去…..等等。</p>
<p>那么，现在还在国内上学的同学们，我从一个过来人的角度给你们个建议。</p>
<p>无论你在哪个学校，在围墙内还是围墙外，无论什么原因还在读书，请一定要<strong>珍惜当下</strong>。</p>
<p>大四的时候，郭哥就不停给我灌输，大四是你人生中最闲的日子。到现在我觉得郭哥说的太有道理了。读书的日子，是人生中最快乐、最自由的日子。在大四我考下了驾照，学会了游泳，做完了毕设，差一点得了校优，能在刮着风的下午陪Cliff去打篮球，我很庆幸能有这些经历和回忆。正因为这些都变成了回忆，我就更加羡慕现在还在读书的人，希望你们珍惜当下，享受读书的生活。</p>
<p>以上。</p>
<hr>
<blockquote>
<p>慌慌张张 匆匆忙忙<br>为何生活总是这样<br>难道说我的理想<br>就是这样度过一生的时光<br>不卑不亢 不慌不忙<br>也许生活应该这样<br>难道说六十岁以后<br>再去寻找我想要的自由<br>一年一年飞逝而去   </p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发之内存管理（2）——After ARC]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/07/31/ios-memory-management-arc/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一定要记住，<a href="http://blog.vars.me/blog/2014/07/30/ioskai-fa-zhi-nei-cun-guan-li-1-before-arc/" target="_blank" rel="external">上文</a>所提到的“引用计数式内存管理”的本质部分在ARC中并没有相应的改变。ARC只是在RC的前面加了一个A，即自动帮我们处理“引用计数”的相关部分。</p>
<a id="more"></a>
<h3 id="所有权修饰符"><a href="#所有权修饰符" class="headerlink" title="所有权修饰符"></a>所有权修饰符</h3><p>当ARC有效时，id类型和OC的对象类型在声明变量时必须加上所有权修饰符，共有四种：</p>
<pre><code>__strong
__weak
__unsafe_unretained
__autoreleasing
</code></pre><h4 id="strong"><a href="#strong" class="headerlink" title="__strong"></a><code>__strong</code></h4><p>这是id类型和对象类型<strong>默认</strong>的所有权修饰符。也就是说，<strong>ARC有效时</strong>，下面的代码，实际上是被附加了所有权修饰符。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">id obj = [[NSObject alloc] init];</div><div class="line">// 上面一行代码与下面这行相同</div><div class="line">id __strong obj = [[NSObject alloc] init];</div></pre></td></tr></table></figure>
<p>附有<code>__strong</code>修饰符的变量obj在超出其变量作用域时，即在该变量应该被废弃时，会释放其被赋予的对象。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    id __strong obj = [[NSObject alloc] init]; // 强引用，自己持有该对象</div><div class="line">&#125;</div><div class="line">// 到此为止，超出了obj的作用域，强引用失效，obj自动释放持有的对象，而对象的所有者不存在，因此废弃该对象</div><div class="line">// 可见，默认的__strong与Java类似</div></pre></td></tr></table></figure>
<p>上面的代码等价与在<strong>ARC无效</strong>时的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    id obj = [[NSObject alloc] init];</div><div class="line">    [obj release];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到，ARC我们不用手动调用retain和release，非常方便，如果你之前写过Java，就更觉得这才是本来应该有的方式嘛！在ARC有效时，取得非自己生成并持有的对象，在超出变量作用域时，也会自动释放变量所持有的对象（这仅仅会导致对象的引用计数减1，但是这不等于一定会废弃该对象，因为对象可能还被其他变量所引用）。</p>
<p>但是，Java的内存管理跟OC还是有很大不同的，具体的可以看看知乎上的<a href="http://t.cn/RPIXYa2" target="_blank" rel="external">这篇回答</a>。</p>
<h4 id="weak"><a href="#weak" class="headerlink" title="__weak"></a><code>__weak</code></h4><p>看起来通过<code>__strong</code>可以完美的解决内存管理和回收的问题，但是这里面有一个重大的问题——<strong>循环引用</strong>！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">// 定义Test类</div><div class="line">@interface Test: NSObject</div><div class="line">&#123;</div><div class="line">    id __strong obj_;</div><div class="line">&#125;</div><div class="line">- (void)setObject:(id __strong)obj;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation Test</div><div class="line">- (id)init</div><div class="line">&#123;</div><div class="line">    self = [super init];</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">- (void)setObject:(id __strong)obj</div><div class="line">&#123;</div><div class="line">    obj_ = obj;</div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">// 以下为循环引用</div><div class="line"></div><div class="line">&#123;</div><div class="line">    // 对象A</div><div class="line">    // test0持有对象A的强引用</div><div class="line">    id test0 = [[Test alloc] init];</div><div class="line">    // 对象B</div><div class="line">    // test1持有对象B的强引用</div><div class="line">    id test1 = [[Test alloc] init];</div><div class="line"></div><div class="line">    // 对象A的obj_成员持有对象B的强引用</div><div class="line">    // 此时，持有对象B强引用的变量为test1和对象A的obj_变量</div><div class="line">    [test0 setObject:test1];</div><div class="line">    // 同上分析</div><div class="line">    [test1 setObject:test0];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 到这为止超出了test0和test1变量的作用域，他们的强引用失效。分别释放各自持有的Test对象</div><div class="line">// 但是，对象A被对象B的obj_持有（强引用），对象B被对象A的obj_持有（强引用）</div><div class="line">// 发生了内存泄露！</div></pre></td></tr></table></figure>
<p>不仅上面的情况，在对象自己持有其自身时，也会发生循环引用导致内存泄露。</p>
<p>那么怎么避免循环引用呢，使用<code>__weak</code>就可以做到了！</p>
<p><code>__weak</code>修饰符与<code>__strong</code>相反，提供弱引用。弱引用不持有对象的实例，不会导致对象的引用计数加1。<code>__weak</code>修饰符还有一个优点就是如果一个变量持有对象的弱引用，当该对象被废弃时，变量将自动失效并且被赋值成nil，与Java的WeakReference很像，因此，<code>__weak</code>修饰符的变量在使用时应当判断是否为nil。</p>
<p>这样，使用<code>__weak</code>修饰符就可以不会导致对象的引用计数加1，正确的使用可以避免出现引用环，从而避免循环引用。</p>
<h4 id="unsafe-unretained"><a href="#unsafe-unretained" class="headerlink" title="__unsafe_unretained"></a><code>__unsafe_unretained</code></h4><p>遗憾的是，<code>__weak</code>修饰符只能用于iOS5以上及OS X Lion以上版本的程序，以下的APP不得不使用<code>__unsafe_unretained</code>。正如其名，该修饰符是不安全的修饰符。尽管使用ARC式内存管理是编译器的工作，但附有该修饰符的变量不属于编译器的内存管理对象，这点要注意。</p>
<p>附有<code>__unsafe_unretained</code>修饰符的变量同附有<code>__weak</code>修饰符的变量一样，也是不持有对象的，但是唯一的区别是，当对象被废弃时，变量不会被置成nil，可能会造成“野指针”！</p>
<h4 id="autoreleasing"><a href="#autoreleasing" class="headerlink" title="__autoreleasing"></a><code>__autoreleasing</code></h4><p>ARC有效时，显式地附加<code>__autoreleasing</code>修饰符比较罕见。这块基本上编译器已经帮你弄好了，你不需要怎么关心，对于新手来说，把上面的理解应该就够了。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>有一个很好的比喻来帮助理解这些修饰符，对象就是气球，<code>__strong</code>指针像线，<code>__weak</code>指针像看着气球的眼睛（气球跑了我是知道的，我就不去看气球了），<code>__unsafe_retained</code>指针像一道射向气球的激光（即使气球跑了也不知道，激光依然照向那个位置），<code>__autoreleasing</code>像挡着气球的屋顶（可以挡住多个气球）。</p>
<p>如果我有什么地方理解有错误，恳请指正，因为我是绝对的新手。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发之内存管理（1）——Before ARC]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/07/30/ios-memory-management-mrc/</url>
      <content type="html"><![CDATA[<h3 id="Automatic-Reference-Counting"><a href="#Automatic-Reference-Counting" class="headerlink" title="Automatic Reference Counting"></a>Automatic Reference Counting</h3><p>提到Objective-C中的内存管理，就不得不提到ARC（自动引用计数）。使用了ARC和不使用ARC，OC内存管理方式没有变，都是基于引用计数，但是程序员在编写代码上大有不同。</p>
<a id="more"></a>
<h3 id="首先要明确的"><a href="#首先要明确的" class="headerlink" title="首先要明确的"></a>首先要明确的</h3><p>内存管理的目的，简而言之，就是确保对象在分配了内存并初始化后，程序中要用到该对象时候，对象还在，程序不再使用该对象时，该对象占用的内存能及时释放，不会造成内存泄露。</p>
<p>在引用计数式内存管理中，还要明确以下几点（说原则不是原则，读了之后你就明白了）：</p>
<pre><code>* 自己生成的对象，自己所持有
* 非自己生成的对象，自己也可以持有
* 自己持有的对象，不再需要时释放
* 非自己持有的对象，不能释放
</code></pre><p>持有，比较难理解，意思是有一个强引用指向了对象，<strong>持有了对象 &lt;=&gt; 导致对象的引用计数加1</strong>。把对象比喻成氢气球，持有就是用一根线拴住了气球，你拿着气球线。</p>
<h3 id="Before-ARC"><a href="#Before-ARC" class="headerlink" title="Before ARC"></a>Before ARC</h3><p>在ARC之前，程序员需要手动管理内存，对对象的持有和释放主要是通过retain和release方法来完成的。</p>
<p>虽然新版本的SDK默认使用了ARC，但是正如郭总说的，真是不能同意更多。</p>
<blockquote>
<p>选择SDK要注意的一点就是，在iOS 4.0以后，引入了Auto Reference Counting（ARC）这一技术，个人感觉使用ARC虽然方便了内存管理，但是对于新手来说缺少了手动管理内存的历练，这里欠下的债，将来一定要还的。</p>
</blockquote>
<h4 id="自己生成的对象，自己所持有"><a href="#自己生成的对象，自己所持有" class="headerlink" title="自己生成的对象，自己所持有"></a>自己生成的对象，自己所持有</h4><p>下面的代码，意味着创建了一个NSObject的对象，并让id类型的变量obj持有了该对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id obj = [[NSObject alloc] init];</div></pre></td></tr></table></figure>
<p>此外，如果你的方法使用以下名称开头（驼峰式开头，例如名为allocate的方法就不会有相同的效果），意为着调用这些方法达到的效果是一致的，都是生成了一个对象，并返回一个指向该对象并持有该对象的指针。</p>
<pre><code>alloc
new
copy
mutableCopy
</code></pre><h4 id="非自己生成的对象，自己也可以持有"><a href="#非自己生成的对象，自己也可以持有" class="headerlink" title="非自己生成的对象，自己也可以持有"></a>非自己生成的对象，自己也可以持有</h4><p>不是自己把对象造出来的，但是也可以持有这个对象。</p>
<p>如下面的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id obj = [NSMutableArray array];</div></pre></td></tr></table></figure>
<p>到此为止，上面的代码并没有创建一个NSMutableArray，仅仅是取得了对象的存在（这是通过autorelease实现的），也即仅仅获得了对象的地址，obj没有持有对象，也即对象的引用计数并未因这行代码而加1。</p>
<p>但是，当你给obj发送retain的消息后，obj就持有了对象，对象的引用计数加1了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[obj retain];</div></pre></td></tr></table></figure>
<h4 id="自己持有的对象，不再需要时释放-非自己持有的对象，不能释放"><a href="#自己持有的对象，不再需要时释放-非自己持有的对象，不能释放" class="headerlink" title="自己持有的对象，不再需要时释放 | 非自己持有的对象，不能释放"></a>自己持有的对象，不再需要时释放 | 非自己持有的对象，不能释放</h4><p>自己持有的对象，一旦不再需要，持有者有义务释放对象。释放对象使用的是release方法。记住一定得是持有了对象才能释放，你根本就没牵住气球怎么释放啊。</p>
<p>看下面的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">id obj = [[NSObject alloc] init];</div><div class="line">[obj release];</div></pre></td></tr></table></figure>
<p>我们首先生成了一个对象，并让obj持有了对象，接着我们调用release方法释放了对象。在release方法内部会判断对象的引用计数，如果为0了就调用对象的dealloc方法废弃对象。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul>
<li>调用alloc或者retain方法后，引用计数值加1</li>
<li>调用release后，引用计数值减1</li>
<li>引用计数值为0时，调用dealloc方法废弃对象</li>
</ul>
<p>记住，这些都是在没有ARC，程序员进行手动内存管理时的一些东西。</p>
<h3 id="After-ARC"><a href="#After-ARC" class="headerlink" title="After ARC"></a>After ARC</h3><p>自从有了ARC，一切都不一样了。具体请看<a href="http://blog.vars.me/blog/2014/07/31/ioskai-fa-zhi-nei-cun-guan-li-2-after-arc/" target="_blank" rel="external">下篇文章</a>。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>还看了其他的东西，如autorelease和autoreleasepool等，以及引用计数具体的实现（直接将引用计数保存在对象里和使用散列表等），说太多不容易被接受，再加上自己的理解也不是很透彻，就不叙述了。</p>
<p>此外推荐一些比较有用的OC和iOS的网站：</p>
<ul>
<li><a href="http://www.raywenderlich.com/" target="_blank" rel="external">raywenderlich</a></li>
<li><a href="http://www.objc.io/" target="_blank" rel="external">objc</a> | <a href="http://objccn.io/" target="_blank" rel="external">objc中文翻译</a></li>
</ul>
<p>本文参考文献：</p>
<ul>
<li><a href="http://book.douban.com/subject/24720270/" target="_blank" rel="external">《Objective-C高级编程》</a></li>
</ul>
<p>最后送一句话，与君共勉。</p>
<blockquote>
<p>不要因为走得太远，就忘了自己为什么出发。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS入门——View（2）]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/07/24/ios-view-introduction-2/</url>
      <content type="html"><![CDATA[<h3 id="view的重绘"><a href="#view的重绘" class="headerlink" title="view的重绘"></a>view的重绘</h3><p>当一个UIView的实例收到<code>setNeedsDisplay:</code>，便会重绘它所维护的图像。当它们的内容发生变化时，UIView的子类会给自己发<code>setNeedsDisplay:</code>消息。</p>
<a id="more"></a>
<p>要注意的是，view的重绘不是立即完成的，而是被添加到一个装有需要重绘的view的list中。每个iOS APP都有一个run loop，这个无线循环的的作用是监听用户的输入，然后找到处理这个事件的handlers，handlers可能还会调用其他的方法来处理事件，当所有的方法结束后，控制权转会run loop，这时，view才回被重绘。</p>
<p>控制权转回run loop时，在run loop中会检查有哪些view需要被重绘，然后run loop会准备好必要的drawing contexts，向所有收到<code>setNeedsDisplay:</code>消息的view发送<code>drawRect:</code>消息。</p>
<p>只有发生变化的view才回被重绘，其他的view的image会直接显示到屏幕上。</p>
<h3 id="UIResponder"><a href="#UIResponder" class="headerlink" title="UIResponder"></a><code>UIResponder</code></h3><p><code>UIResponder</code>这个类很重要。它是<code>UIView</code>、<code>UIViewController</code>和<code>UIApplication</code>的基类（顺便提一下，<code>UIWindow</code>是<code>UIView</code>的子类）。</p>
<p>responser，顾名思义就是可以对事件做出响应以及能够处理事件的对象。在iOS中有响应链的概念，这在Android开发中也有类似的事件分发和传递的概念。具体可以查看SO的这个问题：<a href="http://stackoverflow.com/questions/6005033/why-uiviewcontroller-is-a-subclass-of-uiresponder" target="_blank" rel="external">Why UIViewController is a subclass of UIResponder?</a>。有关响应链，iOS<a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html" target="_blank" rel="external">官方文档</a>说的再好不过了（可以等到看完下篇介绍ViewController的文章后再回来看看这个）。</p>
<p>想让一个responser成为window的first responser（第一个响应事件的对象），向它发送<code>becomeFirstResponder:</code>的消息即可，前提是responser的<code>canBecomeFirstResponder:</code>返回YES。要注意的是，如果想要给一个view发送这个消息时，只有view在view hierarchy中时才可以这样做。判断一个view是不是在view hierarchy中只需看view的window属性是不是指向一个UIWindow对象，如果没有指向（为nil），则view不在view hierarchy中。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS入门——View（1）]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/07/23/ios-view-introduction-1/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="http://book.douban.com/subject/25782902/" target="_blank" rel="external">《反脆弱》</a>。</p>
<a id="more"></a>
<h3 id="view-in-iOS"><a href="#view-in-iOS" class="headerlink" title="view in iOS"></a>view in iOS</h3><p>一个UIButton、UILabel都是一个view，view这个概念与Android中的view一样。view，顾名思义，跟“看”相关，就是你能在屏幕上看到的一个视觉单元，在iOS开发中被抽象成了View的概念。</p>
<p>具体到代码：</p>
<ul>
<li>一个view是UIView或UIView子类的实例</li>
<li>view知道如何在application的window上绘制自己，application的window是UIWindow的实例</li>
<li>view存在在某个层级结构（hierarchy）中，这个层级结构的根是application的window</li>
<li>view可以处理事件，比如触摸事件等</li>
</ul>
<p>各种view组成了一个APP的UI。每个view都维护了一个image用来真正呈现自己，比如UIButton的image就是一个圆角矩形（在iOS 6），一个UILabel的image仅仅是一段文本。当view的属性变化时，比如UILabel的文字，view维护的image会重绘以将变化展现在屏幕上。</p>
<h3 id="UIWindow"><a href="#UIWindow" class="headerlink" title="UIWindow"></a>UIWindow</h3><p>UIWindow是UIView的子类。每个application有且仅有一个UIWindow的实例，用作application所有view的容器。</p>
<p>在Xcode中新建一个iOS项目，在AppDelegate.m中的<code>didFinishLaunchingWithOptions:</code>方法中，创建了一个UIWindow的实例，并给他发送了<code>makeKeyAndVisible</code>的消息，让它在屏幕上显示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class="line">&#123;</div><div class="line">      self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</div><div class="line">      // Override point for customization after application launch.</div><div class="line"></div><div class="line">      self.window.backgroundColor = [UIColor whiteColor];</div><div class="line">      [self.window makeKeyAndVisible];</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当一个view被添加到window中，我们就说该view是window的subview。window的subview当然也可以有自己的subview，这样一个view的hierarchy就形成了。当且仅当一个view被加入到这个hierarchy中，view才能在屏幕上出现，这包括直接作为window的subview或作为其它view的subview。</p>
<p>创建UI的过程实际上就是就是创建每个view的image，并将view加入到view hierarchy中。像一些UIButton、MKMapView等已经知道自己维护的image是什么样的，可能我们需要创建一些Apple并不给你提供支持的view，这就需要我们自定义view对象，并写代码创建view的image。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>我们在程序启动后，创建一个view，添加到view hierarchy中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class="line">&#123;</div><div class="line">   self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</div><div class="line">   // Override point for customization after application launch.</div><div class="line"></div><div class="line">   // CGRect是一个结构体，包含一个矩形的位置和尺寸信息</div><div class="line">   CGRect viewFrame = CGRectMake(160, 240, 100, 150);</div><div class="line"></div><div class="line">   // 用这个矩形(被称为view的frame)初始化一个UIView</div><div class="line">   UIView *view = [[UIView alloc] initWithFrame:viewFrame];</div><div class="line">   [view setBackgroundColor:[UIColor orangeColor]];</div><div class="line"></div><div class="line">   // 把view添加到view的层级结构中，作为window的subview</div><div class="line">   [[self window] addSubview:view];</div><div class="line"></div><div class="line">   // =。=</div><div class="line"></div><div class="line">   self.window.backgroundColor = [UIColor whiteColor];</div><div class="line">   [self.window makeKeyAndVisible];</div><div class="line">   return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个view都有一个实例都有一个被称为frame的矩形，frame定义了view的尺寸和相对其父view的位置。frame用CGRect来表示，CGRect是一个C结构体，包括origin和size两个成员，它们也都是结构体。origin是CGPoint类型的结构体，包括两个float类型的成员：x和y。size是CGSize类型的结构体，也包含两个float类型的成员：width和height。（注意：C结构体不是OC的对象，不能发消息给它，也不声明成指针类型指向它）。</p>
<p>因此，view总是一个矩形。上述代码的效果图见下图。</p>
<p><img src="http://vars.qiniudn.com/iOS_view_2.png?imageView2/2/w/350" alt=""></p>
<p>为了理解CGRect中各个参数的含义，下面我们创建另一个View，将其作为刚才创建的View的subview。</p>
<p>在上面代码中的<code>// =。=</code>处添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CGRect anotherFrame = CGRectMake(20, 30, 50, 50);</div><div class="line"></div><div class="line">UIView *anotherView = [[UIView alloc] initWithFrame:anotherFrame];</div><div class="line">[anotherView setBackgroundColor:[UIColor blueColor]];</div><div class="line"></div><div class="line">[view addSubview:anotherView];</div></pre></td></tr></table></figure>
<p>Run，可见效果图。</p>
<p><img src="http://vars.qiniudn.com/iOS_view_3.png =350x" alt=""></p>
<p>如果将这个View直接作为window的subview，即改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[self window] addSubview:anotherView];</div></pre></td></tr></table></figure>
<p>可见效果图。</p>
<p><img src="http://vars.qiniudn.com/iOS_view_1.png?imageView2/2/w/350" alt=""></p>
<h3 id="drawRect"><a href="#drawRect" class="headerlink" title="drawRect:"></a><code>drawRect:</code></h3><p>上面说到，各种view组成了iOS APP的UI。因此，一个view肯定不能只是带颜色的矩形。让view变得丰富的方法就是<code>drawRect:</code>。这个方法默认什么都不做，我们可以在UIView的子类中覆盖这个方法来做一些自定义的绘制。</p>
<p>覆盖drawRect第一件事就是获取一个指向drawing context的指针。drawing context维护了当前绘制的状态信息（例如当前画笔的颜色、画笔的粗细等等），此外，drawing context还执行了绘制操作。一个绘制操作用当前的绘制状态信息绘制图形。在<code>drawRect:</code>的最后，由drawing context产生的图像就是view所维护的image了。</p>
<p>在view收到<code>drawRect:</code>的消息前，一个drawing context自动被创建，并设置为当前的context。</p>
<p>我们新建一个UIView的子类，并覆盖它的draw方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (void)drawRect:(CGRect)rect</div><div class="line">&#123;</div><div class="line">   CGContextRef ctx = UIGraphicsGetCurrentContext();</div><div class="line">   CGRect bounds = [self bounds];</div><div class="line"></div><div class="line">   // 画一个圆，计算圆的圆心半径等参数。</div><div class="line">   CGPoint center;</div><div class="line">   center.x = bounds.origin.x + bounds.size.width / 2.0;</div><div class="line">   center.y = bounds.origin.y + bounds.size.width / 2.0;</div><div class="line"></div><div class="line">   float maxRadius = hypot(bounds.size.width, bounds.size.height) / 4.0;</div><div class="line"></div><div class="line">   // 对当前的drawing context进行设置</div><div class="line">   CGContextSetLineWidth(ctx, 10);</div><div class="line">   CGContextSetRGBStrokeColor(ctx, 0.6, 0.6, 0.6, 1.0);</div><div class="line">   CGContextAddArc(ctx, center.x, center.y, maxRadius, 0.0, M_PI * 2.0, YES);</div><div class="line"></div><div class="line">   // 画出当前的线条</div><div class="line">   CGContextStrokePath(ctx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，使用新建的UIView的子类替换上述例子中的UIView，便可得到如下的效果。</p>
<p><img src="http://vars.qiniudn.com/iOS_view_4.png?imageView2/2/w/350" alt=""></p>
<p>要注意的是，不管view的<code>drawRect:</code> 方法做了什么，view的背景色都是会被绘制的。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>模拟器截图使用软件是：<a href="http://www.curioustimes.de/iphonesimulatorcropper/" target="_blank" rel="external">iOS-Simulator Cropper</a>。</p>
<p>参考文献：<a href="http://www.amazon.cn/iOS-Programming-The-Big-Nerd-Ranch-Guide-Conway-Joe/dp/0321821521/ref=sr_1_4?ie=UTF8&amp;qid=1406105859&amp;sr=8-4&amp;keywords=ios%2Bprogramming%2Bthe%2Bbig%2Bnerd%2Branch%2Bguide" target="_blank" rel="external">《iOS Programming: The Big Nerd Ranch Guide》</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Apache的mod_proxy模块设置其反向代理]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/05/16/apache-reverse-proxy/</url>
      <content type="html"><![CDATA[<h3 id="反向代理简介"><a href="#反向代理简介" class="headerlink" title="反向代理简介"></a>反向代理简介</h3><p>本文介绍一下使用mod_proxy模块配置Apache2作为反向代理服务器。</p>
<p>首先什么是反向代理呢？我们来看两个例子。<a id="more"></a></p>
<p>晚上在实验室，我很饿，但是由于某种原因不能亲自去超市买吃的，我就对yuri同学说：“yuri，我要一袋小浣熊干脆面，你去帮我买一袋带回来！”yuri听罢，跑去超市买了一袋干脆面给了我，这样，我愉快的吃上了干脆面。在这个过程中，我让yuri代理我去做了一些事情，把超市想象成Server，把我想象成Client，那么yuri起到的就是一个正向代理的作用，正向代理，代理的是Client。</p>
<p>再看另一个例子。超市授权yuri作为代理负责接客。顾客买东西不直接去超市买，直接去yuri那里：“yuri，我要一袋干脆面！”，这时yuri就会去超市取出干脆面给顾客。对于顾客来说，他不知道自己买的东西是在超市里，只知道yuri给了我想要的东西。仍然把顾客想象成Client，把超市想象成Server，这样，yuri起到的是一个反向代理的作用，反向代理，代理的是Server。</p>
<p>这里有一篇非常好的<a href="http://z00w00.blog.51cto.com/515114/1031287" target="_blank" rel="external">文章</a>介绍两种代理的作用以及应用场景。</p>
<h3 id="一种应用场景"><a href="#一种应用场景" class="headerlink" title="一种应用场景"></a>一种应用场景</h3><p>反向代理一种典型应用场景是我买了一个VPS，假设其IP是X.X.X.X，注册了一个域名example.com，想跑一些网站。有一个用node写的网站，默认端口是3000。</p>
<p>如果我们想做出这样的映射：</p>
<pre><code>example.com         -&gt;    X.X.X.X （即默认的80端口）
foo.example.com     -&gt;    X.X.X.X:3000 （即node的站点）
</code></pre><p>当然，在域名提供商那里做一些配置，实现第一个映射不难，然后我们当然可以通过example.com:3000访问到我的node站。</p>
<p>但是这样一点都不酷，当你向妹子吹嘘：“呐，我写了个很屌的网站，example.com，加上3000端口号去访问下”。好吧，这时会想到把该node站的端口改成HTTP默认的80，以便可以直接通过example.com访问到，但是问题又来了，已经有一个站点在80端口上了，这就麻烦了。</p>
<p>这时候，用Apache的反向代理可以非常优雅地解决这个问题。</p>
<h3 id="mod-proxy和Apache"><a href="#mod-proxy和Apache" class="headerlink" title="mod_proxy和Apache"></a>mod_proxy和Apache</h3><p><a href="http://httpd.apache.org/docs/2.2/mod/mod_proxy.html" target="_blank" rel="external">mod_proxy</a>实现了代理和网关的功能。Apache的代理功能被分到几个不同的模块中：mod_proxy_http，mod_proxy_ftp，mod_proxy_ajp，mod_proxy_balancer，mod_proxy_connect。根据需求需要加载mod_proxy和不同的模块。</p>
<h4 id="安装Apache2"><a href="#安装Apache2" class="headerlink" title="安装Apache2"></a>安装Apache2</h4><p>首先确认Apache2已经安装在了机器上。在Ubuntu Server下去<code>/etc/apache2</code>下看一下，看看有没有<code>apache2.conf</code>，以及<code>sites-available</code>等目录，如果没有，使用：</p>
<pre><code>$ sudo apt-get install apache2
</code></pre><p>即可安装。安装完成后，在浏览器访问机器的默认的80端口就会看到It works的提示了。</p>
<p>在<code>/etc/inid.d/apache2</code>中有apache的控制脚本，使用这些脚本控制Apache。</p>
<pre><code>* Usage: /etc/init.d/apache2 {start|stop|graceful-stop|restart|reload|force-reload|start-htcacheclean|stop-htcacheclean|status}
</code></pre><h4 id="安装并加载mod-proxy"><a href="#安装并加载mod-proxy" class="headerlink" title="安装并加载mod_proxy"></a>安装并加载mod_proxy</h4><p>接着，使用以下命令看一下Apache目前已经加载了哪些模块：</p>
<pre><code>$ apache2ctl -M
</code></pre><p>如果没有proxy相关的模块，那么就需要安装模块：</p>
<pre><code>$ sudo apt-get install libapache2-mod-proxy-html
</code></pre><p>还要安装它的依赖：</p>
<pre><code>$ sudo apt-get install libxml2-dev
</code></pre><p>接着enable proxy模块：</p>
<pre><code>$ a2enmod proxy proxy_http
</code></pre><p>至此为止，我们做好了准备工作，现在再次查看已加载的模块发现已经有proxy相关的模块了。</p>
<h4 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h4><p>打开Apache2的默认的配置文件<code>/etc/apache2/sites-enabled/000-default</code>，增加一个<code>VirtualHost *:80</code>的配置：</p>
<pre><code>&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@localhost
    ServerName foo.example.com

    ProxyRequests off

    &lt;Proxy *&gt;
        Order deny,allow
        allow from all
    &lt;/Proxy&gt;

    &lt;Location /&gt;
        ProxyPass http://localhost:3000/
        ProxyPassReverse http://localhost:3000/
    &lt;/Location&gt;
&lt;/VirtualHost&gt;
</code></pre><p>这样，就把来自foo.example.com请求转发给了localhost:3000，而80端口仍然可用。</p>
<p>同时将旧的<code>VirtualHost *:80</code>中<code>ServerName</code>改成<code>example.com</code>，完成的配置文件如下：</p>
<pre><code>&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@localhost
    ServerName example.com

    DocumentRoot /var/www
    &lt;Directory /&gt;
        Options FollowSymLinks
        AllowOverride None
    &lt;/Directory&gt;
    &lt;Directory /var/www/&gt;
        Options Indexes FollowSymLinks MultiViews
        AllowOverride None
        Order allow,deny
        allow from all
    &lt;/Directory&gt;

    ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
    &lt;Directory &quot;/usr/lib/cgi-bin&quot;&gt;
        AllowOverride None
        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        Order allow,deny
        Allow from all
    &lt;/Directory&gt;

    ErrorLog ${APACHE_LOG_DIR}/error.log

    # Possible values include: debug, info, notice, warn, error, crit,
    # alert, emerg.
    LogLevel warn

    CustomLog ${APACHE_LOG_DIR}/access.log combined

    Alias /doc/ &quot;/usr/share/doc/&quot;
    &lt;Directory &quot;/usr/share/doc/&quot;&gt;
        Options Indexes MultiViews FollowSymLinks
        AllowOverride None
        Order deny,allow
        Deny from all
        Allow from 127.0.0.0/255.0.0.0 ::1/128
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@localhost
    ServerName foo.example.com

    ProxyRequests off

    &lt;Proxy *&gt;
        Order deny,allow
        allow from all
    &lt;/Proxy&gt;

    &lt;Location /&gt;
        ProxyPass http://localhost:3000/
        ProxyPassReverse http://localhost:3000/
    &lt;/Location&gt;
&lt;/VirtualHost&gt;
</code></pre><p>之后，重启一下Apache。对了，别忘了去域名提供商那里设置一下！</p>
<pre><code>---------------------------------------------------------
HOST NAME | IP ADDRESS/URL                | RECORD TYPE
---------------------------------------------------------
@          | http://www.example.com        | URL Redirect
---------------------------------------------------------
www          | X.X.X.X                        | A(Address)
---------------------------------------------------------
foo          | X.X.X.X                        | A(Address)
---------------------------------------------------------
</code></pre><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>以上就是我是配置Apache2将不同域名映射到同一IP的不同端口的全过程，如有错误，恳请指正。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NoSQL & MongoDB（3）——Keynote]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/03/18/nosql-mongodb-3/</url>
      <content type="html"><![CDATA[<p>本次讲座的Keynote，在Sperker Deck上。 <a id="more"></a></p>
<script async class="speakerdeck-embed" data-id="6908b030da9901310a6036f9d2e151d0" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NoSQL & MongoDB（2）——说说MongoDB]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/03/18/nosql-mongodb-2/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>MongoDB是一个典型的NoSQL数据库，“mongo”来自单词“humongous”，是由之前的10gen公司开发的（现在这个公司已经改名为MongoDB Inc.）。在2007年的时候，这个公司想开发一个Paas，在开发的过程中MongoDB诞生，后来MongoDB作为一个开源产品单独发布，采用AGPL协议。 <a id="more"></a></p>
<h3 id="MongoDB的特性"><a href="#MongoDB的特性" class="headerlink" title="MongoDB的特性"></a>MongoDB的特性</h3><p>MongoDB有很多特性，我只选几个说说，更多的请查阅<a href="http://www.mongodb.com/learn/mongodb-architecture" target="_blank" rel="external">官方文档</a>。</p>
<h4 id="面向文档的存储"><a href="#面向文档的存储" class="headerlink" title="面向文档的存储"></a>面向文档的存储</h4><p>MongoDB将数据保存成被称为<em>文档</em>（document）的二进制表示中，这种表示形式被称为BSON（Binary JSON）。</p>
<p>BSON是一种类JSON的二进制表示形式，BSON在给文档添加了一些额外的字段，比如文档的长度等，非常便于遍历；此外，BSON编码和解码的速度也很快，比如整数类型在BSON中就是以32（或64）位的整数存储，因此在编码和解码不用在字符串和整数类型之间换来换去。当然，对小整数来说BSON占用的空间会比JSON略大一点，但解析速度会快很多。</p>
<p>有类似结构的文档被保存在一个<em>集合</em>（collection）中。集合相当于关系型数据库的表，文档相当于关系型数据库的记录，文档里面的域相当于关系型数据库一条记录中的不同的列。</p>
<h4 id="数据存储模式自由"><a href="#数据存储模式自由" class="headerlink" title="数据存储模式自由"></a>数据存储模式自由</h4><p>MongoDB的文档是自描述的，我们没有必要向关系型数据库建表那样实现定义好表的结构，甚至同一个集合中的文档结构都可以不同。我们随时可以增删字段。</p>
<h4 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h4><p>MongoDB大量使用内存来加速数据库的操作。在MongoDB中，所有的数据都是通过MMAP读取和操作（<a href="http://blog.nosqlfan.com/html/3515.html" target="_blank" rel="external">这里</a>有一篇非常好的文章来讲MongoDB数据文件内部的结构）。不被访问的数据不加载到内存中，当然这些都是操作系统帮你完成的，MongoDB管理内存的代码非常精炼，原因就是将大部分工作推给了操作系统。正因为此，对于大部分应用来讲，不需要为MongoDB设置额外的缓存层。</p>
<h4 id="扩展方便"><a href="#扩展方便" class="headerlink" title="扩展方便"></a>扩展方便</h4><p>MongoDB非常容易使用，水平扩展非常方便。当你发现MongoDB的服务器经常出现内存缺页错误时，说明MongoDB中应用操作的数据集太大，MMAP不能将其合适地映射进内存，可以考虑将数据进行Sharding。MongoDB的一大亮点是支持自动分片，集群根据自动切分数据，做负载均衡。</p>
<p>当然，MongoDB还有很多其他的特性，比如GridFS，地理空间索引，Replica Set等等，详细请看官方的文档。不过看了文档也只是在理论上对MongoDB有一个认识，在实际应用时会遇上什么坑都是未知的。</p>
<p>Foursquare一直是MongoDB的忠实用户，但是也遇到过因MongoDB的Sharding负载不均导致的网站跪了11个小时。</p>
<h3 id="也谈MongoDB数据模型的设计"><a href="#也谈MongoDB数据模型的设计" class="headerlink" title="也谈MongoDB数据模型的设计"></a>也谈MongoDB数据模型的设计</h3><p>在MongoDB数据库存储模式的设计中，比较重要的一点就是如何表现各个实体之间的关系，在MongoDB中，有两种方式：</p>
<ol>
<li>references（Normalized）</li>
<li>embedded（Denormalized）</li>
</ol>
<h4 id="引用式文档设计"><a href="#引用式文档设计" class="headerlink" title="引用式文档设计"></a>引用式文档设计</h4><p><img src="http://vars.qiniudn.com/mongo-data-model-normalized.png" alt=""></p>
<p>引用式文档设计跟RDBMS的数据模型差不多，对数据库的模型进行范式化，这样做让实体时间的结构表现的更加清晰，能表现出数据模型内部之间复杂的关系。在对文档进行更新的时候，因为是以引用的方式存储，只需要更新一次被引用的文档即可，有利于数据库的一致性，但是从另一方面来看，如果引用的文档和被引用的文档需要同时更新，引用式文档设计还得做两次写操作呢（MongoDB的原子性写操作是在一个文档级别的）。此外，这种方式的设计可以适应更加灵活的查询。</p>
<p>但是这样设计的劣势也很明显，在查询的时候，不得不再去获得一次引用的文档，不论是一次查询驱动帮你将引用的文档替换成了实际的文档（如PyMongo）还是得在客户端做两次查询，都增加了开销。</p>
<h4 id="嵌入式文档设计"><a href="#嵌入式文档设计" class="headerlink" title="嵌入式文档设计"></a>嵌入式文档设计</h4><p><img src="http://vars.qiniudn.com/mongo-data-model-denormalized.png" alt=""></p>
<p>嵌入式的文档设计相当于提前做了join的操作，比较设计实体模型中的包含关系。这样设计优势显而易见吧，读取操作有更好的性能，而且这样的设计能较好地表示层级关系（最深支持100层的嵌套）。在更新文档的时候，可以在一个原子的写操作内完成，但是可能会出现不一致性。比如两个文档都嵌入了同一个文档，在更新完一个的时候，应用突然崩了，另一个文档还没来得及更新。</p>
<p>需要注意的一点是，由于MongoDB的Schema非常灵活，我们完全可以在创建完文档后不断给文档添加嵌入新的文档，这就导致了文档的尺寸在创建之后不断增加，最大可以增大到BSON文档的最大的size——16MB，虽然MongoDB会为文档留出一定的<a href="http://docs.mongodb.org/manual/core/record-padding/" target="_blank" rel="external">padding</a>，但是尺寸太大的话，文档会被重新安排位置，这样会影响写入的性能，也会造成碎片。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>MongoDB的Schema非常灵活，也正因为此，我们需要对应用场景进行更加透彻的分析，一切以应用为中心。</p>
<p>如《深入学习MongoDB》一书中所说的那样，不妨考虑一下下面的问题：</p>
<ol>
<li>估算一下读写比</li>
<li>一致性很重要吗？</li>
<li>要不要快速的读取？</li>
</ol>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="http://en.wikipedia.org/wiki/MongoDB" target="_blank" rel="external">MongoDB, wikipedia</a></li>
<li><a href="http://www.mongodb.com/learn/mongodb-architecture" target="_blank" rel="external">MongoDB Architecture</a></li>
<li><a href="http://book.douban.com/subject/6068947/" target="_blank" rel="external">《MongoDB权威指南》</a></li>
<li><a href="http://book.douban.com/subject/10439364/" target="_blank" rel="external">《深入学习MongoDB》</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NoSQL & MongoDB（1）——也谈NoSQL]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/03/17/nosql-mongodb-1/</url>
      <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>贵工大这破网我就不得不抱怨一句了，有位师兄形容这“网速慢的心都在滴血”，太恰当不过了！</p>
<p>本人这个NoSQL&amp;MongoDB的技术分享从上学期开始就开始准备了，但是上学期师弟们考试的考试，把妹的把妹，抢票的抢票，基本对科研没什么激情了，于是移到了这学期。写点东西捋一下思路，同时也做一下总结。</p>
<p>当然，我只能从理论上把我看到的、听到的做出一些总结，并没有丰富的实际应用经验，恳请大家对我理解出现偏差的地方做出指正。 <a id="more"></a></p>
<h3 id="No-SQL"><a href="#No-SQL" class="headerlink" title="No-SQL"></a>No-SQL</h3><h4 id="Carlo-Strozzi-和他的-“NoSQL”"><a href="#Carlo-Strozzi-和他的-“NoSQL”" class="headerlink" title="Carlo Strozzi 和他的 “NoSQL”"></a>Carlo Strozzi 和他的 “NoSQL”</h4><p>提起NoSQL这个概念，就不得不提起<a href="http://www.strozzi.it/users/carlo/vitae.html" target="_blank" rel="external">Carlo Strozzi</a>。据史料记载，早在1998年，Strozzi用NoSQL来命名他开发的轻量级开源的<strong>关系型</strong>数据库，这个关系型数据库没有通常的SQL（Structured Query Language）查询接口，它的给用户提供的接口是UNIX的shell，使用一系列的命令流，基于UNIX IO重定向的支持，在操作系统的管道之上，一个命令的结果可以传给另一个命令，来实现数据库的查询等操作。此外，Strozzi NoSQL的数据存储在操作系统的文件系统中的普通文件里，以ASCII码的形式存储，非常方便移植，而且可以非常方便的使用其他文本处理命令处理，例如sed等。</p>
<p>总结一下，这里的“NoSQL”数据库不过就是一系列Shell命令的集合，这些命令操作的是OS文件系统的普通文件。</p>
<p>因此，在这里，“NoSQL”意为——“没有结构化查询语言”。</p>
<p>Strozzi还特意强调了他的NoSQL和现在的NoSQL运动的不同，他形容现在的NoSQL运动：</p>
<blockquote>
<p>departs from the relational model altogether; it should therefore have been called more appropriately ‘NoREL’<br>完全背离了关系模型，叫它“No Relationship”更合适</p>
</blockquote>
<h4 id="A-meetup-San-Francisco"><a href="#A-meetup-San-Francisco" class="headerlink" title="A meetup @ San Francisco"></a>A meetup @ San Francisco</h4><p>到2009年，一位叫Johan Oskarsson人举办了一个技术聚会，是一个关于“开源，分布式，非关系型的数据库”的讨论和分享的会议。会上讨论了比较成熟的例子——Google的<a href="http://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf" target="_blank" rel="external">BigTable</a>和Amazon的<a href="http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf" target="_blank" rel="external">Dynamo</a>。</p>
<p>在这个会期间，时任Rackspace员工的Eric Evans提出“NoSQL”。他提出这个名字纯属一拍脑门就定的那种，在当时看来比较片面，因为Johan本来是想将会议的重心放在大数据以及分布式系统上，虽然有些的确是非关系型的系统，但是直接叫“NoSQL”实在有点“跑偏”。</p>
<p>Eric自己也说：</p>
<blockquote>
<p>My regret however isn’t about what the name says, it’s about what it doesn’t.<br>我感到抱歉的不是NoSQL表达出的什么意思，而是它没表达出的意思。</p>
</blockquote>
<p>到此，NoSQL可以理解为Non-Relationship，人们anti-RDBMS，对非关系型的数据库的认识逐渐加深。</p>
<h4 id="no-sql-east-Atlanta"><a href="#no-sql-east-Atlanta" class="headerlink" title="no:sql(east) @ Atlanta"></a>no:sql(east) @ Atlanta</h4><pre><code>SELECT fun, profit
FROM real_world
WHERE relation=false;
</code></pre><p>以上是本次会议的主题。可以看到，它是用SQL写的，而本次会议又是有关于NoSQL的会议。在会议上，大部分会议的出席者觉得将NoSQL理解为“Not Only SQL”更合适。他们认为，关系型数据库与非关系型数据库各有用武之地，不能完全否定、反对任何一个。NoSQL的存在恰恰是对大部分RDBMS技术实现上的限制做了弥补。</p>
<p>到现在，NoSQL的含义就比较和谐了，“Not Only SQL”。</p>
<h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>CAP理论是理论计算机科学中一个定理，在2000年由UC Berkeley的Eric Brewer教授提出猜想，2年后，MIT的两个小伙<a href="http://www.julianbrowne.com/article/viewer/brewers-cap-theorem" target="_blank" rel="external">证明</a>了它，使之成为一个定理。这个定理指出了：一个分布式系统<strong>不可能</strong>同时保证以下三点：</p>
<ul>
<li>Consistency（一致性）</li>
<li>Availability （可用性）</li>
<li>Partition tolerance （分区容忍性）</li>
</ul>
<h4 id="Consistency"><a href="#Consistency" class="headerlink" title="Consistency"></a>Consistency</h4><p>整个集群的数据都是一致的，因此我们不管读写集群中哪个节点都可以得到相同的数据。</p>
<h4 id="Availability"><a href="#Availability" class="headerlink" title="Availability"></a>Availability</h4><p>整个集群是可访问的，对一个请求来说，不管请求成功或失败，都有回应。</p>
<h4 id="Partition-tolerance"><a href="#Partition-tolerance" class="headerlink" title="Partition tolerance"></a>Partition tolerance</h4><p>当集群出现通信上的中断导致的任意信息的丢失时，集群是可以接受的，可以容忍的。</p>
<p>以上三者不可能同时获得。举个例子，一个分布式系统中的两个节点X和Y，同为主节点，现在假设网络出现故障，导致X和Y不能通信，他们之间不能互发信息了，不过我可以忍啊，丢点信息就丢点信息吧（满足P）！那么现在C和A我必须放弃一个，不信请看，这时Y点来了一个写请求，我可以怎么办？</p>
<p>A）放弃一致性，接受这个写请求，写到Y点，但是X和Y的数据不同步<br>B）放弃可用性，直接拒绝写请求，基本上整个集群也就不工作了</p>
<p>而既然是一个分布式的系统，必须能容忍分区，假设不能容忍，那么我这个分布式系统中每个点之间一点信息都不能丢，网络一点故障都不能有！这样的分布式系统是不存在的（只有单机系统可以满足这）。那么我们必须得在C和A之间做一个取舍。</p>
<h3 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h3><p>BASE这个缩写也是由Eric Brewer提出的，他自己也承认有点生搬硬凑的意思。</p>
<ul>
<li>Basically Available（基本可用）</li>
<li>Soft state（软状态）</li>
<li>Eventual consistency（最终一致性）</li>
</ul>
<p>BASE完全不同ACID。ACID比较被人熟知，数据库事务的四个特性原子性，事务内的操作要么全成功，要么全失败；一致性，事务执行前后数据库的完整性没有被破坏，从一个合法的状态到另一个合法的状态；隔离性，当多个事务并发访问数据库时，保证他们一个一个执行；持久性，事务完成后，该事务对数据库做出的更改是永久被保存的，即使数据库执行完事务后立刻就崩了。</p>
<p>BASE原则通常被用来描述NoSQL数据库。其中基本可用表示系统绝大部分是可用的，但是服务器可能会因为一些原因挂掉；软状态指的是整个系统的状态会随时变化，即使没有新的写操作，因为系统是最终一致性；最终一致性，弱一致性的特例，不保证任一时刻节点同一份数据都是相同的，但随着时间的迁移，不同节点的同一份数据朝同一趋势变化，最终一致，比如DNS系统就是典型的最终一致性。</p>
<h3 id="为什么我们需要NoSQL"><a href="#为什么我们需要NoSQL" class="headerlink" title="为什么我们需要NoSQL"></a>为什么我们需要NoSQL</h3><p>在有了理论基础之后，我们不禁思考，为什么我们需要NoSQL？</p>
<p>传统的数据库一般是比较注重CAP理论中的CA。由于传统数据库对事物的支持，导致其很难扩展。实际上开始的时候，业界的公司并没有开始就去反对SQL，反对关系型设计，而是随着业务的扩展与增加，他们发现传统的关系型数据库越来越不能满足他们的需求：空前的事务处理，对海量数据访问低延迟，以及在不可靠环境中服务的高可用性。开始这些公司也尝试了传统的解决方案：为硬件升级，当为硬件各种升级也满足不了需求时，人们就尝试将现有的数据库模式（Schema）简化，反范式化，不要那么多的外键引用，引进各种查询缓存，将服务器分成读写专用等等。</p>
<p>虽然这么多技术大大扩展了现有的数据库的功能，但是都没有解决最核心的问题，都治标不治本。</p>
<p>接着，IT界发生了一些戏剧性的变化。当大多数关系型数据库技术被设计的时候，硬件部署上主要的模型是需要高配置的服务器以及专用的存储区域网络（SAN）。关系型数据库的这种模型被牢牢地印在脑子里：<strong>一台</strong>单独的服务器负责管理整个存储系统的一致性状态，换句话说，数据库只管理本地的数据文件，在硬件允许的情况下尽可能多地提供并发的访问。当时的数据库不需要做冗余，因为单机已经能满足设计需求了，数据的可靠性也可以通过一个随时可以接替Master位置的可以处理查询请求的机器来保证。除了这种简单的失效备援的复制，当时有很少的技术可以选择，而且他们都是基于高一致性的中心化数据管理机制的观念。最后，这种关系型数据库再普遍不过的架构和设计终于不能满足水平扩展、低延迟、以及可用性的需求。</p>
<p>人们的需求渐渐清晰，完全可以开发一个新的东西来满足这些需求啊！接着这些公司就开发了一些机构内部使用的解决方案，这些方案抛弃了现有的数据库的一些特性，如Join、强一致性等等，范式也从各种表之间的制约变成了更像是简单的Key-Value的查询，在部署上也不需要各种昂贵的服务器了。于是这些公司就把现有的数据库放到一边，他们明白可以在新的解决方案上做的更好，这些机构内部的解决方案就对我们现在在市场上看到的很多NoSQL做了很大的启发，NoSQL就是这样逐渐发展起来。</p>
<h3 id="现在较为常见的NoSQL"><a href="#现在较为常见的NoSQL" class="headerlink" title="现在较为常见的NoSQL"></a>现在较为常见的NoSQL</h3><p>有一个网站列举了市面上较为常见的NoSQL数据库：<a href="http://nosql-databases.org/" target="_blank" rel="external">nosql-databases</a>。</p>
<p>下面有一张表更加直观：</p>
<p><img src="http://vars.qiniudn.com/nosql-db.png" alt=""></p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="http://yankaycom-wordpress.stor.sinaapp.com/NoSql_Database_Note.html?q=/wp-content/NoSql_Database_Note.html" target="_blank" rel="external">NoSQL数据库笔谈, 颜开的博客</a></li>
<li><a href="https://www.usenix.org/legacy/publications/login/2011-10/openpdfs/Burd.pdf" target="_blank" rel="external">NoSQL, Greg Burd</a></li>
<li><a href="http://en.wikipedia.org/wiki/NoSQL" target="_blank" rel="external">NoSQL, wikipedia</a></li>
<li><a href="http://en.wikipedia.org/wiki/Strozzi_NoSQL_\(RDBMS\" target="_blank" rel="external">Strozzi NoSQL, wikipedia</a>)</li>
<li><a href="http://www.julianbrowne.com/article/viewer/brewers-cap-theorem" target="_blank" rel="external">Brewer’s CAP Theorem</a></li>
<li><a href="http://stackoverflow.com/questions/12346326/nosql-cap-theorem-availability-and-partition-tolerance" target="_blank" rel="external">NoSQL CAP theorem - Availability and Partition Tolerance</a></li>
<li><a href="http://stackoverflow.com/questions/3342497/explanation-of-base-terminology" target="_blank" rel="external">Explanation of BASE terminology</a></li>
<li><a href="http://dirlt.com/you-can-not-sacrifice-partition-tolerance.html" target="_blank" rel="external">You Can’t Sacrifice Partition Tolerance</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fluentd初探（3）——实战：Python + MongoDB]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/03/09/fluentd-3/</url>
      <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>本文主要介绍Fluentd在Python Application中的应用，将Python程序在运行时输出的log输入到Fluentd，并最终持久化到MongoDB中。</p>
<a id="more"></a>
<p>把Python程序的log输出到Fluentd中很简单，Fluentd已经为你写好了lib——<a href="https://github.com/fluent/fluent-logger-python" target="_blank" rel="external">fluent-logger-python</a>。从Fluentd中把数据存到MongoDB也不是很困难，因为我们安装的是稳定版本的Fluentd——td-agent，其已经自带了把数据从Fluentd输出到MongoDB的输出插件——<code>out_mongo</code>，我们要做的就是简单做一些简单的配置。</p>
<p>在动手操作之前，我们还需要明白一些事情，就是通过Fluentd，把log保存到MongoDB中相比直接在程序中输出到MongoDB，有哪些好处？</p>
<p>一般一个程序会频繁地大量地输出log，如果直接将log写到MongoDB中，可能会引起性能问题的是数据库的锁。虽然MongoDB的锁（更多参见<a href="http://docs.mongodb.org/manual/faq/concurrency/" target="_blank" rel="external">官方文档</a>）比较轻量级，甚至有人提出了叫它“栓”更合适，但是频繁的insert也会引起资源竞争，并排斥其他读操作。而使用Fluentd等日志收集框架，它们会将logs缓存，并异步地以<a href="http://docs.mongodb.org/manual/core/bulk-inserts/" target="_blank" rel="external">bulk inserts</a>的方式写入MongoDB，比直接写入高效很多，而且对程序的性能影响很低。而且就Fluentd来说，它的数据记录是JSON形式，与MongoDB的数据格式BSON融合搭配非常完美，因此用Fluentd来收集并写入MongoDB是较为理想的解决方案。</p>
<p>架构图如下：</p>
<p><img src="http://vars.qiniudn.com/fluent-mongodb.png" alt=""></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装fluent-logger-python"><a href="#安装fluent-logger-python" class="headerlink" title="安装fluent-logger-python"></a>安装fluent-logger-python</h4><pre><code>$ sudo pip install fluent-logger
</code></pre><h4 id="为Fluentd配置输入插件"><a href="#为Fluentd配置输入插件" class="headerlink" title="为Fluentd配置输入插件"></a>为Fluentd配置输入插件</h4><p>要求Fluentd的输入插件<strong>必须</strong>做出如下配置：</p>
<pre><code>&lt;source&gt;
  type tcp
  port 24224
&lt;/source&gt;
</code></pre><h4 id="为Fluentd配置输出插件"><a href="#为Fluentd配置输出插件" class="headerlink" title="为Fluentd配置输出插件"></a>为Fluentd配置输出插件</h4><p>一个样例的输出插件配置如下：</p>
<pre><code>&lt;match mongo.*&gt;
    # plugin type, must be mongo
    type mongo

    # mongodb host + port
    host 127.0.0.1
    port 27017

    # mongodb db + collection
    database grlog
    collection log

    # for capped collection
    capped
    capped_size 1024m

    # authentication
    user liushuaikobe
    password secret

    # flush interval
    flush_interval 10s
&lt;/match&gt;
</code></pre><p>几个点说一下，其他的不言而喻。</p>
<h5 id="capped"><a href="#capped" class="headerlink" title="capped"></a><code>capped</code></h5><p>即MongoDB固定大小的集合（<a href="http://docs.mongodb.org/manual/core/capped-collections/" target="_blank" rel="external">Capped Collections</a>）。非常适合用来存储log信息。如果你不知道，建议先去学学基础的MongoDB的知识。</p>
<h5 id="flush-interval"><a href="#flush-interval" class="headerlink" title="flush_interval"></a><code>flush_interval</code></h5><p>这个参数指定了多长时间数据被写入MongoDB一次。默认是60s。支持“s”(seconds)，“m”(minutes)，“h”(hours) 后缀。</p>
<h5 id="collection"><a href="#collection" class="headerlink" title="collection"></a><code>collection</code></h5><p>这个参数指定了数据存入MongoDB的哪个集合。这个参数是必须的，除非设置了<code>tag_mapped</code>。</p>
<p><code>tag_mapped</code>告诉Fluentd根据数据记录的tag信息把数据记录放入不同的MongoDB集合。</p>
<p>例如：</p>
<pre><code>&lt;match mongo.*&gt;
    ...

    # Set &apos;tag_mapped&apos; if you want to use tag mapped mode.
    tag_mapped

    # If the tag is &quot;mongo.foo&quot;, then the prefix &quot;mongo.&quot; is removed.
    # The inserted collection name is &quot;foo&quot;.
    remove_tag_prefix mongo.

    ...
&lt;/match&gt;
</code></pre><h5 id="更多高级的配置"><a href="#更多高级的配置" class="headerlink" title="更多高级的配置"></a>更多高级的配置</h5><p>还有很多更具体的配置，比如buffer相关等，数据写入MongoDB时使用的线程数等，详情查看<a href="http://docs.fluentd.org/articles/out_mongo" target="_blank" rel="external">这里</a>。</p>
<h4 id="重启td-agent"><a href="#重启td-agent" class="headerlink" title="重启td-agent"></a>重启td-agent</h4><pre><code>$ sudo service td-agent restart
</code></pre><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>接下来就是实际编写代码了，也非常简单。</p>
<pre><code>from fluent import sender
from fluent import event

sender.setup(&apos;app&apos;, host=&apos;127.0.0.1&apos;, port=24224)
event.Event(&apos;follow&apos;, {
    &apos;msg_1&apos;: &apos;msg 1&apos;,
    &apos;msg_2&apos;: &apos;msg 2&apos;
})
</code></pre><p>上面的代码就将一条数据记录（被称为event）发给了Fluentd，剩下的就是Fluentd根据你的配置把这些信息写入MongoDB了。</p>
<p>当然，在实际的项目中，可以采取一些灵活的手段。比如，可以根据上面所述的<code>tag_mapped</code>将不同LEVEL的log输出到不同的集合中。</p>
<p>附上我的代码，仅供参考，如有错误，恳请指正。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="keyword">from</span> fluent <span class="keyword">import</span> sender</div><div class="line"><span class="keyword">from</span> fluent <span class="keyword">import</span> event</div><div class="line"></div><div class="line"><span class="keyword">import</span> config</div><div class="line"></div><div class="line"></div><div class="line">__author__ = <span class="string">'liushuai'</span></div><div class="line"></div><div class="line">DEBUG = logging.DEBUG</div><div class="line">INFO = logging.INFO</div><div class="line">WARNING = logging.WARNING</div><div class="line">ERROR = logging.ERROR</div><div class="line">CRITICAL = logging.CRITICAL</div><div class="line"></div><div class="line">_level_tag_name = &#123;</div><div class="line">    DEBUG: <span class="string">"debug"</span>,</div><div class="line">    INFO: <span class="string">"info"</span>,</div><div class="line">    WARNING: <span class="string">"warning"</span>,</div><div class="line">    ERROR: <span class="string">"error"</span>,</div><div class="line">    CRITICAL: <span class="string">"critical"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">sender.setup(config.FLUENTD_TAG, host=config.FLUENTD_HOST, port=config.FLUENTD_PORT)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(level, msg)</span>:</span></div><div class="line">    event.Event(_level_tag_name.get(level, <span class="string">"unknown"</span>), &#123;</div><div class="line">        <span class="string">"msg"</span>: msg,</div><div class="line">        <span class="string">"level"</span>: _level_tag_name.get(level, <span class="string">"unknown"</span>)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>单元测试：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestCase</div><div class="line"></div><div class="line"><span class="keyword">import</span> log</div><div class="line"></div><div class="line">__author__ = <span class="string">'liushuai'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLog</span><span class="params">(TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_log</span><span class="params">(self)</span>:</span></div><div class="line">        msg = <span class="string">"This log is just for testing."</span></div><div class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</div><div class="line">            log.log(log.CRITICAL, msg)</div><div class="line">            log.log(log.ERROR, msg)</div><div class="line">            log.log(log.WARNING, msg)</div><div class="line">            log.log(log.INFO, msg)</div><div class="line">            log.log(log.DEBUG, msg)</div></pre></td></tr></table></figure>
<p>可以见到log已经被成功写入了MongoDB（可能会有一些延迟）：</p>
<p><img src="http://vars.qiniudn.com/fluentd-mongodb-log-example.png?imageView2/2/w/400" alt=""></p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>以上就是我使用Fluentd + Python + MongoDB进行项目log信息的集中处理的探索全过程，希望对你有帮助。如有错误，恳请留言指正。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fluentd初探（2）——基本配置]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/03/09/fluentd-2/</url>
      <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>Fluentd的配置文件让我们可以通过指定输入输出插件以及设置各个插件的参数来控制Fluentd的输入输出行为。</p>
<a id="more"></a>
<h3 id="配置文件的位置"><a href="#配置文件的位置" class="headerlink" title="配置文件的位置"></a>配置文件的位置</h3><p>由于我们之前采用的是.rpm/.deb方式安装的稳定版本的Fluentd——td-agent，采用这种方式安装的配置文件在此：</p>
<pre><code>$ sudo vi /etc/td-agent/td-agent.conf
</code></pre><h3 id="配置文件中一些基本指令"><a href="#配置文件中一些基本指令" class="headerlink" title="配置文件中一些基本指令"></a>配置文件中一些基本指令</h3><ul>
<li><code>source</code> 决定输入源</li>
<li><code>match</code> 决定输出目的地</li>
<li><code>include</code> 指定配置文件的包含</li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="source"><a href="#source" class="headerlink" title="source"></a><code>source</code></h4><p>Fluentd的数据输入源是通过<code>source</code>指令，选取使用什么输入插件，并加以配置来决定的。Fluentd标准输入插件有两个：<code>http</code>和<code>forward</code>。</p>
<ul>
<li><code>http</code> 指定Fluentd接收来自HTTP的数据信息</li>
<li><code>forward</code> 指定Fluentd接收来自TCP的数据包的信息</li>
</ul>
<p>二者可以同时存在，也即Fluentd可以同时接受来自两个源，甚至多个源的信息。</p>
<p>每个source指令<strong>必须</strong>包含一个<code>type</code>参数。，用来指定该source使用哪个输入插件，例如：</p>
<pre><code># Receive events from 24224/tcp
# This is used by log forwarding and the fluent-cat command
&lt;source&gt;
  type forward
  port 24224
&lt;/source&gt;

# http://this.host:9880/myapp.access?json={&quot;event&quot;:&quot;data&quot;}
&lt;source&gt;
  type http
  port 9880
&lt;/source&gt;
</code></pre><h4 id="插播消息一：Routing"><a href="#插播消息一：Routing" class="headerlink" title="插播消息一：Routing"></a>插播消息一：Routing</h4><p>Fluentd接收到数据后，输入的数据被提交到Fluentd内部的路由模块。一条数据记录包括三方面的信息，tag，time，record。tag是一个被“.”分隔开的字符串（比e.g. myapp.access），用做路由引擎路由时的依据。time域是由输入插件指定的，必须采用Unix时间格式，record就是数据的具体内容了。一条数据记录是一个JSON对象。</p>
<p>比如在上述例子中，这个请求<code>http://this.host:9880/myapp.access?json={&quot;event&quot;:&quot;data&quot;}</code>，让Fluentd的HTTP输入插件向路由模块提交了如下信息：</p>
<pre><code># generated by http://this.host:9880/myapp.access?json={&quot;event&quot;:&quot;data&quot;}
tag: myapp.access
time: (current time)
record: {&quot;event&quot;:&quot;data&quot;}
</code></pre><h4 id="插播消息二：自己写输入插件"><a href="#插播消息二：自己写输入插件" class="headerlink" title="插播消息二：自己写输入插件"></a>插播消息二：自己写输入插件</h4><p>在<a href="http://docs.fluentd.org/articles/input-plugin-overview" target="_blank" rel="external">这里</a>查看更多信息。</p>
<h4 id="match——告诉Fluentd用收到的数据做什么！"><a href="#match——告诉Fluentd用收到的数据做什么！" class="headerlink" title="match——告诉Fluentd用收到的数据做什么！"></a><code>match</code>——告诉Fluentd用收到的数据做什么！</h4><p>match根据上述的数据记录的tag信息对记录做出不同的处理。最常见的是通过该指令告诉Fluentd将收到的数据输出的不同的地方（这也是为什么match指令中指定的插件被称为输出插件）。Fluentd标准的输出插件是<code>file</code>和<code>forward</code>。</p>
<pre><code># Receive events from 24224/tcp
# This is used by log forwarding and the fluent-cat command
&lt;source&gt;
  type forward
  port 24224
&lt;/source&gt;

# http://this.host:9880/myapp.access?json={&quot;event&quot;:&quot;data&quot;}
&lt;source&gt;
  type http
  port 9880
&lt;/source&gt;

# Match events tagged with &quot;myapp.access&quot; and
# store them to /var/log/fluent/access.%Y-%m-%d
# Of course, you can control how you partition your data
# with the time_slice_format option.
&lt;match myapp.access&gt;
  type file
  path /var/log/fluent/access
&lt;/match&gt;
</code></pre><p>类似地，每个match指令都得包含一个<code>type</code>参数来指定输出插件。在上面的例子中，只有tag匹配上myapp.access的数据记录会被输出到/var/log/fluent/access中。</p>
<p><code>forward</code>输出插件是将接收到的数据流转发到其他Fluentd节点，不赘述。</p>
<p>当然，也可以写自己的输出插件，更多信息请看<a href="http://docs.fluentd.org/articles/output-plugin-overview" target="_blank" rel="external">这里</a>。</p>
<p>match指令中的tag模式可以支持通用字符匹配。</p>
<ul>
<li><code>*</code> <code>a.*</code>可以匹配<code>a.b</code>，<code>a.c</code>，不可以匹配<code>a</code>和<code>a.b.c</code></li>
<li><code>**</code> <code>a.**</code>可以匹配<code>a</code>，<code>a.b</code>，<code>a.b.c</code></li>
<li><code>{X, Y, Z}</code> <code>{a, b}</code>可以匹配<code>a</code>，<code>b</code>，不可以匹配<code>c</code></li>
</ul>
<p>以上可以混合使用，例如<code>a.{b,c}.*</code>，<code>a.{b,c.**}</code>。</p>
<h4 id="include——重用配置"><a href="#include——重用配置" class="headerlink" title="include——重用配置"></a><code>include</code>——重用配置</h4><p>例子：</p>
<pre><code># absolute path
include /path/to/config.conf

# if using a relative path, the directive will use
# the dirname of this config file to expand the path
include extra.conf

# glob match pattern
include config.d/*.conf

# http
include http://example.com/fluent.conf
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fluentd初探（1） —— 简介与安装]]></title>
      <url>http://blog.liushuaiko.be/blog/2014/03/07/fluentd-1/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Fluentd是一个开源的数据收集器，专为处理数据流设计，有点像<code>syslogd</code>，但是使用JSON作为数据格式。它采用了插件式的架构，具有高可扩展性高可用性，同时还实现了高可靠的信息转发。</p>
<a id="more"></a>
<p>据分(Y)析(Y)，Fluentd是由Fluent+d得来，d生动形象地标明了它是以一个守护进程的方式运行。官网上将其描述为data collector，在使用上，我们可以把各种不同来源的信息，首先发送给Fluentd，接着Fluentd根据配置通过不同的插件把信息转发到不同的地方，比如文件、SaaS Platform、数据库，甚至可以转发到另一个Fluentd。</p>
<p>总结一下，数据流殊途，同归与Fluentd，Fluentd做一些诸如过滤、缓存、路由等工作，将其转发到不同的最终接收方。</p>
<p>用Fluentd处理数据还能保证一定的实时性，其提供种类丰富的客户端lib，很适合处理单位时间emit出log数量巨大的场景。从v10后，Fluentd<strong>不支持</strong>Windows。</p>
<p>其采用Ruby编写，比较注重性能的地方采用C编写，Ruby的创始人松本老师这样评价Fluentd：</p>
<blockquote>
<p>Fluentd proves you can achieve programmer happiness and performance at the same time. A great example of Ruby beyond the Web.</p>
</blockquote>
<p>Heroku的联合创始人Adam Wiggins说的挺有道理：</p>
<blockquote>
<p>Logs are streams, not files. I love that Fluentd puts this concept front-and-center, with a developer-friendly approach for distributed systems logging.</p>
</blockquote>
<p>更多信息请看<a href="http://docs.fluentd.org/articles/architecture" target="_blank" rel="external">这里</a>。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装前的准备工作"><a href="#安装前的准备工作" class="headerlink" title="安装前的准备工作"></a>安装前的准备工作</h4><ol>
<li><p>安装<code>ntpd</code></p>
<p>   <code>ntpd</code>，以d结尾，是一个守护进程，全称是Network Time Protocol (NTP) daemon，它通过与一个Internet标准时钟服务器同步来维护系统时钟，同时也可以将本机做为一个时钟服务器对外提供时钟同步服务。更多信息请man一下ntpd。</p>
<p>   安装ntpd是为了防止Fluentd在收集log的时候出现非法的时间戳。</p>
<p>   在Ubuntu下，apt-get即可安装：</p>
<pre><code>$ sudo apt-get install ntp
</code></pre><p>   之后查看ntpd是否启动成功（pgrep返回进程号）：</p>
<pre><code>$ pgrep ntpd
</code></pre></li>
</ol>
<ol>
<li><p>增加系统文件描述符的最大数量</p>
<p>   通过ulimit查看当前的文件描述符的最大数量：</p>
<pre><code>$ ulimit -n
</code></pre><p>   如果是1024，那是远远不够的，将下面4行添加到<code>/etc/security/limits.conf</code>中，重启机器。</p>
<pre><code>root soft nofile 65536
root hard nofile 65536
* soft nofile 65536
* hard nofile 65536
</code></pre><p>   之后用ulimit查看，应该是65536了。</p>
</li>
</ol>
<ol>
<li><p>(Optional)优化机器内核TCP/IP参数</p>
<p>   如果Fluentd处于一个高负载的运行环境，比如一个机器中运行了多个Fluentd实例，那么最好将下面的参数添加到<code>/etc/sysctl.conf</code>中：</p>
<pre><code>net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.ip_local_port_range = 10240    65535
</code></pre><p>   然后执行<code>sysctl -w</code>或者重启机器使之生效。</p>
<p>   这个跟TCP/IP的细节有关系，我没有深究，貌似是为了防止短连接数过多，机器处于<code>TIME_WAIT</code>状态的TCP连接数过多，开启快速回收与重用。具体请参考<a href="http://stackoverflow.com/questions/337115/setting-time-wait-tcp" target="_blank" rel="external">这里</a>。</p>
</li>
</ol>
<h4 id="安装Fluentd"><a href="#安装Fluentd" class="headerlink" title="安装Fluentd"></a>安装Fluentd</h4><h5 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h5><p>有<a href="http://docs.fluentd.org/categories/installation" target="_blank" rel="external">很多种方式</a>来安装Fluentd，比如通过Ruby的Gem，以及Ubuntu的deb、OS X的Homebrew。</p>
<p>采用Ruby的Gem安装比较简单，安装的是基本版的Fluentd，即不自带<code>/etc/init.d</code>脚本，在运行时内存分配采用的是操作系统默认的方式；</p>
<p>而采用.rpm/.deb for Linux的方式安装呢，安装的是一个由<a href="http://www.treasuredata.com/" target="_blank" rel="external">Treasure Data, Inc</a>维护的稳定版本Fluentd，又被称为td-agent。为了保持一个良好的灵活性，Fluentd采用Ruby编写，性能要求比较高的地方采用C编写，考虑到一般的用户可能安装操作Ruby有困难，因此该公司维护并提供了一个稳定版本的Fluentd。该版本的Fluentd在内存分配上采用了着重避免内存碎片分配实现<a href="http://www.canonware.com/jemalloc/" target="_blank" rel="external">jemalloc</a>。两个版本的区别可以在这<a href="http://docs.fluentd.org/articles/faq#treasure-agenttd-agnt" target="_blank" rel="external">查看</a>。</p>
<p>那么我们到底选用哪种方式呢，根据官方的文档。td-agent强调new features的稳定性，如果希望自己控制Fluentd的features，自己手动去更新，采用gem的方式安装。如果是第一次使用Fluentd或者在大规模的生产环境使用，推荐安装td-agent，每2-3个月，td-agent就会发布一个新的版本。</p>
<h5 id="在Ubuntu-12-04上安装Fluentd"><a href="#在Ubuntu-12-04上安装Fluentd" class="headerlink" title="在Ubuntu 12.04上安装Fluentd"></a>在Ubuntu 12.04上安装Fluentd</h5><p><strong>注意</strong> 这种方式截止到笔者发稿仅支持一下两个Ubuntu的版本：</p>
<ul>
<li>Ubuntu 12.04 LTS / Precise</li>
<li>Ubuntu 10.04 LTS / Lucid</li>
</ul>
<p>可以在<a href="http://docs.fluentd.org/articles/install-by-deb" target="_blank" rel="external">这里</a>查看最新进展。</p>
<ol>
<li><p>(Optional but Recommend)设置GPG Key</p>
<p> deb包使用<a href="http://packages.treasure-data.com/" target="_blank" rel="external">Treasure Data GPG key</a>签名，首先将<a href="http://packages.treasure-data.com/debian/RPM-GPG-KEY-td-agent" target="_blank" rel="external">GPG key</a>导入apt：</p>
<pre><code>$ apt-key add /path/to/RPM-GPG-KEY-td-agent
</code></pre></li>
</ol>
<ol>
<li><p>执行下面的脚本</p>
<pre><code>echo &quot;This script requires superuser access to install apt packages.&quot;
echo &quot;You will be prompted for your password by sudo.&quot;

# clear any previous sudo permission
sudo -k

# run inside sudo
sudo sh &lt;&lt;SCRIPT

# add treasure data repository to apt
echo &quot;deb http://packages.treasure-data.com/precise/ precise contrib&quot; &gt; /etc/apt、sources.list.d/treasure-data.list

# update your sources
apt-get update

# install the toolbelt
apt-get install -y --force-yes td-agent

SCRIPT
</code></pre><p>   即安装完毕。</p>
<p>   也可执行下面的的命令：</p>
<pre><code>$ curl -L http://toolbelt.treasuredata.com/sh/install-ubuntu-precise.sh | sh
</code></pre><p>   其实脚本内容就是上面的，我粘过去的。</p>
</li>
</ol>
<ol>
<li><p>启动Fluentd的守护进程</p>
<p>   因为我们安装的是td-agent，自带<code>/etc/init.d/td-agent</code>脚本，通过该脚本启动Fluentd服务。</p>
<pre><code>$ /etc/init.d/td-agent restart
* Restarting td-agent td-agent
$ /etc/init.d/td-agent status
* ruby is running
</code></pre><p>   同时还支持以下命令：</p>
<pre><code>$ /etc/init.d/td-agent start
$ /etc/init.d/td-agent stop
$ /etc/init.d/td-agent restart
$ /etc/init.d/td-agent status
</code></pre><p>   配置文件在：<code>/etc/td-agent/td-agent.conf</code></p>
</li>
</ol>
<ol>
<li><p>测试</p>
<p>   默认在配置文件中td-agent在8888端口监听，接收来自HTTP的log信息，并把其路由到stdout（<code>/var/log/td-agent/td-agent.log</code>）,可以用curl命令测试：</p>
<pre><code>$ curl -X POST -d &apos;json={&quot;json&quot;:&quot;message&quot;}&apos; http://localhost:8888/debug.test
</code></pre><p>   之后打开<code>/var/log/td-agent/td-agent.log</code>，可以见到已经输出了信息：</p>
<p>   <img src="http://vars.qiniudn.com/fulent-test.png" alt=""></p>
</li>
</ol>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>现在我们已经准备好使用Fluentd收集日志信息了。接下来就是配置和实际应用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS Developer for a week]]></title>
      <url>http://blog.liushuaiko.be/blog/2013/12/01/ios-developing-one-week/</url>
      <content type="html"><![CDATA[<p>上周日把MongoDB讲座的Keynote准备完毕之后，决定用一个周的时间来学习一下iOS开发。其实很久之前就想学习一下iOS开发了，但是由于各种原因，想法一直被搁置，这一周终于静下心来，采用一种以项目为驱动的快速学习方式，做了一个周的iOS，有很多想法，简单做一下总结。<br><a id="more"></a></p>
<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>我首先快速浏览了一下Objective-C的基本语法，接着iOS的学习从一本<a href="http://book.douban.com/subject/4111365/" target="_blank" rel="external">《iPhone 3开发基础教程》</a>开始。这也是一本入门级的书，5年前出版，是我lab孙鹏师兄留下的精神财富。现在iOS开发有很多新添加的东西，需要与官方文档结合着看。由于我之前做过一些Android的东西，先上手写一个按Button改变Label文字的小Demo，对iOS整个流程就有个感性的认识，接着在Google和SO的帮助下摸着石头过河。</p>
<p>驱动我学习的项目是一个通过MongoDB的REST API来查看MongoDB各种状态的小App，详见<a href="https://github.com/liushuaikobe/MongoMonitor" target="_blank" rel="external">Github</a>。</p>
<p>下面也是结合着Android开发来谈谈自己的感想。</p>
<h3 id="Objective-C-amp-Java"><a href="#Objective-C-amp-Java" class="headerlink" title="Objective-C &amp; Java"></a>Objective-C &amp; Java</h3><p>Android开发是采用Java语言，而iOS采用<a href="http://zh.wikipedia.org/wiki/Objective-C" target="_blank" rel="external">Objective-C</a>语言，我的感想就是二者有很多相似的地方，因为Objective-C本身就是C语言加入了面向对象的特性，既然是面向对象，就要把握住OO的几个点：抽象、继承、多态。</p>
<p>举个例子，Java中的接口，表征了类所具有的能力，一个类可以实现一个接口，通过接口可以实现Java的多态，通俗点说就是在某个特定的情况下，我要调用A接口的foo()方法，但是foo方法具体要做什么可以由实现了A接口的类C来决定；在Objective-C中，思想类似，是用delegate来实现的（这么说来倒是与C#有点像哦）。其中protocol跟Java里面的interface差不多，在某个特定的情况下，我要委托（delegate）别人做个事，但是不能随便就委托给一个人，要委托的人必须得遵守我定的协议（protocol）。</p>
<p>总之它们还有很多相似的地方，需要你慢慢去体会。</p>
<h3 id="iOS-amp-Android"><a href="#iOS-amp-Android" class="headerlink" title="iOS &amp; Android"></a>iOS &amp; Android</h3><p>iOS开发采用了非常苛刻的MVC模式，这点<a href="http://v.163.com/special/opencourse/ipadandiphoneapplication.html" target="_blank" rel="external">斯坦福大学的公开课</a>第一课解释的非常好（但是中文字幕翻译的特别挫）。</p>
<p>Android更像是基于场景的编程模式，在<a href="http://book.douban.com/subject/6811238/" target="_blank" rel="external">《Android内核剖析中》</a>，Context就被翻译成了“场景”。一个App包含一个一个的Activity，在一个Activity中有一个一个的View（ViewGroup），View协作来完成事情，当然还有Service等等。</p>
<p>在视图的呈现上，由于iOS的MVC，各种Controller控制View的呈现，View通过Delegate来给Controller发送消息，在Android中，不区分的这么明显，很多逻辑都是在一个大的场景下（比如一个Activity的子类里面，但是通常我们会模块化逻辑的处理），这个场景包含很多View和ViewGroup（通常作为Activity子类的实例变量），我们在场景里控制视图的呈现。</p>
<p>iOS把各种Controller分成了两类：container view controller和content view controller。顾名思义，container view controller一般用来装其他的controller（它们所维护的View一般用来装其他Controller维护的View），例如UITabBarController、UINavigationController，而content view controller一般用来控制呈现具体的内容，是“被装”的，这通常都是你继承了UIViewController自定义的Controller。</p>
<p>至于其它方面，由于时间有限，没有什么更深入的理解，如理解有偏差，还请指正。</p>
<h3 id="成果截图"><a href="#成果截图" class="headerlink" title="成果截图"></a>成果截图</h3><p><img src="http://vars.qiniudn.com/mongo_monitor_1.png" alt=""><br><img src="http://vars.qiniudn.com/mongo_monitor_2.png" alt=""></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>项目使用了UIWebView，界面采用的是<a href="http://semantic-ui.com/" target="_blank" rel="external">semantic-ui</a>，其他的都是用的自带的控件。为什么那个Replication的Tab什么都没有呢？因为时间关系外加水平有限，没有把MongoDB以Replication Set的方式跑起来。</p>
<p>App要求iOS6或以上版本（UIRefreshControl），MongoDB要求2.2或以上版本（<a href="http://docs.mongodb.org/manual/reference/command/hostInfo/" target="_blank" rel="external">hostInfo</a>）。</p>
<p>感谢孙鹏师兄的精神财富《iPhone 3开发基础教程》，和下面大师弟以及资深iOS开发者小郭师兄提供的帮助，以及彤姐（gender：male）的美工。</p>
<p>外一句：</p>
<blockquote>
<p>如果遇到一个会美工的妹子，你就娶了吧！</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个Python downloader的代码分析]]></title>
      <url>http://blog.liushuaiko.be/blog/2013/10/06/python-downloader-code-notes/</url>
      <content type="html"><![CDATA[<p>读了一个用Python从网上下载大量文件的代码，不长的代码里可以学习的东西非常多，现在把它写下来分析一下。<a id="more"></a>      </p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码是这样的：    </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> (division, print_function, absolute_import,</div><div class="line">                        unicode_literals)</div><div class="line"></div><div class="line">__all__ = [<span class="string">"fetch"</span>]</div><div class="line"></div><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</div><div class="line">monkey.patch_all()</div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</div><div class="line"><span class="keyword">from</span> tempfile <span class="keyword">import</span> NamedTemporaryFile</div><div class="line"></div><div class="line">data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), <span class="string">"data"</span>)</div><div class="line">filename = os.path.join(data_dir, <span class="string">"&#123;year&#125;-&#123;month:02d&#125;-&#123;day:02d&#125;-&#123;n&#125;.json.gz"</span>)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    os.makedirs(data_dir)</div><div class="line"><span class="keyword">except</span> os.error:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">url = <span class="string">"http://data.githubarchive.org/&#123;year&#125;-&#123;month:02d&#125;-&#123;day:02d&#125;-&#123;n&#125;.json.gz"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(year, month, day, n)</span>:</span></div><div class="line">    kwargs = &#123;<span class="string">"year"</span>: year, <span class="string">"month"</span>: month, <span class="string">"day"</span>: day, <span class="string">"n"</span>: n&#125;</div><div class="line">    local_fn = filename.format(**kwargs)</div><div class="line"></div><div class="line">    <span class="comment"># Skip if the file exists.</span></div><div class="line">    <span class="keyword">if</span> os.path.exists(local_fn):</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="comment"># Download the remote file.</span></div><div class="line">    remote = url.format(**kwargs)</div><div class="line">    r = requests.get(remote)</div><div class="line">    <span class="keyword">if</span> r.status_code == requests.codes.ok:</div><div class="line">        <span class="comment"># Atomically write to disk.</span></div><div class="line">        <span class="comment"># http://stackoverflow.com/questions/2333872/ \</span></div><div class="line">        <span class="comment">#        atomic-writing-to-file-with-python</span></div><div class="line">        f = NamedTemporaryFile(<span class="string">"wb"</span>, delete=<span class="keyword">False</span>)</div><div class="line">        f.write(r.content)</div><div class="line">        f.flush()</div><div class="line">        os.fsync(f.fileno())</div><div class="line">        f.close()</div><div class="line">        shutil.move(f.name, local_fn)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">for</span> year, month <span class="keyword">in</span> product(range(<span class="number">2011</span>, <span class="number">2014</span>), range(<span class="number">1</span>, <span class="number">13</span>)):</div><div class="line">        jobs = [gevent.spawn(fetch, year, month, day, n)</div><div class="line">                <span class="keyword">for</span> n, day <span class="keyword">in</span> product(range(<span class="number">1</span>, <span class="number">32</span>), range(<span class="number">24</span>))]</div><div class="line">        gevent.joinall(jobs)</div><div class="line">        print(<span class="string">"Finished &#123;0&#125;-&#123;1&#125;"</span>.format(year, month))</div></pre></td></tr></table></figure>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>这段代码实现的功能是，从远程下载大量的json文件，并保存到本地。    </p>
<p>运行它需要额外安装的库有：<a href="http://docs.python-requests.org/en/latest/" target="_blank" rel="external">requests</a>，<a href="http://www.gevent.org/" target="_blank" rel="external">gevent</a>。这些库可以通过pip安装，开头的这个<code>monkey.patch_all()</code>后面会有介绍。</p>
<p><a href="http://docs.python.org/2/library/shutil.html" target="_blank" rel="external">shutil</a>这个库名字是由“shell”与“util”合成，提供了一些较高层次上的文件和文件集合操作，但是会丢失文件的一些metadata，比如用户和用户组。其他的诸如itertools、tempfile功能就不言而喻了。     </p>
<p>在代码的开始，首先构造了用于存放将要下载的文件的目录的路径字符串，使用了<code>os.path</code>中的一些方法。<code>__file__</code>变量存放当前脚本路径（可能是一个相对路径，取决于在命令行中执行该脚本时按何种路径执行）。接着构造了将要下载的文件的绝对路径（包括文件名），起一个模板的作用，为下面调用<code>format()</code>做准备。    </p>
<p>接着是创建文件夹并构造下载目标的url模板字符串。     </p>
<p>脚本结构清晰，有一个函数<code>fetch()</code>，通过执行这个函数来完成远程文件的下载与保存。</p>
<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch()"></a>fetch()</h3><p>这是脚本中干活的函数，有以下几个点需要我们掌握。    </p>
<h4 id="args与-kwargs"><a href="#args与-kwargs" class="headerlink" title="*args与**kwargs"></a><code>*args</code>与<code>**kwargs</code></h4><p>在Python函数定义中，我们经常会发现函数带有如下形式的参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(arg, *args, **kwargs)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>上例中函数<code>foo()</code>的后两个参数没有显式定义，类似于允许传递不定数量参数的函数，但比那要灵活很多。在调用时，与<code>*args</code>对应的参数将会打包成一个元组传递给函数；<code>**kwargs</code>应为函数定义中最后一个形参，对应的参数必须以<code>arg=val</code>的形式传递，所有这样的参数会打包成字典传给函数。     </p>
<p>还有一种传递方式是直接用<code>*(&#39;baz&#39;, 123)</code>或<code>**{&#39;bar&#39;:12, 34:56}</code>这样的形式直接传递。还有很多灵活的用法，请自行搜索。    </p>
<p>回到本脚本上来，<code>str.format(*args, **kwargs)</code>，这是str类型里面的<a href="http://docs.python.org/2/library/stdtypes.html#str.format" target="_blank" rel="external">format</a>方法的定义，本脚本就是直接将一个参数字典传递给<code>format</code>函数。    </p>
<h4 id="Requests-HTTP-for-Humans"><a href="#Requests-HTTP-for-Humans" class="headerlink" title="Requests: HTTP for Humans"></a>Requests: HTTP for Humans</h4><p><a href="http://docs.python-requests.org/en/latest/" target="_blank" rel="external">requests</a>这个库比较给力，作者认为python自带的urllib2虽然提供了很多方法来让程序员完成日常所需的一些http需求，但是那些方法比较凌乱，要兼容不同时代的不同网络，在使用时要做很多多余的工作。Python不应该是这样的啊！于是requests诞生了，有很多<a href="http://docs.python-requests.org/en/latest/#feature-support" target="_blank" rel="external">exciting features</a>。    </p>
<p>脚本中首先构造了欲下载文件实际的URL，之后用requests库中优雅的的<code>get</code>方法来下载文件，不得不承认，requests库真的非常优雅，一行代码，读者可以尝试使用urllib2来完成同样的功能。    </p>
<p><a href="https://gist.github.com/kennethreitz/973705" target="_blank" rel="external">这里</a>还有一个requests与urllib2实现登录远程服务器的一个代码的对比。      </p>
<p>requests库可以让程序与web无缝结合，用起来很顺手，下次在写跟web有关的函数时，可以试试这个，用户反响很好。      </p>
<h4 id="原子性地写入文件（Atomically-write-to-disk）"><a href="#原子性地写入文件（Atomically-write-to-disk）" class="headerlink" title="原子性地写入文件（Atomically write to disk）"></a>原子性地写入文件（Atomically write to disk）</h4><p>脚本中，当下载成功后，要将下载到的文件写入磁盘。作者为了保证数据的有效性与正确性，采用了原子性地将文件写入。基本思路是，将数据写入一个临时文件，待确保数据写入成功后，将临时文件改名为目标文件名。注意的是，更名操作仅仅在源文件和目标文件在同一个文件系统的情况下是原子操作，而且，源文件和目标文件的名称必须不相同。更多的细节请参考脚本注释中给出的SO<a href="http://stackoverflow.com/questions/2333872/atomic-writing-to-file-with-python" target="_blank" rel="external">讨论</a>链接。        </p>
<h4 id="file-flush-与os-fsync"><a href="#file-flush-与os-fsync" class="headerlink" title="file.flush()与os.fsync()"></a><code>file.flush()</code>与<code>os.fsync()</code></h4><p>为了确保数据<strong>一定</strong>被写入了磁盘，在<code>file.flush()</code>后面又补加了一句<code>os.fsync()</code>。这是为什么呢？<br>在这个过程中涉及到两个层次的buffer：</p>
<pre><code>1. 内部的buffer（Internal buffers）
2. 操作系统的buffer（Operating system buffers）
</code></pre><p>所谓Internal buffers是由程序创建的buffer，例如runtime、lib、language，旨在避免频繁地进行系统调用来将数据写入磁盘，以提高效率。也即每次向文件对象写入数据时，实际上是写入了这个buffer，什么时候这个buffer满了，数据才真正调用系统调用写入实际的文件。     </p>
<p>然而，由于操作系统还有一层buffer，上述操作也并不意味着就一定将数据写入了实实在在的文件，仅仅意味着数据从由程序运行时维护的buffer转移到了操作系统的那层buffer。        </p>
<p>设想一下这种情况，当数据在操作系统的buffer中时，突然机器断电了，数据就丢了。     </p>
<p>为了解决这种情况，<code>flush</code>与<code>fsync</code>就诞生了。       </p>
<p>首先，<code>flush</code>将逗留在Internal buffer的数据写入实际的文件，注意，假设此时有另外一个进程打开了这个文件进行读取，是<strong>可以</strong>读到被<code>flush</code>的内容的，但是这不意味着数据被永久存入了磁盘。    </p>
<p>接下来，我们调用<code>fsync</code>来把存储在Operating system buffer中的数据同步到实实在在的硬盘中去。  </p>
<p>其实，我们在编写程序的过程中没有必要纠结于此。调用<code>flush</code>，剩下的交给OS即可。但是万一要求数据必须稳妥地存入外存，或者你有强迫症，就在<code>flush</code>后面加一个<code>fsync</code>吧。注意这肯定会对效率与性能有所影响。具体可以参考<a href="http://stackoverflow.com/questions/7127075/what-exactly-the-pythons-file-flush-is-doing" target="_blank" rel="external">这里</a>。</p>
<h3 id="main"><a href="#main" class="headerlink" title="__main__"></a>__main__</h3><h4 id="itertools-product"><a href="#itertools-product" class="headerlink" title="itertools.product()"></a><code>itertools.product()</code></h4><p>这个函数接受两个列表作为参数，返回一个由两个列表的笛卡尔乘积作为元素的迭代器。</p>
<h4 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h4><p><a href="http://www.gevent.org/" target="_blank" rel="external">gevent</a>这个库更是牛B到爆。它是一个基于Python协程的网络库，官网的第一句话简明地介绍了它：</p>
<blockquote>
<p>gevent is a <a href="http://en.wikipedia.org/wiki/Coroutine" target="_blank" rel="external">coroutine</a>-based Python networking library that uses <a href="http://greenlet.readthedocs.org/en/latest/" target="_blank" rel="external">greenlet</a> to provide a high-level synchronous API on top of the <a href="http://monkey.org/~provos/libevent/" target="_blank" rel="external">libevent</a> event loop.</p>
</blockquote>
<p>翻译不好，于是直接把这搬上来了，主要是对greenlet和libevent都不熟悉。    </p>
<p>协程（Co-routine）是什么呢？简单来说，就是可以暂时中断，之后再继续执行的程序。想到什么了？对，就是Python的generater、yield，还有<code>range()</code>与<code>xrange()</code>。协程跟这些有着千丝万缕的联系。     </p>
<p>这里有一篇很好的<a href="http://blog.ez2learn.com/2010/07/17/talk-about-coroutine-and-gevent/" target="_blank" rel="external">文章</a>来讲co-routine和gevent。<a href="http://simple-is-better.com/news/334" target="_blank" rel="external">这里</a>也是一篇好文，讲解gevent的优点和缺点。    </p>
<p>在理解了协程的过程之后，我认为协程跟多线程最大的区别就在于，协程之间的切换相对比thread之间的context-switch来说，成本很小；而且，thread的context-switch虽然我们可以进行某种程度的控制，但是大部分还是得靠OS来决定要先排程哪个thread，而coroutine的执行完全是由我们自己控制的。也就是说，协程们是在用户态由程序员控制进行排程，协程其实是在一个线程中折腾的。       </p>
<p>回到脚本上来，从远程下载文件保存到本地，这其中要做大量的IO操作。脚本是采用了gevent库利用协程进行高效地下载。其中<code>joinall()</code>是等待所有协程都return之后，主程序继续向下执行。          </p>
<p>再去看脚本开头的<code>monkey.patch_all()</code>，这是将Python内建的函数库中一些同步IO操作取代成gevent的异步IO操作，这样，当IO阻塞发生时，会切到主线程进行协程的排程，而非阻塞在那里。    </p>
<p>想了解更多，可以去阅读greeelet和gevent的源码。      </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>实不相瞒，我也写了代码做同样的工作。但是，我用了shell的<code>wget</code>。看了这个downloader，真的除了膜拜别无他求。如果让我用Python写一个downloader，我顶多会用多线程（可能嫌麻烦，连多线程也不用，求喷）？会考虑写入文件的原子性吗？会去主动搜索一下能提高效率的lib吗？     </p>
<p>在读了这段代码之后，真心觉得<code>知也无涯</code>啊。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[知乎笔试（2）——日志处理]]></title>
      <url>http://blog.liushuaiko.be/blog/2013/07/18/zhihu-examination-2/</url>
      <content type="html"><![CDATA[<p>由于和上一篇日志间隔较长，我尽力回忆，把当时解答的过程还原出来，越来越讨厌CSDN的博客了，神马玩意啊，个人profile下面都插一个广告栏，弃用是迟早的事。</p>
<a id="more"></a>
<h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p><img src="http://vars.qiniudn.com/zhihu_bishi_2.jpeg" alt=""><br>呃，拿到题目之后着实思考了一会，主要是思考各种处理方法的效率问题。后来又去搜索了一下业界这种数据处理的通用方式以及注意事项，基本上这种大数据的处理要用Hash。后来我确定了方法：</p>
<p>按天遍历每一条日志记录，为每一天创建一个临时文件，在内存中用用户id作为key，对应的“/topic/***”访问路径作为value。每遍历到一条访问路径是“/topic/***”的记录，判断内存中的hash表中是否已经有该条日志用户的id，有的话判断该id在hash表中的value——topic的路径与当前读到的日志记录的topic路径是否相同，如果不同的话，将id写到这一天对应的临时文件中。</p>
<p>上面的过程处理完毕之后，我们得到了30个临时文件，每个临时文件记录了一些用户的id，这些用户满足：在该天内，访问的“/topic/***”路径中，包含两个不同的路径。然后我们要做的是从这30个临时文件中找出一些id，它们在每个文件中都出现过。这些ID就是我们的最终结果。</p>
<p>后面一问，找出一个路径列表，用类似的hash处理方式即可。</p>
<p>按着这样的思路，不难写出代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys, re, os</div><div class="line"></div><div class="line">re_exp_1 = re.compile(<span class="string">'\[.+\] (\d+) \d+ [A-Za-z]+ /topic/(\d+) \(((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)\) [\d\.]+[a-zA-Z]+'</span>)</div><div class="line">re_exp_2 = re.compile(<span class="string">'\[.+\] (\d+) \d+ [A-Za-z]+ ([/a-zA-Z\d]+) \(((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)\) [\d\.]+[a-zA-Z]+'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_id_topic_path</span><span class="params">(log_line)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    return the uid and the subpath of topic via a tuple if match.</div><div class="line">    '''</div><div class="line">    m = re_exp_1.match(log_line)</div><div class="line">    <span class="keyword">return</span> (m.group(<span class="number">1</span>), m.group(<span class="number">2</span>)) <span class="keyword">if</span> m <span class="keyword">else</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_id_path</span><span class="params">(log_line)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    return the uid and the full path of via a tuple if match.</div><div class="line">    '''</div><div class="line">    m = re_exp_2.match(log_line)</div><div class="line">    <span class="keyword">return</span> (m.group(<span class="number">1</span>), m.group(<span class="number">2</span>)) <span class="keyword">if</span> m <span class="keyword">else</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_usr_list</span><span class="params">(log_path)</span>:</span></div><div class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">31</span>):</div><div class="line">        day_qualified_file = open(<span class="string">''</span>.join((log_path, str(day), <span class="string">'.txt'</span>)), <span class="string">'w'</span>)</div><div class="line">        day_qualified_table = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> hour <span class="keyword">in</span> range(<span class="number">24</span>):</div><div class="line">            log_name = <span class="string">'%s%s-%s-%s-%s.log'</span> % (log_path, <span class="string">'2013'</span>, <span class="string">'1'</span>, str(day), str(hour))</div><div class="line">            <span class="keyword">print</span> log_name</div><div class="line">            log_file = open(log_name, <span class="string">'r'</span>)</div><div class="line">            <span class="keyword">for</span> log_line <span class="keyword">in</span> log_file:</div><div class="line">                id_path = get_id_topic_path(log_line)</div><div class="line">                <span class="keyword">if</span> id_path:</div><div class="line">                    <span class="keyword">if</span> id_path[<span class="number">0</span>] <span class="keyword">in</span> day_qualified_table:</div><div class="line">                        <span class="keyword">if</span> day_qualified_table[id_path[<span class="number">0</span>]] != id_path[<span class="number">1</span>]:</div><div class="line">                            day_qualified_file.write(<span class="string">'%s%s'</span> % (id_path[<span class="number">0</span>], <span class="string">'\n'</span>))</div><div class="line">                            <span class="keyword">del</span> day_qualified_table[id_path[<span class="number">0</span>]]</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        day_qualified_table[id_path[<span class="number">0</span>]] = id_path[<span class="number">1</span>]</div><div class="line">            log_file.close()</div><div class="line">        day_qualified_file.close()</div><div class="line">    <span class="keyword">del</span> day_qualified_table</div><div class="line"></div><div class="line">    id_set_list = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">31</span>):</div><div class="line">        day_qualified_file_name = <span class="string">''</span>.join((log_path, str(day), <span class="string">'.txt'</span>))</div><div class="line">        day_qualified_file = open(day_qualified_file_name, <span class="string">'r'</span>)</div><div class="line">        id_list = []</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> day_qualified_file:</div><div class="line">            id_list.append(line.strip())</div><div class="line">        day_qualified_file.close()</div><div class="line">        os.remove(day_qualified_file_name)</div><div class="line">        id_set = set(&#123;&#125;.fromkeys(id_list).keys()) <span class="comment"># remove duplicate user id in someday</span></div><div class="line">        id_set_list.append(id_set)</div><div class="line"></div><div class="line">    result = id_set_list[<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span> id_set <span class="keyword">in</span> id_set_list:</div><div class="line">        result = result &amp; id_set</div><div class="line">        <span class="comment"># print result</span></div><div class="line"></div><div class="line">    result_file = open(<span class="string">r'usr.txt'</span>, <span class="string">'w+'</span>) <span class="comment"># write final result into usr.txt</span></div><div class="line">    <span class="keyword">for</span> uid <span class="keyword">in</span> result:</div><div class="line">        result_file.write(<span class="string">'%s%s'</span> % (uid, <span class="string">'\n'</span>))</div><div class="line">    result_file.close()</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url_list</span><span class="params">(log_path, usr_list)</span>:</span></div><div class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">31</span>):</div><div class="line">        day_qualified_file = open(<span class="string">''</span>.join((log_path, str(day), <span class="string">'.txt'</span>)), <span class="string">'w'</span>)</div><div class="line">        day_qualified_table = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> hour <span class="keyword">in</span> range(<span class="number">24</span>):</div><div class="line">            log_name = <span class="string">'%s%s-%s-%s-%s.log'</span> % (log_path, <span class="string">'2013'</span>, <span class="string">'1'</span>, str(day), str(hour))</div><div class="line">            <span class="keyword">print</span> log_name</div><div class="line">            log_file = open(log_name, <span class="string">'r'</span>)</div><div class="line">            <span class="keyword">for</span> log_line <span class="keyword">in</span> log_file:</div><div class="line">                id_path = get_id_path(log_line)</div><div class="line">                <span class="keyword">if</span> id_path:</div><div class="line">                    <span class="keyword">if</span> id_path[<span class="number">0</span>] <span class="keyword">in</span> usr_list:</div><div class="line">                        <span class="keyword">if</span> id_path[<span class="number">1</span>] <span class="keyword">in</span> day_qualified_table:</div><div class="line">                            <span class="keyword">if</span> day_qualified_table[id_path[<span class="number">1</span>]] != id_path[<span class="number">0</span>]:</div><div class="line">                                day_qualified_file.write(<span class="string">'%s%s'</span> % (id_path[<span class="number">1</span>], <span class="string">'\n'</span>))</div><div class="line">                                <span class="keyword">del</span> day_qualified_table[id_path[<span class="number">1</span>]]</div><div class="line">                        <span class="keyword">else</span>:</div><div class="line">                            day_qualified_table[id_path[<span class="number">1</span>]] = id_path[<span class="number">0</span>]</div><div class="line">            log_file.close()</div><div class="line">        day_qualified_file.close()</div><div class="line">    <span class="keyword">del</span> day_qualified_table</div><div class="line"></div><div class="line">    url_set_list = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> day <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">31</span>):</div><div class="line">        day_qualified_file_name = <span class="string">''</span>.join((log_path, str(day), <span class="string">'.txt'</span>))</div><div class="line">        day_qualified_file = open(day_qualified_file_name, <span class="string">'r'</span>)</div><div class="line">        url_list = []</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> day_qualified_file:</div><div class="line">            url_list.append(line.strip())</div><div class="line">        day_qualified_file.close()</div><div class="line">        os.remove(day_qualified_file_name)</div><div class="line">        url_set = set(&#123;&#125;.fromkeys(url_list).keys())</div><div class="line">        url_set_list.append(url_set)</div><div class="line"></div><div class="line">    result = url_set_list[<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span> url_set <span class="keyword">in</span> url_set_list:</div><div class="line">        result = result &amp; url_set</div><div class="line">        <span class="comment"># print result</span></div><div class="line"></div><div class="line">    result_file = open(<span class="string">r'url.txt'</span>, <span class="string">'w+'</span>)</div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> result:</div><div class="line">        result_file.write(<span class="string">'%s%s'</span> % (url, <span class="string">'\n'</span>))</div><div class="line">    result_file.close()</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'\nUse like this:\n\t$python find.py [log_file_path]\nThe result will be output to usr.txt and url.txt.\n'</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    log_path = sys.argv[<span class="number">1</span>]</div><div class="line">    <span class="comment"># print get_id_topic_path('[I 130403 17:26:40] 123745187 200 GET /topic/034581 (8.8.9.9) 200.39ms')</span></div><div class="line">    usr_list = get_usr_list(log_path)</div><div class="line">    get_url_list(log_path, usr_list)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
<p>要注意的是可能每一天的临时文件中有重复的id，首先要做一下去重处理。附上Python列表去重的神方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tmp_list = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]</div><div class="line">new_list = &#123;&#125;.fromkeys(tmp_list).keys()</div></pre></td></tr></table></figure></p>
<p>到后面就是语言技巧的事了。找出在30个去重了的列表中都出现的元素，我是先把每个列表变成集合，利用集合的交运算，找出最终符合条件的用户id，写到文件中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">result = id_set_list[<span class="number">0</span>]</div><div class="line"><span class="keyword">for</span> id_set <span class="keyword">in</span> id_set_list:</div><div class="line">    result = result &amp; id_set</div><div class="line">    <span class="comment"># print result</span></div></pre></td></tr></table></figure></p>
<h3 id="附——测试脚本"><a href="#附——测试脚本" class="headerlink" title="附——测试脚本"></a>附——测试脚本</h3><p>正直当时学SQA，为了测试自己的代码，我还写了测试脚本，这么说也不准确，就是随机成了一些日志文件，往里面放了一些符合条件的数据，看脚本能不能找出来它们，来进行测试，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random, sys</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'\nUse like this:\n\t$python create_test_log.py [log_path]\nAnd the 30 * 24 log files for testing will be created in the log_path.\n'</span></div><div class="line">    sys.exit(<span class="number">0</span>)</div><div class="line"></div><div class="line">usr_list = [<span class="string">'19930418'</span>, <span class="string">'19930715'</span>, <span class="string">'20130607'</span>, <span class="string">'19920212'</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> day <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">31</span>):</div><div class="line">    <span class="keyword">for</span> hour <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">24</span>):</div><div class="line">        log_num = random.randint(<span class="number">1000</span>, <span class="number">10000</span>)</div><div class="line">        <span class="keyword">print</span> <span class="string">'Create %s logs in 2013-1-%s-%s'</span> % (log_num, str(day), str(hour))</div><div class="line">        log_file = open(<span class="string">'%s%s-%s-%s-%s.log'</span> % (sys.argv[<span class="number">1</span>], <span class="number">2013</span>, <span class="number">1</span>, str(day), str(hour)), <span class="string">'w'</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(log_num):</div><div class="line">            level = random.randint(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">            uid = random.randint(<span class="number">0</span>, <span class="number">9999999</span>)</div><div class="line">            path_base = random.randint(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">            path = random.randint(<span class="number">0</span>, <span class="number">9999999</span>)</div><div class="line">            status = random.randint(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">            method = random.randint(<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">            day_str = <span class="string">'0'</span> + str(day) <span class="keyword">if</span> day &lt; <span class="number">10</span> <span class="keyword">else</span> str(day)</div><div class="line">            hour_str = <span class="string">'0'</span> + str(hour) <span class="keyword">if</span> hour &lt; <span class="number">10</span> <span class="keyword">else</span> str(hour)</div><div class="line">            log = <span class="string">'[I 1301%s %s:%s:%s] %s %s %s /%s/%s (%s.%s.%s.%s) %sms\n'</span> % \</div><div class="line">                (day_str, \</div><div class="line">                    hour_str, \</div><div class="line">                    str(random.randint(<span class="number">1</span>, <span class="number">60</span>)), \</div><div class="line">                    str(random.randint(<span class="number">1</span>, <span class="number">60</span>)), \</div><div class="line">                    str(uid), \</div><div class="line">                    [<span class="string">'200'</span>, <span class="string">'302'</span>, <span class="string">'404'</span>][status], \</div><div class="line">                    [<span class="string">'POST'</span>, <span class="string">'GET'</span>, <span class="string">'DELETE'</span>][method], \</div><div class="line">                    [<span class="string">'topic'</span>, <span class="string">'answer'</span>, <span class="string">'question'</span>][path_base], \</div><div class="line">                    str(path), \</div><div class="line">                    str(random.randint(<span class="number">0</span>, <span class="number">255</span>)), \</div><div class="line">                    str(random.randint(<span class="number">0</span>, <span class="number">255</span>)), \</div><div class="line">                    str(random.randint(<span class="number">0</span>, <span class="number">255</span>)), \</div><div class="line">                    str(random.randint(<span class="number">0</span>, <span class="number">255</span>)), \</div><div class="line">                    str(random.random() * <span class="number">100</span>))</div><div class="line">            log_file.write(log)</div><div class="line">        <span class="keyword">for</span> usr <span class="keyword">in</span> usr_list:</div><div class="line">            log = <span class="string">'[I 1301%s %s:%s:%s] %s %s %s /%s/%s (%s.%s.%s.%s) %sms\n'</span> % \</div><div class="line">                (day_str, \</div><div class="line">                    hour_str, \</div><div class="line">                    str(random.randint(<span class="number">1</span>, <span class="number">60</span>)), \</div><div class="line">                    str(random.randint(<span class="number">1</span>, <span class="number">60</span>)), \</div><div class="line">                    usr, \</div><div class="line">                    [<span class="string">'200'</span>, <span class="string">'302'</span>, <span class="string">'404'</span>][status], \</div><div class="line">                    [<span class="string">'POST'</span>, <span class="string">'GET'</span>, <span class="string">'DELETE'</span>][method], \</div><div class="line">                    <span class="string">'topic'</span>, \</div><div class="line">                    <span class="string">'0101010101'</span>, \</div><div class="line">                    str(random.randint(<span class="number">0</span>, <span class="number">255</span>)), \</div><div class="line">                    str(random.randint(<span class="number">0</span>, <span class="number">255</span>)), \</div><div class="line">                    str(random.randint(<span class="number">0</span>, <span class="number">255</span>)), \</div><div class="line">                    str(random.randint(<span class="number">0</span>, <span class="number">255</span>)), \</div><div class="line">                    str(random.random() * <span class="number">100</span>))</div><div class="line">            log_file.write(log)</div><div class="line">            log = <span class="string">'[I 1301%s %s:%s:%s] %s %s %s /%s/%s (%s.%s.%s.%s) %sms\n'</span> % \</div><div class="line">            (day_str, \</div><div class="line">                hour_str, \</div><div class="line">                str(random.randint(<span class="number">1</span>, <span class="number">60</span>)), \</div><div class="line">                str(random.randint(<span class="number">1</span>, <span class="number">60</span>)), \</div><div class="line">                usr, \</div><div class="line">                [<span class="string">'200'</span>, <span class="string">'302'</span>, <span class="string">'404'</span>][status], \</div><div class="line">                [<span class="string">'POST'</span>, <span class="string">'GET'</span>, <span class="string">'DELETE'</span>][method], \</div><div class="line">                <span class="string">'topic'</span>, \</div><div class="line">                <span class="string">'00000000'</span>, \</div><div class="line">                str(random.randint(<span class="number">0</span>, <span class="number">255</span>)), \</div><div class="line">                str(random.randint(<span class="number">0</span>, <span class="number">255</span>)), \</div><div class="line">                str(random.randint(<span class="number">0</span>, <span class="number">255</span>)), \</div><div class="line">                str(random.randint(<span class="number">0</span>, <span class="number">255</span>)), \</div><div class="line">                str(random.random() * <span class="number">100</span>))</div><div class="line">            log_file.write(log)</div><div class="line">        log_file.close()</div></pre></td></tr></table></figure></p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>此时无声胜有声。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[知乎笔试（1）——富文本过滤]]></title>
      <url>http://blog.liushuaiko.be/blog/2013/06/29/zhihu-examination-1/</url>
      <content type="html"><![CDATA[<p>终于，收到了知乎的回复，一面就被拒了（此处应该有一个悲伤的表情）。不过也没什么遗憾了，申请了好多次，终于申请到了笔试和面试的机会。通过这次的经历，我知道了路还很长很长，想把这次的经历写下来，也算是一种纪念。<a id="more"></a></p>
<h3 id="笔试题一——富文本过滤"><a href="#笔试题一——富文本过滤" class="headerlink" title="笔试题一——富文本过滤"></a>笔试题一——富文本过滤</h3><p>当我收到知乎的笔试题时，很激动，因为真心很想去知乎，用颤抖的手打开邮件，里面有两道题，第一道是这样的：<br><img src="http://vars.qiniudn.com/zhihu_bishi_1.jpeg" alt=""><br>最开始才疏学浅，不知道富文本过滤要干些什么，去搜索了一番，大致知道了过滤是要对Html进行解析，去掉不合法的标签和字符。我最开始还想加上自动correct富文本的功能，比如如果标签不闭合，自动补全等等，但是记得那几天事情真心太多了，还有SQA的口试，没花太多的时间去完善代码。<br>知道了要干什么，就可以开始写了。我首先想到的肯定是要用到一个解析html库之类，跑一遍html，在解析html的过程中做一些处理。之前有用到过Python中的ElementTree解析过xml，首先去搜索了一番，找到了以下一些资料：<br><a href="http://stackoverflow.com/questions/2676872/how-to-parse-malformed-html-in-python-using-standard-libraries" target="_blank" rel="external">How to parse malformed HTML in python, using standard libraries</a><br>大致说Python里面有很多解析Html的库，内建的HtmlParser貌似是一种方法，但是它却经常在一些非常普通的html时会出现问题，如果你成功解决了这些问题，那么你很有可能重写了一个库——BeautifulSoup。靠谱的解析Html的方式大概有三种：<a href="http://codespeak.net/lxml//lxmlhtml.html" target="_blank" rel="external">lxml.html</a>，<a href="http://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="external">BeautifulSoup</a>，<a href="http://code.google.com/p/html5lib/" target="_blank" rel="external">html5lib</a>。<br>但是考虑到可能面试官不会去安装这些库，我还是决定用python内建的HtmlParser去完成这道题。去搜了一下这个类的使用方法，发现原理跟Java使用SAX方式解析XML是一样的，都是提供了一系列的回调方法，使用时需要继承自相应的类，覆盖这些方法，添加上你自己的处理。比如遇到起始的tag有一个回调的方法，遇到文本有一个回调的方法，还需要一个变量来保存上一次遇到的tag，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> HTMLParser, sys</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditorParser</span><span class="params">(HTMLParser.HTMLParser)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, standard)</span>:</span></div><div class="line">        HTMLParser.HTMLParser.__init__(self)</div><div class="line">        self.standard = standard</div><div class="line">        self.clean_text = []</div><div class="line">        self.pre_tag = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_starttag</span><span class="params">(self, tag, attrs)</span>:</span></div><div class="line">        <span class="keyword">if</span> tag <span class="keyword">in</span> self.standard:</div><div class="line">            self.clean_text.append(<span class="string">'&lt;'</span>)</div><div class="line">            self.clean_text.append(tag)</div><div class="line">            <span class="keyword">for</span> name, val <span class="keyword">in</span> attrs:</div><div class="line">                <span class="keyword">if</span> self.standard[tag] <span class="keyword">and</span> name <span class="keyword">in</span> self.standard[tag]:</div><div class="line">                    exp = <span class="string">' %s="%s"'</span> % (name, val)</div><div class="line">                    self.clean_text.append(exp)</div><div class="line">            self.clean_text.append(<span class="string">'&gt;'</span>)</div><div class="line">            self.pre_tag = tag</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_data</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.pre_tag <span class="keyword">in</span> self.standard:</div><div class="line">            self.clean_text.append(data)</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_endtag</span><span class="params">(self, tag)</span>:</span></div><div class="line">        <span class="keyword">if</span> tag <span class="keyword">in</span> self.standard:</div><div class="line">            self.clean_text.append(<span class="string">'&lt;/&#123;0&#125;&gt;'</span>.format(tag))</div><div class="line">            self.pre_tag = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_clean_text</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(self.clean_text)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'\nUse like this:\n\t$python filter.py [html_file_to_handle]\nThe clean html will be output to a new html file.\n'</span></div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    html = open(sys.argv[<span class="number">1</span>], <span class="string">'r'</span>)</div><div class="line"></div><div class="line">    legal_tag_attr = &#123;<span class="string">'a'</span> : [<span class="string">'href'</span>, <span class="string">'title'</span>], <span class="string">'abbr'</span> : [<span class="string">'title'</span>], <span class="string">'acronym'</span> : [<span class="string">'title'</span>], <span class="string">'b'</span> : <span class="keyword">None</span>, <span class="string">'blockquote'</span> : [<span class="string">'cite'</span>], <span class="string">'cite'</span> : <span class="keyword">None</span>, \</div><div class="line">                        <span class="string">'code'</span> : <span class="keyword">None</span>, <span class="string">'del'</span> : [<span class="string">'datetime'</span>], <span class="string">'em'</span> : <span class="keyword">None</span>, <span class="string">'i'</span> : <span class="keyword">None</span>, <span class="string">'q'</span> :[<span class="string">'cite'</span>], <span class="string">'strike'</span> : <span class="keyword">None</span>, <span class="string">'strong'</span> : <span class="keyword">None</span>, <span class="string">'pre'</span> : <span class="keyword">None</span>&#125;</div><div class="line"></div><div class="line">    editorParser = EditorParser(legal_tag_attr)</div><div class="line">    editorParser.feed(html.read())</div><div class="line">    clean_text = editorParser.get_clean_text()</div><div class="line"></div><div class="line">    editorParser.close()</div><div class="line">    html.close()</div><div class="line"></div><div class="line">    <span class="comment"># print clean_text</span></div><div class="line"></div><div class="line">    clean_html = open(sys.argv[<span class="number">1</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'_clean.html'</span>, <span class="string">'w'</span>)</div><div class="line">    clean_html.write(clean_text)</div><div class="line">    clean_html.close()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
<p>这样一个简单的过滤器就写完了，功能比较简单，仅仅能去掉不合法的标签以及不合法的属性，没有纠错功能。</p>
<h3 id="样例输入与输出"><a href="#样例输入与输出" class="headerlink" title="样例输入与输出"></a>样例输入与输出</h3><p>样例的输入：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">abbr</span>&gt;</span>This is legal abbr text.<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.zhihu.com"</span> <span class="attr">id</span>=<span class="string">"bad_id"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">strong</span> <span class="attr">name</span>=<span class="string">"bad_name"</span> <span class="attr">id</span>=<span class="string">"bad_id"</span> <span class="attr">class</span>=<span class="string">"bad_class"</span>&gt;</span>This is a legal strong href<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>This is a bad head<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">acronym</span> <span class="attr">title</span>=<span class="string">"acronym titel"</span>&gt;</span><span class="tag">&lt;/<span class="name">acronym</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>This is bad body.<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span> <span class="attr">class</span>=<span class="string">"bad_class"</span>&gt;</span>This is bad title.<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>经过过滤后的样例输出：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">abbr</span>&gt;</span>This is legal abbr text.<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.zhihu.com"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>This is a legal strong href<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">acronym</span> <span class="attr">title</span>=<span class="string">"acronym titel"</span>&gt;</span><span class="tag">&lt;/<span class="name">acronym</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="">HtmlParser</a>提供的功能真的很少，只提供了最基本的功能，要对HTML做一些深入的操作还得用其他的lib。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言指针声明探秘]]></title>
      <url>http://blog.liushuaiko.be/blog/2013/04/22/C-pointer/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我对C指针的理解一直停留在：指针本身是一块内存，它保存了一块内存的地址，可以引用，但是最近在读代码的时候，各种指针的声明搞得我异常苦恼，赶紧去学习了一番，也只是明白了最基本的使用，总结如下。<a id="more"></a></p>
<h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><p>指针的基本使用正如前言中说的，先看这样一段代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> * p;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p的地址:%d\n"</span>,&amp;p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"未初始化时p的内容:%d\n"</span>,p);</div><div class="line"><span class="comment">//  printf("未初始化访问p指向的内存:%d\n",*p); // 这行代码访问了个野指针，必然发生段错误</span></div><div class="line">    p = &amp;i;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"--初始化p完毕--\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p里面保存的地址:%d\n"</span>,p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p指向的内存的内容:%d\n"</span>,*p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p的大小:%d\n"</span>,<span class="keyword">sizeof</span>(p));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p指向的内存大小:%d\n"</span>,<span class="keyword">sizeof</span>(*p));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">p的地址:1439276008</div><div class="line">未初始化时p的内容:0</div><div class="line">--初始化p完毕--</div><div class="line">p里面保存的地址:1439276020</div><div class="line">p指向的内存的内容:10</div><div class="line">p的大小:8</div><div class="line">p指向的内存大小:4</div></pre></td></tr></table></figure></p>
<p>这就是指针的基本使用，可用下图来说明：</p>
<p><img src="http://vars.qiniudn.com/c_pointer_1.png" alt=""></p>
<h3 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h3><p>首先看这两个声明语句：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> (*a) [<span class="number">100</span>];</div><div class="line"><span class="keyword">char</span>* a [<span class="number">100</span>];</div></pre></td></tr></table></figure></p>
<p>第一个是声明了一个指向有100个char元素的数组的指针（注意和指向数组首地址的char型指针分开）；第二个是声明了一个有100个char<em>元素的数组，数组里面装的是char </em>。<br>为了理解，我们来看这样一段代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>][<span class="number">100</span>];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof(arr[0]) = %lu\n"</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof(arr[0][0]) = %lu\n"</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]));</div><div class="line">    <span class="keyword">int</span> *p;</div><div class="line">    <span class="keyword">int</span> (*q)[<span class="number">100</span>];</div><div class="line">    p = &amp;arr[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    q = &amp;arr[<span class="number">0</span>];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p = %d\n"</span>,p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"q = %d\n"</span>,q);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof((*p)) = %lu\n"</span>, <span class="keyword">sizeof</span>((*p)));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof((*q)) = %lu\n"</span>, <span class="keyword">sizeof</span>((*q)));</div><div class="line">    p++;</div><div class="line">    q++;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"after add 1, p = %d\n"</span>, p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"after add 1, q = %d\n"</span>, q);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码运行后结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sizeof(arr[0]) = 400</div><div class="line">sizeof(arr[0][0]) = 4</div><div class="line">p = 1411443800</div><div class="line">q = 1411443800</div><div class="line">sizeof((*p)) = 4</div><div class="line">sizeof((*q)) = 400</div><div class="line">after add 1, p = 1411443804</div><div class="line">after add 1, q = 1411444200</div></pre></td></tr></table></figure></p>
<p>因为内存是线性的，C中所谓的二维数组不过是数组的数组，arr这个数组有10个元素，每个元素是一个长度为100的数组，在程序员的脑子里面，arr是一个有10行100列的二维数组。<br>代码里的p是一个指向int型的指针，q是一个指向“有100个int的int数组”的指针。所以p和q的初始化方式是不同的，但是开始的时候他们都指向了arr这个数组的数组的首地址（初始时是相等的），但是到后面分别执行自增操作之后，因为它们的类型不同，因此根据指针自增运算的含义，他们移动的步长也不相同，p移动了<code>sizeof(int)</code>个字节，而q移动了<code>sizeof(int[100])</code>个字节，于是它们的值也大不相同，可以用下图来说明：</p>
<p><img src="http://vars.qiniudn.com/c_pointer_2.png" alt=""></p>
<p>另外要注意的就是字符二维数组的声明：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span>* str[<span class="number">2</span>] = &#123;<span class="string">"liushuai"</span>,<span class="string">"kobe"</span>&#125;;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>,str[<span class="number">0</span>],str[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果显然：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">liushuai kobe</div></pre></td></tr></table></figure></p>
<p>以上是合法的字符二维数组的声明，str是一个有两个元素的数组，每个元素的类型是一个char*，结合上面所讲的，应该不难理解。</p>
<h3 id="返回指针的函数和函数指针"><a href="#返回指针的函数和函数指针" class="headerlink" title="返回指针的函数和函数指针"></a>返回指针的函数和函数指针</h3><p>来看下面两个声明语句：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span>* <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</div></pre></td></tr></table></figure></p>
<p>这个应该比较好理解，类比着装有指针的数组的声明<code>char* a[100]</code>，这是个函数声明，声明了一个名字为foo的函数，这个函数接受一个类型为int的参数，返回一个指向int型的指针。<br>再看下面的声明：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> (*bar)();</div></pre></td></tr></table></figure></p>
<p>类比着数组的声明，这个语句声明了一个指向函数的指针bar，它指向的函数要求返回值为void，且不接受任何参数。这是一个比较简单的函数的函数指针的声明。<br>函数既然可以返回一个指针，那么一个函数能不能返回一个指向函数的指针呢？答案是肯定的，看，指针是多么灵活。刚刚接触可能会有点不适应，我们来看一个例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> (*foo(<span class="keyword">int</span>)) (<span class="keyword">double</span>*,<span class="keyword">char</span>);</div></pre></td></tr></table></figure></p>
<p>类比着上面的讲解，我们知道，这个语句声明了一个函数foo，它接受一个int类型的参数，返回一个指向函数的指针，要求指向的函数具有这样的形式：接受一个double类型的指针和char型的变量作为参数，返回一个int类型的值。<br>我们可以用C中的typedef简化这个声明：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*ptf)</span> <span class="params">(<span class="keyword">double</span>*, <span class="keyword">char</span>)</span></span>;</div><div class="line"><span class="function">ptf <span class="title">foo</span><span class="params">(<span class="keyword">int</span> )</span></span>;</div></pre></td></tr></table></figure></p>
<p>注意：typedef和#define是不同的，typedef是给“这样”的指针起了一个别名ptf，而不是简单的进行宏替换。<br>好吧，我们接着来个更变态的，如果一个函数的参数和返回值都是函数指针，那么声明就会更复杂，例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> (*signal (<span class="keyword">int</span> sig, <span class="keyword">void</span> (*func) (<span class="keyword">int</span> siga)) ) ( <span class="keyword">int</span> siga );</div></pre></td></tr></table></figure></p>
<p>其实慢点分析也不难，我们可以用typedef来简化：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*p_sig)</span> <span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="function">p_sig <span class="title">signal</span><span class="params">(<span class="keyword">int</span> sig, p_sig func)</span></span>;</div></pre></td></tr></table></figure></p>
<p>signal这个函数的参数func是一个函数指针，返回了一个函数指针，且两种指针要求指向的函数具有同一种形式（接受一个int型的参数，返回空值）。</p>
<h3 id="通过函数指针调用函数"><a href="#通过函数指针调用函数" class="headerlink" title="通过函数指针调用函数"></a>通过函数指针调用函数</h3><p>还是通过一个例子来说明问题：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMyName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">void</span> (*f)();</div><div class="line">    f = printMyName;</div><div class="line">    f();</div><div class="line">    f = &amp;printMyName;</div><div class="line">    f();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMyName</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"liushuaikobe\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>是不是很容易呢。注意用“&amp;函数名”和“函数名”初始化一个函数指针都是合法的，因为C中函数名会被转换为指向这个函数的指针。<br>指针真是充满智慧的产物，通过函数指针，可以轻松实现面向对象语言中多态等一些高级特性（例如Java的接口，C++的虚函数），真的太美妙了。<br>对于大神，这些东西可能都是小儿科，但是本人C真的没怎么用过，搞懂了这些，我也很高兴了。<br>最后送大家一句话：</p>
<blockquote>
<p>不要因为走得太远，就忘了自己当初为什么出发。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言const修饰符探秘]]></title>
      <url>http://blog.liushuaiko.be/blog/2013/04/20/C-const/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>C语言是我接触的第一门程序设计语言，当时还很傻很天真，后来迅速被各种高级语言洗脑，但是不得不说，C的地位真的无可撼动。     const修饰符在C语言中很常用，但是最近读代码的时候常常搞不清楚，搜索了一番，做个总结。<a id="more"></a></p>
<h3 id="整体认知"><a href="#整体认知" class="headerlink" title="整体认知"></a>整体认知</h3><p>const是常量修饰符，代码中设法阻止变量被改变，这个时候可以使用const关键字。必须在声明const变量就初始化，因此，类似与这样的声明是错误的：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> i;</div><div class="line">i = <span class="number">8</span>;</div></pre></td></tr></table></figure></p>
<p>编译器会报：<code>error: assignment of read-only variable ‘i’</code>。<br>我们必须要这样：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">8</span>;</div></pre></td></tr></table></figure></p>
<h3 id="const修饰符的典型作用"><a href="#const修饰符的典型作用" class="headerlink" title="const修饰符的典型作用"></a>const修饰符的典型作用</h3><ol>
<li>最基本的，保护被修饰的作用，防止以外修改</li>
<li>编译器通常不为const常量分配存储空间，而是将它们保存在符号表中，这使得它成为一个编译期间的常量，没有了存储和读取内存的操作，效率很高</li>
<li>使程序中的错误在编译的时候就被报出（因为2）。</li>
</ol>
<p>下面会一一举例说明。</p>
<h3 id="const修饰符的修饰对象探秘"><a href="#const修饰符的修饰对象探秘" class="headerlink" title="const修饰符的修饰对象探秘"></a>const修饰符的修饰对象探秘</h3><h4 id="修饰普通变量"><a href="#修饰普通变量" class="headerlink" title="修饰普通变量"></a>修饰普通变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">8</span>;</div><div class="line"><span class="keyword">int</span> <span class="keyword">const</span> i = <span class="number">8</span>;</div></pre></td></tr></table></figure>
<p>上面两者是等价的，都是声明了一个值为5的常量。</p>
<h4 id="修饰指针"><a href="#修饰指针" class="headerlink" title="修饰指针"></a>修饰指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p;</div><div class="line"><span class="keyword">int</span> <span class="keyword">const</span> *p;</div></pre></td></tr></table></figure>
<p>上面两个是等价的，都声明了一个<code>const int</code>类型的指针，也就是说，程序里面不能改变*p的值，但是可以改变p的值（即可以改变指针的指向）。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;n;</div></pre></td></tr></table></figure></p>
<p>这个是声明了一个const的指针，const是修饰指针的。也即p的值不允许改变（指针就一定得指向n那块内存，不能改变p的指向），但是*p的值可以改变。</p>
<h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><ul>
<li>const在*的左侧，const修饰指针所指的变量</li>
<li>const在*的右侧，const修饰指针本身</li>
</ul>
<h3 id="带const修饰的函数形参"><a href="#带const修饰的函数形参" class="headerlink" title="带const修饰的函数形参"></a>带const修饰的函数形参</h3><p>首先要明确一点，非指针参数（值传递）传给函数的是参数的一份拷贝，本身就不会改变参数的值，所以加上const是没有意义的，例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a)</span></span></div><div class="line">&#123;</div><div class="line">    a = a + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">34</span>;</div><div class="line">    add(temp);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,temp);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>虽然编译过不去，但是，就算不加const，在函数体中成功尝试修改了a，但是在本例中temp的值也是不变的，因为函数中修改的是a的一个拷贝（值传递）。</p>
<p>先看这个函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> * p)</span></span></div><div class="line">&#123;</div><div class="line">    *p += <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译时就会报错，因为我们试图修改一个常量的值。<br>带const的形参是不允许在函数体内修改其值的（只读）。<br>不过一旦这样写就没辙了：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> * p)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> *r = p;</div><div class="line">    *r += <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>虽然编译器编译时会告诉你：<code>warning: initialization discards qualifiers from pointer target type</code>，说你赋值丢了一个属性修饰符，但是运行时还是可以改变p所指向内存的值。</p>
<p>再看这样一个例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> *<span class="keyword">const</span> p1)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">    p1 = &amp;a;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>显然编译不过去。这样做本来是想传进来一个const的指针，但实际上，这样是没有意义的。指针作为参数时也是传进去一个指针的拷贝。所以即使不加const，函数体中也是修改的这个“指针的拷贝”。这个函数实际上和本小节开头的例子是没区别的（但是这个指针的拷贝所指向的内容可是和被拷贝的东西是一样的）。<br>可以用下面的图说明：</p>
<p><img src="http://vars.qiniudn.com/c_const_1.png" alt=""></p>
<p>和这个是类似的：</p>
<p><img src="http://vars.qiniudn.com/c_const_2.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VxWorks中基于消息队列实现C/S通信]]></title>
      <url>http://blog.liushuaiko.be/blog/2013/04/17/vxworks-mq-cs/</url>
      <content type="html"><![CDATA[<h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p>在VxWorks中实现基于消息队列的C/S通信主要用到了Wind内核中的消息队列API，msgQLib。<br>这个库里面的发送消息和接受消息的API分别为：<a id="more"></a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">STATUS <span class="title">msgQSend</span><span class="params">(MSG_Q_ID msgQId, <span class="keyword">char</span> * buffer, UNIT nBytes, <span class="keyword">int</span> timeout, <span class="keyword">int</span> priority)</span></span></div><div class="line"><span class="comment">// 当有任务正在等待某个消息的到来，则被发送的消息立即提交给第一个等待的任务；否则，消息插入消息队列，当消息队列满时，任务被阻塞</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> <span class="title">msgQReceive</span><span class="params">(MSG_Q_ID msgQId, <span class="keyword">char</span> * buffer, UNIT maxNBytes, <span class="keyword">int</span> timeout)</span></div><div class="line"><span class="comment">// 当有消息在消息队列上，第一个消息被接受；否则调用者被阻塞，进入目标队列的任务队列排队（基于优先级/FIFO）</span></div></pre></td></tr></table></figure></p>
<p>其中两个函数的timeout参数说明：</p>
<ul>
<li>对于<code>msgQSend</code>，当消息队列满时，发送者被阻塞，等待时间最长为timeout个tick。</li>
<li>对于<code>msgQReceive</code>，当消息队列为空时，接受者被阻塞，等待时间最长为timeout个tick。</li>
</ul>
<p>其中timeout</p>
<ul>
<li>为<code>NO_WAIT</code>，则不等待，立即返回。</li>
<li>为<code>WAIT_FOREVER</code>，则一直等待下去，知道队列为非满（对于发送）后非空（对于接受）</li>
<li>为某个整形，则等待timeout个ticks，超过时限，则返回。</li>
</ul>
<p>使用消息队列实现的C/S通信模式示意图为：</p>
<p><img src="http://vars.qiniudn.com/vxworks_1.png?imageView2/2/w/450" alt=""></p>
<p>很直观吧。这里要明确的一点是，若从空队列读消息或者向满队列发消息的任务都会被阻塞，阻塞的时长由timeout决定。<br>要想通过消息队列实现两个任务的全双工通信，至少需要两个消息队列。</p>
<h3 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h3><p>程序设计很简单，但是在设计程序的时候还要明确：Wind内核默认采用<strong>基于优先级的抢占式调度（Priority-based preemptive scheduling）</strong>。<br>什么意思呢，系统中每个任务都拥有一个优先级，任意时刻，内核将CPU分给处于就绪态的优先级最高的任务运行，这是“基于优先级的”；一旦内核发现有一个比当前正在运行的任务优先级高的任务就绪，内核立即保存当前任务的上下文，切换到这个高优先级任务的上下文中运行，这是“抢占”，在接下去的程序修改客户端和服务端的优先级导致的运行结果不一致，可以非常直观地看出这一调度策略的运行。<br>但是这种任务调度策略有缺点啊。假如现在有多个相同优先级的任务要共享一台处理器时，如果某个正在执行的任务永远不被阻塞，那么这个任务将一直独占处理器（大家优先级一致，谁也无法抢占），这样其他相同优先级的任务就没有机会得到执行。为了解决这个缺陷，wind内核还采用轮转调度来配合基于抢占式的优先级调度。就是为了让优先级相同的（优先级高的仍然可以抢占轮转中的优先级低的任务）、处于就绪态的任务公平地共享CPU，VxWorks主要通过调用<code>kernelTimeSlice()</code>来实现轮转调度，这里不再赘述。</p>
<p>然后我们可以编写代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vxWorks.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"taskLib.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"msgQLib.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sysLib.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_TASK_PRI 100</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_TASK_PRI 101</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK_STACK_SIZE 5000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MSG_NUM 3</span></div><div class="line"></div><div class="line">LOCAL MSG_Q_ID requestQId;</div><div class="line">LOCAL MSG_Q_ID response1QId;</div><div class="line">LOCAL MSG_Q_ID response2QId;</div><div class="line"></div><div class="line">LOCAL <span class="keyword">int</span> notDone;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> msg</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> tid;</div><div class="line">    <span class="keyword">int</span> what;</div><div class="line">&#125;MSG;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">LOCAL STATUS <span class="title">serverTask</span><span class="params">()</span></span>;</div><div class="line"><span class="function">LOCAL STATUS <span class="title">clientTask</span><span class="params">(<span class="keyword">int</span> cid,<span class="keyword">int</span> value)</span></span>;</div><div class="line"></div><div class="line"><span class="function">STATUS <span class="title">mMain</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    notDone = <span class="number">1</span>;</div><div class="line">    <span class="comment">/* create request Queue */</span></div><div class="line">    <span class="keyword">if</span>((requestQId = msgQCreate(MSG_NUM * <span class="number">2</span> + <span class="number">1</span>, <span class="keyword">sizeof</span>(MSG), MSG_Q_FIFO)) == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"Error on creating requestQ"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* create response Queue */</span></div><div class="line">    <span class="keyword">if</span>((response1QId = msgQCreate(MSG_NUM + <span class="number">1</span>, <span class="keyword">sizeof</span>(MSG), MSG_Q_FIFO)) == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"Error on creating responseQ1"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((response2QId = msgQCreate(MSG_NUM + <span class="number">1</span>, <span class="keyword">sizeof</span>(MSG), MSG_Q_FIFO)) == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"Error on creating responseQ2"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* spawn server task */</span></div><div class="line">    <span class="keyword">if</span>(taskSpawn(<span class="string">"tServerTask"</span>, SERVER_TASK_PRI, <span class="number">0</span>, TASK_STACK_SIZE, (FUNCPTR)serverTask,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) == ERROR)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"Error on spawning tServerTask"</span>);</div><div class="line">        <span class="keyword">return</span> (ERROR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* spawn client task */</span></div><div class="line">    <span class="keyword">if</span>(taskSpawn(<span class="string">"tClientTask_1"</span>, CLIENT_TASK_PRI, <span class="number">0</span>, TASK_STACK_SIZE, (FUNCPTR)clientTask,<span class="number">1</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) == ERROR)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"Error on spawning tClientTask_1"</span>);</div><div class="line">        <span class="keyword">return</span> (ERROR);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(taskSpawn(<span class="string">"tClientTask_2"</span>, CLIENT_TASK_PRI, <span class="number">0</span>, TASK_STACK_SIZE, (FUNCPTR)clientTask,<span class="number">2</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) == ERROR)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"Error on spawning tClientTask_2"</span>);</div><div class="line">        <span class="keyword">return</span> (ERROR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* wait tasks*/</span></div><div class="line">    <span class="keyword">while</span>(notDone)</div><div class="line">    &#123;</div><div class="line">        taskDelay(sysClkRateGet());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(msgQDelete(requestQId) == ERROR || msgQDelete(response1QId) == ERROR || msgQDelete(response2QId) == ERROR)</div><div class="line">    &#123;</div><div class="line">        perror(<span class="string">"Error in deleting msgQ"</span>);</div><div class="line">        <span class="keyword">return</span> (ERROR);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (OK);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* server Task */</span></div><div class="line"><span class="function">STATUS <span class="title">serverTask</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">    MSG msg;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\nI'm server task, my task id = %d.\n"</span>,taskIdSelf());</div><div class="line">    <span class="comment">/* read message from request Queue */</span></div><div class="line">    <span class="keyword">while</span>(num++ &lt; MSG_NUM * <span class="number">2</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"--&gt;Num of request Queue:%d\n"</span>, msgQNumMsgs(requestQId));</div><div class="line">        <span class="keyword">if</span>((msgQReceive(requestQId, (<span class="keyword">char</span> *)&amp;msg, <span class="keyword">sizeof</span>(MSG), WAIT_FOREVER)) == ERROR)&#123;</div><div class="line">            perror(<span class="string">"serverTask Error on receiving the msg"</span>);</div><div class="line">            <span class="keyword">return</span> (ERROR);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* print and add 1 to msg.what */</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"serverTask receive msg from %d, msg.what = %d\n"</span>, msg.tid, msg.what++);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* response to the client */</span></div><div class="line">        <span class="keyword">switch</span>(msg.tid)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">if</span>((msgQSend(response1QId, (<span class="keyword">char</span> *)&amp;msg, <span class="keyword">sizeof</span>(MSG), WAIT_FOREVER, MSG_PRI_NORMAL)) == ERROR)</div><div class="line">                &#123;</div><div class="line">                    perror(<span class="string">"Error in sending the message to responsQ1."</span>);</div><div class="line">                    <span class="keyword">return</span>(ERROR);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"serverTask sending to responsQ1 with value %d.\n"</span>, msg.what);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                <span class="keyword">if</span>((msgQSend(response2QId, (<span class="keyword">char</span> *)&amp;msg, <span class="keyword">sizeof</span>(MSG), WAIT_FOREVER, MSG_PRI_NORMAL)) == ERROR)</div><div class="line">                &#123;</div><div class="line">                    perror(<span class="string">"Error in sending the message to responsQ2."</span>);</div><div class="line">                    <span class="keyword">return</span>(ERROR);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"serverTask sending to responsQ2 with value %d.\n"</span>, msg.what);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                perror(<span class="string">"Error when response to the msg."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (OK);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* client Task */</span></div><div class="line"><span class="function">STATUS <span class="title">clientTask</span><span class="params">(<span class="keyword">int</span> cid,<span class="keyword">int</span> value)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">    MSG msg;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"I am client task%d, my task id = %d.\n"</span>, cid, taskIdSelf());</div><div class="line">    <span class="comment">/* sending message to request Queue. */</span></div><div class="line">    <span class="keyword">while</span> (num++ &lt; MSG_NUM)</div><div class="line">    &#123;</div><div class="line">        msg.tid = cid;</div><div class="line">        msg.what = value;</div><div class="line">        <span class="keyword">if</span>((msgQSend(requestQId, (<span class="keyword">char</span> *)&amp;msg, <span class="keyword">sizeof</span>(MSG), WAIT_FOREVER, MSG_PRI_NORMAL)) == ERROR)</div><div class="line">        &#123;</div><div class="line">            perror(<span class="string">"Error on sending the message."</span>);</div><div class="line">            <span class="keyword">return</span>(ERROR);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"clientTask%d sending to requestQ with value%d.\n"</span>, msg.tid, msg.what);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    num = <span class="number">0</span>;</div><div class="line">    <span class="comment">/* receiving message from its response Queue own. */</span></div><div class="line">    <span class="keyword">switch</span>(cid)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            <span class="keyword">while</span>(num++ &lt; MSG_NUM)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>((msgQReceive(response1QId,(<span class="keyword">char</span> *)&amp;msg, <span class="keyword">sizeof</span>(MSG), WAIT_FOREVER)) == ERROR)</div><div class="line">                &#123;</div><div class="line">                    perror(<span class="string">"Error on receiving the message from respons1Q."</span>);</div><div class="line">                    <span class="keyword">return</span> (ERROR);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"clientTask%d receiving msg from respons1Q with value%d.\n"</span>, msg.tid, msg.what);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            <span class="keyword">while</span>(num++ &lt; MSG_NUM)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>((msgQReceive(response2QId,(<span class="keyword">char</span> *)&amp;msg, <span class="keyword">sizeof</span>(MSG), WAIT_FOREVER)) == ERROR)</div><div class="line">                &#123;</div><div class="line">                    perror(<span class="string">"Error on receiving the message from respons2Q."</span>);</div><div class="line">                    <span class="keyword">return</span> (ERROR);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"clientTask%d receiving msg from respons2Q with value%d.\n"</span>, msg.tid, msg.what);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            perror(<span class="string">"Error when receive message from response Queue."</span>);</div><div class="line">    &#125;</div><div class="line">    notDone = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span>(OK);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Tornado中打开shell，指定入口函数，运行后：我们可以在模拟器中观察到运行结果：<br><img src="http://vars.qiniudn.com/vxworks_2.png" alt=""><br>在windview的上下文切换视图中查看客户端和服务端任务的运行情况：<br><img src="http://vars.qiniudn.com/vxworks_3.png" alt=""></p>
<h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>在程序中是先将服务端的任务spawn出来，接着再去spawn两个客户端的任务。但是由于程序中设置了客户端的优先级高于服务端的优先级，服务端刚被spawn出来就被挂起了，两个客户端优先级一致，他们顺序执行，先创建出的客户端向request队列发送了三条Message后（这时虽然服务端被唤醒，但是优先级低，处于挂起状态），尝试去response1队列中读取消息，但当时该队列为空，于是这个客户端被阻塞，后创建出的客户端运行过程相同，最后也被阻塞；这时服务端得到运行，从request队列中读取消息，发现是客户端1发送的，于是服务端做了一定的处理之后放到response1队列中，接着客户端1由阻塞态被唤醒，并且它的优先级高于服务端，而Vxworks的任务调度是基于优先级的抢占式任务调度，于是它立即得到执行，从response1队列中读取一条服务端的答复消息，做出处理后，再尝试去response1队列中读取下一条信息，发现没有信息后又被阻塞，服务端继续得到执行，即去request队列中读取下一条消息，又重复了上述过程；客户端2同理。</p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>修改客户端和服务端的优先级一致：</p>
<p><img src="http://vars.qiniudn.com/vxworks_4.png" alt=""></p>
<p><img src="http://vars.qiniudn.com/vxworks_5.png" alt=""><br>修改为服务端的优先级高于客户端的优先级：</p>
<p><img src="http://vars.qiniudn.com/vxworks_6.png" alt=""></p>
<p><img src="http://vars.qiniudn.com/vxworks_7.png" alt=""><br>明白了VxWorks的任务调度机制和消息队列API的执行过程，理解这两个结果也就不难了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C语言打印杨辉三角]]></title>
      <url>http://blog.liushuaiko.be/blog/2013/03/15/C-yanghui-triangle/</url>
      <content type="html"><![CDATA[<p>看到标题是不是想：这么水的题目也往blog里面写，是不是想赚积分想疯了？</p>
<a id="more"></a>
<p>好吧，事情是这样的：<br>学院有一个实习派遣考试，官方报道，考试不通过不允许校外实习。<br>题目非常水，全是基础知识，通过做这我更加坚定了之前的想法，总用Java、Python啥的，会让我越来越“弱”。求一个int数组的长度，第一反应是<code>len(array)</code>，接着是<code>array.length</code>，最后好一通想要<code>sizeof(array)/sizeof(int)</code>，囧。最让我无奈的是，二次函数求根公式竟然怎么想都想不出来，我去，这通推导！</p>
<p>有一题是那种还挺像笔试题的，让你只用一个一维数组打印杨辉三角，输出三角行数用户输入，小于100，数组长度小于100，还真想了一会，好吧，就随便写一下吧，来鞭策自己。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_triangle</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; i++)</div><div class="line">    &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, j, N;</div><div class="line">    <span class="keyword">int</span> a[<span class="number">100</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> old, s;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Input the number of line:"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">    &#123;</div><div class="line">            old = a[<span class="number">0</span>];</div><div class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++)</div><div class="line">            &#123;</div><div class="line">                    s = old;</div><div class="line">                    old = a[j + <span class="number">1</span>];</div><div class="line">                    a [j + <span class="number">1</span>] = s + old;</div><div class="line">            &#125;</div><div class="line">            print_triangle(a,i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://vars.qiniudn.com/c_yanghui_sanjiao.png" alt=""></p>
<p>程序设计基本功不能忽视，加油吧少年们。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android内核的编译与裁剪]]></title>
      <url>http://blog.liushuaiko.be/blog/2013/03/07/androidnei-kernel-compile/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>如果我们仅仅对Android内核感兴趣，我们可以选择合适的Android内核下载并编译。<a id="more"></a><br>可供选择的内核源码有很多版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git clone https://android.googlesource.com/kernel/common.git</div><div class="line">$ git clone https://android.googlesource.com/kernel/exynos.git</div><div class="line">$ git clone https://android.googlesource.com/kernel/goldfish.git</div><div class="line">$ git clone https://android.googlesource.com/kernel/msm.git</div><div class="line">$ git clone https://android.googlesource.com/kernel/omap.git</div><div class="line">$ git clone https://android.googlesource.com/kernel/samsung.git</div><div class="line">$ git clone https://android.googlesource.com/kernel/tegra.git</div></pre></td></tr></table></figure></p>
<ul>
<li>goldfish这个project包含了适合于模拟器平台的源码；</li>
<li>msm这个project包含了适合于ADP1、ADP2、Nexus One、Nexus 4的源码，并且可以作为高通MSM芯片组开发定制内核工作的起始点；</li>
<li>omap这个project包含了适合于PandaBoard、Galaxy Nexus的源码，并且可以作为德州仪器OMAP芯片组内核开发定制工作的起始点；</li>
<li>samsung这个project包含了适合于Nexus S的源码，并且可以作为三星蜂鸟芯片组内核开发定制工作的起始点；</li>
<li>tegra这个project包含了适合于Xoom和Nexus 7的源码，并且可以作为英伟达图睿芯片组内核开发定制工作的起始点；</li>
<li>exynos这个project包含了适合与Nexus 10的源码，并且可以作为三星猎户座芯片组内核开发定制工作的起始点。</li>
</ul>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>1.我选择的是goldfish这个版本，也即把goldfish给clone下来即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir AndroidKernel</div><div class="line">$ git clone https://android.googlesource.com/kernel/goldfish.git</div></pre></td></tr></table></figure></p>
<p>需要等待一会，视网速而定：</p>
<p><img src="http://vars.qiniudn.com/android_kernel_compile_1.png" alt=""></p>
<p>2.接着进入goldfish，发现里面没有文件，别急，我们还要选择分支，下载真正的源码：<br>可以通过执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -a</div></pre></td></tr></table></figure></p>
<p>来查看所有分支，接着：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b android-goldfish-2.6.29 origin/android-goldfish-2.6.29</div></pre></td></tr></table></figure></p>
<p>下载源码：</p>
<p><img src="http://vars.qiniudn.com/android_kernel_compile_2.png" alt=""></p>
<p>3.下载编译所必需的prebuilt工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://android.googlesource.com/platform/prebuilt</div></pre></td></tr></table></figure></p>
<p>等待一会：</p>
<p><img src="http://vars.qiniudn.com/android_kernel_compile_3.png" alt=""></p>
<p>4.将prebuilt工具添加到环境变量中以备后续使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ export PATH=$(pwd)/prebuilt/linux-x86/toolchain/arm-eabi-4.4.3/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>5.接着配置其他必要的环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ export ARCH=arm</div><div class="line">$ export SUBARCH=arm</div><div class="line">$ export CROSS_COMPILE=arm-eabi-</div></pre></td></tr></table></figure></p>
<p>6.我们执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make goldfish_defconfig</div></pre></td></tr></table></figure></p>
<p>来在内核源码根目录下生成一个默认的.config文件：</p>
<p><img src="http://vars.qiniudn.com/android_kernel_compile_4.png" alt=""></p>
<p>7.最后，我们就可以编译了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make</div></pre></td></tr></table></figure></p>
<p>编译过程截图：</p>
<p><img src="http://vars.qiniudn.com/android_kernel_compile_5.png" alt=""></p>
<p>映像的输出为：arch/arm/boot/zImage，这样就通过默认的配置完成了Android内核的编译。</p>
<p><img src="http://vars.qiniudn.com/android_kernel_compile_6.png" alt=""></p>
<h3 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h3><p>裁剪要用到一个很有用的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make menuconfig</div></pre></td></tr></table></figure></p>
<p>上述命令的运行需要以下库，必须提前安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install ncurses-dev</div></pre></td></tr></table></figure></p>
<p>make menuconfig这个命令在编译Linux内核时会用到，有关于它的详细说明可以参考以下地方，详细阅读：<br><a href="http://blog.csdn.net/xdw1985829/article/details/6833319" target="_blank" rel="external">http://blog.csdn.net/xdw1985829/article/details/6833319</a><br><a href="http://hi.baidu.com/modygewlmsdnpre/item/b604b1c2ff676b1450505825" target="_blank" rel="external">http://hi.baidu.com/modygewlmsdnpre/item/b604b1c2ff676b1450505825</a><br><a href="http://www.linuxidc.com/Linux/2012-06/63092.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2012-06/63092.htm</a><br>简单说来就是编译的过程中编译器通过配置文件得知如何编译，得知该把哪个模块编译进去。这个命令会打开一个蓝色的命令行菜单让你更改编译时的配置，在裁剪时也会通过这个命令打开一个菜单来更改编译配置，在退出时如果有变化它会自动提示你保存。</p>
<p><img src="http://vars.qiniudn.com/android_kernel_compile_7.png" alt=""></p>
<p>我们在make menuconfig打开的菜单中修改菜单项进行裁剪，这个菜单还是很友好的，你一下就能知道改如何根据需要裁剪，裁剪完成后，退出时询问是否保存，当然要保存（实际上是更新了上文中所述的默认的源码根目录下的.config文件）。</p>
<p><img src="http://vars.qiniudn.com/android_kernel_compile_8.png" alt=""></p>
<p>接着我们就可以编译裁剪之后的内核了（当然，编译过程中读取的也是更新后的配置文件）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make</div></pre></td></tr></table></figure></p>
<p>编译完毕之后，再去看看编译好的映像，没什么问题的话，发现新映像比未裁剪编译出的映像小了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[To be a tough man]]></title>
      <url>http://blog.liushuaiko.be/blog/2013/01/01/to-be-a-tough-man/</url>
      <content type="html"><![CDATA[<p>很喜欢这样的时间，没什么课，每天写写扯淡的实验报告，可以有大块的时间干自己想干的事情，比如调研一些新的技术、学点一直想学但是没有机会学的知识、看看小说看看电影，生活是多么美好。<a id="more"></a></p>
<p>一转眼，一年就过去了，年真的是一个很奇妙的时间度量单位。</p>
<p>这一年，经历了很多，也成长了很多。</p>
<p>记得这一年年初的寒假，刚进lab的那个寒假，只记得受到lab的影响真的太大了，我接触到以前从未听说过的一些技术，几乎每天都有一种“我擦，还能这样”的感慨，寒假在家里面拿着一本《疯狂Android讲义》和《Python核心编程》看个不停，这两本书对我的影响还是很大的，从第一本书中学了很多基础的Android开发的知识，自己也做了很多小的例子，体会到了一些成就感，为下面要说的人生中第一个真正的外包项目打下了基础；第二本书让我感到了Python的优美，一下子就喜欢上了这门非常有用的脚本语言。</p>
<p>还记得这个寒假我在家自己装ubuntu，不知怎的还把笔记本的硬盘装坏了~天生喜欢折腾总是付出了代价~无奈在家中台机上写了好长时间的code。</p>
<p>接着，大二下学期。这学期开了一些网站方面的知识的课，如ASP、JSP等。对网站毫无兴趣的我每天应付实验应付的焦头烂额，不过还好ASP.NET试卷竟然考了满分，JSP考了92分，让我还是很欣慰的。这学期一门学分绩很高的课DB，却只考了77分，另一门很有用的课计算机网络也考得不高，它们和大三上的编译原理成为我永远的痛~</p>
<p>这学期对我影响最大的一件事就是做了IT生涯中也是人生中第一个外包项目——科学网Android端阅读器。这个项目对我来说是处于一个用语言无法形容的高度与地位。当初接的时候想了好久，主要的原因就是对自己没有信心，感觉着毕竟是一个真正的项目，万一做砸了咋办。后来在网上找到了一个例子，模仿网易新闻客户端的一个小Demo。看了看它的代码，感觉也没有想象的那么难，于是有点信心，便接下来了。接下来心理反倒踏实了，刚开始做的时候，抱着一个“不要让我们交违约金”的想法，后来一步一步踏实地做，攻克了许多难点，最终做得还真不错，我的技术水平也得到了一个很大的提升。我们还拿着转来的钱去大连小high了一圈，这段经历真的很难忘。</p>
<p><img src="http://vars.qiniudn.com/to_be_man_1.jpg" alt=""></p>
<p>因为端午节去了大连，暑假实训果断选择了北京中软，又是一段难忘的经历，虽然生活条件特别苦，但是学到了很多技术之外东西，包括与人相处等等。在北京认识了很多人。印象最深就是苦逼的项目终检。一切因为有学院领导在场，中软的负责人态度强势的对我们说：“不允许有bug！”。当时听了就非常不爽，就很想跟他打一架。后来，项目讲解的时候我上去的，由于各方面原因出了好几个bug，在场的中软方面的老师脸都绿了，学院领导也不耐烦，我在台上也快SB了，但还是淡定地点掉模拟器上FC的框框，继续讲解，哈哈。但是后来，最让人蛋疼的一幕是网站的讲解，本来讲解Android端FC就够坑爹了，结果那位讲解的小伙竟然忘记插网线了，正当她讲的high时，一个500错误跃然屏幕之上，结果在场的人脸由绿到紫。想想这段经历还挺美好的。</p>
<p><img src="http://vars.qiniudn.com/to_be_man_2.jpg" alt=""></p>
<p>就这样，一学期就过去了。</p>
<p>暑假只在家呆了4天，就提早回到实验室做Android第三届挑战赛的东西。这段经历只有两个字——苦逼。每天宿舍只有琐哥相伴，早晨9点去lab，晚上11点回来。到最后都想放弃了，各种困难，每天真的连饭都吃不下，但是硬是挺过来了，而且经历我人生总第一次真正意义上的通宵——一宿一点都没睡，靠4个脆脆鲨支撑。比赛结果差强人意——东北赛区三等奖。</p>
<p><img src="http://vars.qiniudn.com/to_be_man_4.jpg" alt=""></p>
<p>就这样跌跌撞撞来到了大三，哈尔滨也逐渐冷起来。</p>
<p>这学期我付出最多努力的一门课就是——编译原理。考得怎么样不说，学到的东西还真不少。但是这学期感觉上课都没怎么认真听课，这点可不好。</p>
<p>十一长假自费去南京玩了一圈，这次真的是自费，没有奖学金，项目的钱也花完了，第一次去那么南的地方，第一次跨过秦岭-淮河线，第一次见到长江…太多的第一次，太多的回忆。</p>
<p><img src="http://vars.qiniudn.com/to_be_man_3.jpg" alt=""></p>
<p>这学期末的时候，竟然还得了一场水痘，囧。被隔离了2个周，在里面潜心学习编译原理，那两个周真的是恍若隔世啊，不过，我应该是得过的人中被隔离时间最短的了。这场风波带给我的启示是一定要珍惜眼前的生活，生活中不确定的因素实在是太多了，唯有把我现在才是真理。</p>
<p>现在，这学期也进入了尾声。马上就要面临读研、就业的选择了。很羡慕那些出国的人，虽然我不想出国，但是起码他们的人生目标很明确。</p>
<p>不管怎么着，新的一年，送给自己一句话——To be a tough man，To be number one。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微信机器人：小蜗牛有道翻译小助手——Django + SAE + 微信公众帐号自动回复开放接口]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/12/31/wechat-youdao-sae/</url>
      <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>某一天上着多核程序设计的课上，无聊刷rss，偶然看见一片文章，一个哥们用微信公众帐号自动回复接口和php写了一个自动翻译的机器人，让我眼前一亮，我决定自己动手做一个，技术上选了Django，服务器用的是SAE。<a id="more"></a></p>
<h3 id="Update"><a href="#Update" class="headerlink" title="==Update=="></a>==Update==</h3><p>本项目源码：<a href="https://github.com/liushuaikobe/littlesnail" target="_blank" rel="external">https://github.com/liushuaikobe/littlesnail</a></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="Sina-App-Engine"><a href="#Sina-App-Engine" class="headerlink" title="Sina App Engine"></a>Sina App Engine</h4><p>首先作为一个屌丝开发者要解决服务器的问题。去SAE的<a href="http://sae.sina.com.cn/" target="_blank" rel="external">官网</a>上用新浪微博的帐号注册一个帐号，成功后会赠给你500云豆，可供一个开发者试用大概5天。SAE非常优秀，如果以后我们想在上面写点应用什么的，可以去申请实名认证和开发者认证，那样每个月都会给你一定数量的云豆，应该能满足日常需求。由于现在SAE上部署Python还处于公测阶段，因此我们要去申请开通可以在上面部署Python程序的权限，现在很好申请的，不一会就会收到已经为你开放了部署Python应用权限的邮件，网上搜到的啥啥还需要排队都是过去了（不排除当你看到这篇文章时SAE已经可以允许所有开发者部署Python的应用了）。</p>
<p><img src="http://vars.qiniudn.com/weixin_youdao_1.png" alt=""></p>
<p>OK，完成这些后，就可以到SAE的<a href="http://sae.sina.com.cn/?m=devcenter&amp;catId=289" target="_blank" rel="external">文档中心</a>读文档来照着文档里面的样例创建一个应用了。</p>
<h4 id="有道API"><a href="#有道API" class="headerlink" title="有道API"></a>有道API</h4><p>然后，去<a href="http://fanyi.youdao.com/openapi?path=data-mode" target="_blank" rel="external">有道API</a>申请一个key，申请的时候网站地址随便填就行。有道API非常简单，直接以GET的形式把要翻译的文本发送到指定的url，然后它会给我们回复翻译结果，我们可以选择xml、json等返回格式，我选得是xml，接着，在浏览器里面按着指定的格式输入url，就可以看到返回结果啦：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">youdao-fanyi</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">errorCode</span>&gt;</span>0<span class="tag">&lt;/<span class="name">errorCode</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">query</span>&gt;</span>&lt;![CDATA[这里是有道翻译API]]&gt;<span class="tag">&lt;/<span class="name">query</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 有道翻译 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">translation</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">paragraph</span>&gt;</span>&lt;![CDATA[Here is the youdao translation API]]&gt;<span class="tag">&lt;/<span class="name">paragraph</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">translation</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">youdao-fanyi</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>注意，如果是对词进行翻译的话有的词还会返回一些啥网络释义，基本释义啥的，具体对这个xml解析的方法请看下面的代码。</p>
<h4 id="微信公众帐号"><a href="#微信公众帐号" class="headerlink" title="微信公众帐号"></a>微信公众帐号</h4><p>接着，我们要去微信的<a href="http://mp.weixin.qq.com/" target="_blank" rel="external">公众帐号平台</a>去申请一个公众帐号，不能用现有的已绑定私人微信帐号的QQ号申请，我用的是一个平时不用的QQ号申请的，申请成功后，可以大致看看微信公众帐号的管理平台（现在你知道那些公众帐号，比如王力宏的帐号啥的是怎么运作的了吧），接着去这里仔细阅读微信公众帐号自动回复开放接口的文档，你要从这里学一种如何让用户认证的思想（就是如果用户做了XX，给我返回了XX结果，那么我就能确定，用户是“合法”的），或者认证的方法。大致有一个认识后，赶紧下载他给的样例php源码，也是唯一的可以参考的源码，仔细阅读，如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">/**</div><div class="line">  * wechat php test</div><div class="line">  */</div><div class="line"></div><div class="line">//define your token</div><div class="line">define("TOKEN", "weixin");</div><div class="line">$wechatObj = new wechatCallbackapiTest();</div><div class="line">$wechatObj-&gt;valid();</div><div class="line"></div><div class="line">class wechatCallbackapiTest</div><div class="line">&#123;</div><div class="line">    public function valid()</div><div class="line">    &#123;</div><div class="line">        $echoStr = $_GET["echostr"];</div><div class="line"></div><div class="line">        //valid signature , option</div><div class="line">        if($this-&gt;checkSignature())&#123;</div><div class="line">            echo $echoStr;</div><div class="line">            exit;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function responseMsg()</div><div class="line">    &#123;</div><div class="line">        //get post data, May be due to the different environments</div><div class="line">        $postStr = $GLOBALS["HTTP_RAW_POST_DATA"];</div><div class="line"></div><div class="line">        //extract post data</div><div class="line">        if (!empty($postStr))&#123;</div><div class="line">       echoStr</div><div class="line">                $postObj = simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);</div><div class="line">                $fromUsername = $postObj-&gt;FromUserName;</div><div class="line">                $toUsername = $postObj-&gt;ToUserName;</div><div class="line">                $keyword = trim($postObj-&gt;Content);</div><div class="line">                $time = time();</div><div class="line">                $textTpl = "&lt;xml&gt;</div><div class="line">                            &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;</div><div class="line">                            &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;</div><div class="line">                            &lt;CreateTime&gt;%s&lt;/CreateTime&gt;</div><div class="line">                            &lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;</div><div class="line">                            &lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;</div><div class="line">                            &lt;FuncFlag&gt;0&lt;/FuncFlag&gt;</div><div class="line">                            &lt;/xml&gt;";</div><div class="line">                if(!empty( $keyword ))</div><div class="line">                &#123;</div><div class="line">                    $msgType = "text";</div><div class="line">                    $contentStr = "Welcome to wechat world!";</div><div class="line">                    $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</div><div class="line">                    echo $resultStr;</div><div class="line">                &#125;else&#123;</div><div class="line">                    echo "Input something...";</div><div class="line">                &#125;</div><div class="line"></div><div class="line">        &#125;else &#123;</div><div class="line">            echo "";</div><div class="line">            exit;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private function checkSignature()</div><div class="line">    &#123;</div><div class="line">        $signature = $_GET["signature"];</div><div class="line">        $timestamp = $_GET["timestamp"];</div><div class="line">        $nonce = $_GET["nonce"];</div><div class="line"></div><div class="line">        $token = TOKEN;</div><div class="line">        $tmpArr = array($token, $timestamp, $nonce);</div><div class="line">        sort($tmpArr);</div><div class="line">        $tmpStr = implode( $tmpArr );</div><div class="line">        $tmpStr = sha1( $tmpStr );</div><div class="line"></div><div class="line">        if( $tmpStr == $signature )&#123;</div><div class="line">            return true;</div><div class="line">        &#125;else&#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>很简单吧，以至于被一些人说写的很水，但是我觉得，这份php源码还是很有含金量的；网上一些哥们还抱怨啥啥的直接部署样例php不能运行啥的，拜托，有点职业精神好不好，连我这个之前完全不会php的人都能看出来要调用里面的responseMsg( )方法才能实现自动回复，样例里面的只是调用了微信接入的认证功能的函数。<br>上面的代码写的很好，不需要我多解释，相信大家能看出来它是怎么工作的。</p>
<h3 id="设计与实现"><a href="#设计与实现" class="headerlink" title="设计与实现"></a>设计与实现</h3><p>接着就可以实现我们自己的应用了，首先把我们在SAE上创建的应用通过SVN检出到本地，然后切换到检出的目录，用Django的命令创建一个应用，目录结构如下：</p>
<p><img src="http://vars.qiniudn.com/weixin_youdao_2.png" alt=""></p>
<p>其中，index.wsgi和config.yaml是SAE规定的文件，具体请仔细阅读SAE的文档。<br>之后就可以编写我们自己的服务端代码了，大致思想就是：用户A向公众帐号发送一条消息，微信平台会按着公众帐号预先的设置，把用户A的消息内容和一些其他信息（如创建时间等）以xml的形式post到我们预先设置好的url上（这个url的服务端就是我们要写的在SAE上的应用），我们要做的就是每当接受到微信post请求，我们解析微信平台post过来的xml，得到用户A的消息内容，把消息内容以get的形式发送到有道API，获取有道API返回的xml（或json等），解析，之后按微信平台规定的格式构造成一个xml，作为微信平台post请求的结果给其返回，微信平台收到结果后，会把消息自动回复给用户，用户就能收到翻译结果了。<br>用一个图表示上述过程如下：</p>
<p><img src="http://vars.qiniudn.com/weixin_youdao_3.jpg" alt=""></p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>下面贴出逻辑处理部分代码如下（Views.py），各函数功能不言而喻：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> RequestContext, Template</div><div class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</div><div class="line"><span class="keyword">from</span> django.utils.encoding <span class="keyword">import</span> smart_str, smart_unicode</div><div class="line"></div><div class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</div><div class="line"><span class="keyword">import</span> urllib,urllib2,time,hashlib</div><div class="line"></div><div class="line">TOKEN = <span class="string">"你设置的Token"</span></div><div class="line"></div><div class="line">YOUDAO_KEY = 你申请到的有道的Key</div><div class="line">YOUDAO_KEY_FROM = <span class="string">"有道的key-from"</span></div><div class="line">YOUDAO_DOC_TYPE = <span class="string">"xml"</span></div><div class="line"></div><div class="line"><span class="meta">@csrf_exempt</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleRequest</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">        <span class="comment">#response = HttpResponse(request.GET['echostr'],content_type="text/plain")</span></div><div class="line">        response = HttpResponse(checkSignature(request),content_type=<span class="string">"text/plain"</span>)</div><div class="line">        <span class="keyword">return</span> response</div><div class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        <span class="comment">#c = RequestContext(request,&#123;'result':responseMsg(request)&#125;)</span></div><div class="line">        <span class="comment">#t = Template('&#123;&#123;result&#125;&#125;')</span></div><div class="line">        <span class="comment">#response = HttpResponse(t.render(c),content_type="application/xml")</span></div><div class="line">        response = HttpResponse(responseMsg(request),content_type=<span class="string">"application/xml"</span>)</div><div class="line">        <span class="keyword">return</span> response</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkSignature</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">global</span> TOKEN</div><div class="line">    signature = request.GET.get(<span class="string">"signature"</span>, <span class="keyword">None</span>)</div><div class="line">    timestamp = request.GET.get(<span class="string">"timestamp"</span>, <span class="keyword">None</span>)</div><div class="line">    nonce = request.GET.get(<span class="string">"nonce"</span>, <span class="keyword">None</span>)</div><div class="line">    echoStr = request.GET.get(<span class="string">"echostr"</span>,<span class="keyword">None</span>)</div><div class="line"></div><div class="line">    token = TOKEN</div><div class="line">    tmpList = [token,timestamp,nonce]</div><div class="line">    tmpList.sort()</div><div class="line">    tmpstr = <span class="string">"%s%s%s"</span> % tuple(tmpList)</div><div class="line">    tmpstr = hashlib.sha1(tmpstr).hexdigest()</div><div class="line">    <span class="keyword">if</span> tmpstr == signature:</div><div class="line">        <span class="keyword">return</span> echoStr</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">responseMsg</span><span class="params">(request)</span>:</span></div><div class="line">    rawStr = smart_str(request.raw_post_data)</div><div class="line">    <span class="comment">#rawStr = smart_str(request.POST['XML'])</span></div><div class="line">    msg = paraseMsgXml(ET.fromstring(rawStr))</div><div class="line"></div><div class="line">    queryStr = msg.get(<span class="string">'Content'</span>,<span class="string">'You have input nothing~'</span>)</div><div class="line"></div><div class="line">    raw_youdaoURL = <span class="string">"http://fanyi.youdao.com/openapi.do?keyfrom=%s&amp;key=%s&amp;type=data&amp;doctype=%s&amp;version=1.1&amp;q="</span> % (YOUDAO_KEY_FROM,YOUDAO_KEY,YOUDAO_DOC_TYPE)</div><div class="line">    youdaoURL = <span class="string">"%s%s"</span> % (raw_youdaoURL,urllib2.quote(queryStr))</div><div class="line"></div><div class="line">    req = urllib2.Request(url=youdaoURL)</div><div class="line">    result = urllib2.urlopen(req).read()</div><div class="line"></div><div class="line">    replyContent = paraseYouDaoXml(ET.fromstring(result))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> getReplyXml(msg,replyContent)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">paraseMsgXml</span><span class="params">(rootElem)</span>:</span></div><div class="line">    msg = &#123;&#125;</div><div class="line">    <span class="keyword">if</span> rootElem.tag == <span class="string">'xml'</span>:</div><div class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> rootElem:</div><div class="line">            msg[child.tag] = smart_str(child.text)</div><div class="line">    <span class="keyword">return</span> msg</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">paraseYouDaoXml</span><span class="params">(rootElem)</span>:</span></div><div class="line">    replyContent = <span class="string">''</span></div><div class="line">    <span class="keyword">if</span> rootElem.tag == <span class="string">'youdao-fanyi'</span>:</div><div class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> rootElem:</div><div class="line">            <span class="comment"># 错误码</span></div><div class="line">            <span class="keyword">if</span> child.tag == <span class="string">'errorCode'</span>:</div><div class="line">                <span class="keyword">if</span> child.text == <span class="string">'20'</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="string">'too long to translate\n'</span></div><div class="line">                <span class="keyword">elif</span> child.text == <span class="string">'30'</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="string">'can not be able to translate with effect\n'</span></div><div class="line">                <span class="keyword">elif</span> child.text == <span class="string">'40'</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="string">'can not be able to support this language\n'</span></div><div class="line">                <span class="keyword">elif</span> child.text == <span class="string">'50'</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="string">'invalid key\n'</span></div><div class="line"></div><div class="line">            <span class="comment"># 查询字符串</span></div><div class="line">            <span class="keyword">elif</span> child.tag == <span class="string">'query'</span>:</div><div class="line">                replyContent = <span class="string">"%s%s\n"</span> % (replyContent, child.text)</div><div class="line"></div><div class="line">            <span class="comment"># 有道翻译</span></div><div class="line">            <span class="keyword">elif</span> child.tag == <span class="string">'translation'</span>:</div><div class="line">                replyContent = <span class="string">'%s%s\n%s\n'</span> % (replyContent, <span class="string">'-'</span> * <span class="number">3</span> + <span class="string">u'有道翻译'</span> + <span class="string">'-'</span> * <span class="number">3</span>, child[<span class="number">0</span>].text)</div><div class="line"></div><div class="line">            <span class="comment"># 有道词典-基本词典</span></div><div class="line">            <span class="keyword">elif</span> child.tag == <span class="string">'basic'</span>:</div><div class="line">                replyContent = <span class="string">"%s%s\n"</span> % (replyContent, <span class="string">'-'</span> * <span class="number">3</span> + <span class="string">u'基本词典'</span> + <span class="string">'-'</span> * <span class="number">3</span>)</div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> child:</div><div class="line">                    <span class="keyword">if</span> c.tag == <span class="string">'phonetic'</span>:</div><div class="line">                        replyContent = <span class="string">'%s%s\n'</span> % (replyContent, c.text)</div><div class="line">                    <span class="keyword">elif</span> c.tag == <span class="string">'explains'</span>:</div><div class="line">                        <span class="keyword">for</span> ex <span class="keyword">in</span> c.findall(<span class="string">'ex'</span>):</div><div class="line">                            replyContent = <span class="string">'%s%s\n'</span> % (replyContent, ex.text)</div><div class="line"></div><div class="line">            <span class="comment"># 有道词典-网络释义</span></div><div class="line">            <span class="keyword">elif</span> child.tag == <span class="string">'web'</span>:</div><div class="line">                replyContent = <span class="string">"%s%s\n"</span> % (replyContent, <span class="string">'-'</span> * <span class="number">3</span> + <span class="string">u'网络释义'</span> + <span class="string">'-'</span> * <span class="number">3</span>)</div><div class="line">                <span class="keyword">for</span> explain <span class="keyword">in</span> child.findall(<span class="string">'explain'</span>):</div><div class="line">                    <span class="keyword">for</span> key <span class="keyword">in</span> explain.findall(<span class="string">'key'</span>):</div><div class="line">                        replyContent = <span class="string">'%s%s\n'</span> % (replyContent, key.text)</div><div class="line">                    <span class="keyword">for</span> value <span class="keyword">in</span> explain.findall(<span class="string">'value'</span>):</div><div class="line">                        <span class="keyword">for</span> ex <span class="keyword">in</span> value.findall(<span class="string">'ex'</span>):</div><div class="line">                            replyContent = <span class="string">'%s%s\n'</span> % (replyContent, ex.text)</div><div class="line">                    replyContent = <span class="string">'%s%s\n'</span> % (replyContent,<span class="string">'--'</span>)</div><div class="line">    <span class="keyword">return</span> replyContent</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getReplyXml</span><span class="params">(msg,replyContent)</span>:</span></div><div class="line">    extTpl = <span class="string">"&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;&lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;&lt;CreateTime&gt;%s&lt;/CreateTime&gt;&lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;&lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;&lt;FuncFlag&gt;0&lt;/FuncFlag&gt;&lt;/xml&gt;"</span>;</div><div class="line">    extTpl = extTpl % (msg[<span class="string">'FromUserName'</span>],msg[<span class="string">'ToUserName'</span>],str(int(time.time())),<span class="string">'text'</span>,replyContent)</div><div class="line">    <span class="keyword">return</span> extTpl</div></pre></td></tr></table></figure></p>
<p>之后通过SVN把项目部署到SAE上，就OK啦～</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>现在网上这种参考的代码还很少，在SAE上部署调试也非常困难，无奈下我自己写了个脚本，模仿微信平台给自己部署在SAE上的服务端POST消息，看返回的结果。如果出现错误，Django都会产生一个优美的错误页面，获取这个错误页面把它写到本地的一个html里面，用浏览器打开就可以知道是什么错误了。<br>写的过程中还是遇到不少问题的：</p>
<h4 id="1-Django的CSRF错误："><a href="#1-Django的CSRF错误：" class="headerlink" title="1.Django的CSRF错误："></a>1.Django的CSRF错误：</h4><p>我用的Django 1.4，我尝试了大家说的很多解决办法都会出现403错误，无奈下只能暂时通过修饰符把Django的CSRF暂时禁掉，这个还要以后学Django的深入调研一下；</p>
<h4 id="2-Django的编码错误："><a href="#2-Django的编码错误：" class="headerlink" title="2.Django的编码错误："></a>2.Django的编码错误：</h4><p>我也尝试了很多方法，但是都不行，主要是中文处理上，遇到了很多麻烦，最终在<a href="http://www.saltycrane.com/blog/2008/11/python-unicodeencodeerror-ascii-codec-cant-encode-character/" target="_blank" rel="external">这里</a>找到了完美的解决方案，用可爱的Django自带的可爱的方法：smart_str、smart_unicode，就能完美处理中文了。</p>
<h3 id="成果截图"><a href="#成果截图" class="headerlink" title="成果截图"></a>成果截图</h3><p><img src="http://vars.qiniudn.com/weixin_youdao_4.png?imageView2/2/w/350" alt=""></p>
<p><img src="http://vars.qiniudn.com/weixin_youdao_5.png?imageView2/2/w/350" alt=""></p>
<p><img src="http://vars.qiniudn.com/weixin_youdao_6.png?imageView2/2/w/350" alt=""></p>
<p><img src="http://vars.qiniudn.com/weixin_youdao_7.png?imageView2/2/w/350" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[哈工大软件学院编译原理实验3——语义分析]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/12/08/HIT-Compilers-exercise-3/</url>
      <content type="html"><![CDATA[<h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>这次实验的实验目的其实很明确——对源码进行语义分析，输出语义分析结果，并要求有适当的错误处理机制。可是指导书上实验目的要求自己分析，我的分析结果：本次实验要求自己定义上次实验的语法分析的文法的SDD，然后编写程序在上次语法分析的基础上完成语义分析，生成测试程序的中间代码（三地址码）。<a id="more"></a></p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>本次实验离不开一些概念：语法制导定义（syntax-directed definition ( SDD )，我觉得这个翻译略显生硬，“制导”？导弹制导系统？），语法制导翻译（Syntax-Directed　Translation（SDT），同上），以及中间代码生成（Intermediate-Code Generation，个人认为把它翻译成“中介”更好一些）。</p>
<p>刚开始可能课上听课程度不够，对这些概念不是很了解，导致做实验时有很大的障碍。</p>
<p>下面说说我的理解：<br>SDD是一个偏理论上的概念，龙书第二版这样说：</p>
<blockquote>
<p>A syntax-directed definition ( SDD ) is a context-free grammar together with attributes and rules. Attributes are associated with grammar symbols and rules are associated with productions（“rules” is “semantic rules”，笔者加）.</p>
</blockquote>
<p>也就是说，为了理解语言的含义，我们要把语言符号和语言符号所代表的信息联系起来，我们要为文法的每个grammar symbol(s)附加一些属性。而附加到Production的语义规则则告知这些属性是怎么得来的以及文法符号属性之间的关系是怎样的。我们可以把SDD理解为对单纯的Grammar Symbols和Productions的扩展。SDD让文法的Grammar Symbols和Productions变得“活”了，变得有意义了。</p>
<p>SDT是一种技术（老师的讲义上把它理解为SDD的一种便于书写的形式）。这种翻译技术可以被应用到语义翻译过程中的类型检查和中间代码生成上，也可以被应用到一些某些具有特定任务的轻量级的语言中。可以这么理解，SDT是根据SDD所定义的那些规则和计算顺序对语言进行语义翻译的技术。通过SDT，我们理解了源语言到底要表达个什么意思，为后续的编译工作打下了基础。</p>
<p>中间代码生成，是一个生成一种独立于源语言也独立于目标语言（我们叫它中间代码）的代码过程，中间代码有很多形式，生成中间代码有很多好处，这里不再赘述。中间代码的生成工作要用到SDT技术。</p>
<p>总之，它们都没有什么明确的定义，意会这些就好。</p>
<h3 id="引子：Python实现递归和非递归遍历树"><a href="#引子：Python实现递归和非递归遍历树" class="headerlink" title="引子：Python实现递归和非递归遍历树"></a>引子：Python实现递归和非递归遍历树</h3><p>不一定要把SDT作为一个单独的过程去完成它，可能在句法分析的过程中（句法分析当然也有可多方法，LL、LR等）就调用相应的语义子程序完成了SDT的工作。</p>
<p>此外，这次实验我最大的收获：<strong>LL(1)语法分析的过程本质上就是一个对语法分析树进行先根遍历的过程</strong>。</p>
<p>所以，先写一个简单的脚本实现非递归先根顺序遍历树，来模拟LL（1）的过程，以加深对其的理解。</p>
<p>下面上代码，其中非递归遍历树的过程就是LL(1)执行时遍历语法分析树的过程，读者可以画一下树的结构，并对着输出看一下遍历顺序，会对LL分析过程中分析栈的变化的认识有帮助。</p>
<p>树是这样被录入程序的（tree.txt）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Root:A</div><div class="line">A -&gt; B C</div><div class="line">B -&gt; D E F</div><div class="line">C -&gt; G H</div><div class="line">E -&gt; I J</div><div class="line">J -&gt; K L M</div><div class="line">H -&gt; N O</div></pre></td></tr></table></figure></p>
<p>下面是脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">Tree = &#123;&#125;</div><div class="line">Root = <span class="keyword">None</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_tree</span><span class="params">(tree_file_path)</span>:</span></div><div class="line">    <span class="string">'''Read the Tree from the file, build the Tree'''</span></div><div class="line">    <span class="keyword">global</span> Tree,Root</div><div class="line">    tree_file = open(tree_file_path,<span class="string">"r+"</span>)</div><div class="line">    raw_Root = tree_file.readline().strip().split(<span class="string">':'</span>)</div><div class="line">    <span class="keyword">if</span> (raw_Root[<span class="number">0</span>] == <span class="string">"Root"</span>):</div><div class="line">        Root = raw_Root[<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> eachLine <span class="keyword">in</span> tree_file.readlines():</div><div class="line">        sub_tree = eachLine.strip().split(<span class="string">' -&gt; '</span>)</div><div class="line">        Tree[sub_tree[<span class="number">0</span>]] = sub_tree[<span class="number">1</span>].split(<span class="string">' '</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">travel_tree</span><span class="params">(Tree,Root)</span>:</span></div><div class="line">    <span class="string">'''Travel the Tree by root-priority order with the stack data structure instead of recursion'''</span></div><div class="line">    stack = []</div><div class="line">    stack.append(Root)</div><div class="line">    <span class="keyword">while</span> len(stack) != <span class="number">0</span> :</div><div class="line">        <span class="keyword">print</span> <span class="string">'stack:'</span>,stack</div><div class="line">        X = stack.pop()</div><div class="line">        <span class="keyword">print</span> <span class="string">'visit:'</span>,X <span class="comment"># travel the Tree</span></div><div class="line">        <span class="keyword">if</span> X <span class="keyword">not</span> <span class="keyword">in</span> Tree: <span class="comment"># That means X is a leaf</span></div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> list(reversed(Tree[X])):</div><div class="line">            stack.append(item)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">travel_tree_recursion</span><span class="params">(Tree,Root)</span>:</span></div><div class="line">    <span class="string">'''Travel the Tree recursively'''</span></div><div class="line">    <span class="keyword">print</span> Root,</div><div class="line">    <span class="keyword">if</span> Root <span class="keyword">not</span> <span class="keyword">in</span> Tree:</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">for</span> X <span class="keyword">in</span> Tree[Root]:</div><div class="line">        travel_tree_recursion(Tree,X)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Start reading the tree from file..."</span></div><div class="line">    read_tree(<span class="string">'./tree.txt'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"The tree is:"</span></div><div class="line">    <span class="keyword">print</span> Tree,<span class="string">'\n'</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"Start traveling the tree with stack..."</span></div><div class="line">    travel_tree(Tree,Root)</div><div class="line">    <span class="keyword">print</span> <span class="string">"\nStart traveling the tree recursively..."</span></div><div class="line">    travel_tree_recursion(Tree,Root)</div></pre></td></tr></table></figure></p>
<p>输出结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">Start reading the tree from file...</div><div class="line">The tree is:</div><div class="line">&#123;&apos;A&apos;: [&apos;B&apos;, &apos;C&apos;], &apos;C&apos;: [&apos;G&apos;, &apos;H&apos;], &apos;B&apos;: [&apos;D&apos;, &apos;E&apos;, &apos;F&apos;], &apos;E&apos;: [&apos;I&apos;, &apos;J&apos;], &apos;H&apos;: [&apos;N&apos;, &apos;O&apos;], &apos;J&apos;: [&apos;K&apos;, &apos;L&apos;, &apos;M&apos;]&#125;</div><div class="line"></div><div class="line">Start traveling the tree with stack...</div><div class="line">stack: [&apos;A&apos;]</div><div class="line">visit: A</div><div class="line">stack: [&apos;C&apos;, &apos;B&apos;]</div><div class="line">visit: B</div><div class="line">stack: [&apos;C&apos;, &apos;F&apos;, &apos;E&apos;, &apos;D&apos;]</div><div class="line">visit: D</div><div class="line">stack: [&apos;C&apos;, &apos;F&apos;, &apos;E&apos;]</div><div class="line">visit: E</div><div class="line">stack: [&apos;C&apos;, &apos;F&apos;, &apos;J&apos;, &apos;I&apos;]</div><div class="line">visit: I</div><div class="line">stack: [&apos;C&apos;, &apos;F&apos;, &apos;J&apos;]</div><div class="line">visit: J</div><div class="line">stack: [&apos;C&apos;, &apos;F&apos;, &apos;M&apos;, &apos;L&apos;, &apos;K&apos;]</div><div class="line">visit: K</div><div class="line">stack: [&apos;C&apos;, &apos;F&apos;, &apos;M&apos;, &apos;L&apos;]</div><div class="line">visit: L</div><div class="line">stack: [&apos;C&apos;, &apos;F&apos;, &apos;M&apos;]</div><div class="line">visit: M</div><div class="line">stack: [&apos;C&apos;, &apos;F&apos;]</div><div class="line">visit: F</div><div class="line">stack: [&apos;C&apos;]</div><div class="line">visit: C</div><div class="line">stack: [&apos;H&apos;, &apos;G&apos;]</div><div class="line">visit: G</div><div class="line">stack: [&apos;H&apos;]</div><div class="line">visit: H</div><div class="line">stack: [&apos;O&apos;, &apos;N&apos;]</div><div class="line">visit: N</div><div class="line">stack: [&apos;O&apos;]</div><div class="line">visit: O</div><div class="line"></div><div class="line">Start traveling the tree recursively...</div><div class="line">A B D E I J K L M F C G H N O</div></pre></td></tr></table></figure></p>
<h3 id="本次实验"><a href="#本次实验" class="headerlink" title="本次实验"></a>本次实验</h3><p>下面说一下我的程序的具体实现，仅供参考。</p>
<p>首先要明确，分析栈里面不会再像上次实验那样仅仅存一个文法符号的单一的类型了。这次我们要向栈里面压入至少：文法符号、代表语义动作的“挂钩”、文法符号的属性这些类型。如果想不出更好的将它们类型统一的方法，还是乖乖地把分析栈改成存放Object类型的栈吧：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stack&lt;Object&gt; prodChars = <span class="keyword">new</span> Stack&lt;&gt;();</div></pre></td></tr></table></figure></p>
<p>我们在出栈时，可以利用Java语言的多态性，用instanceof运算符判断弹出来的到底是个什么类型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Object X = prodChars.peek(); <span class="comment">// 从栈里弹出元素X</span></div><div class="line"><span class="keyword">if</span> (X <span class="keyword">instanceof</span> MyCharacter) &#123; <span class="comment">// X是一个文法符号</span></div><div class="line">    <span class="comment">// 在这里查找预测分析表，判断该使用哪个产生式</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (X <span class="keyword">instanceof</span> HashMap&lt;?, ?&gt;) &#123; <span class="comment">// X是上一个文法符号的综合属性</span></div><div class="line">    <span class="comment">// 在这里将综合属性暂存，作为参数传给下一个语义子程序</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (X <span class="keyword">instanceof</span> String) &#123; <span class="comment">// X是一个语义子程序</span></div><div class="line">    <span class="comment">// 在这里调用相应的语义子程序</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>进行SDT的过程，实际上就是前述属性的不断传递的过程，SDD中的属性又分为<strong>继承属性（inherited attribute）</strong>和<strong>综合属性（synthesized attribute）</strong>。</p>
<p>龙书上是这样描述它们的：</p>
<blockquote>
<p>1 . A synthesized attribute for a nonterminal A at a parse-tree node N is defined by a semantic rule associated with the production at N. Note that the production must have A as its head. A synthesized attribute at node N is defined only in terms of attribute values at the children of N and at N itself.<br>　　节点N上的综合属性只能通过N的子节点或N本身的属性值来定义。
　　</p>
<ol>
<li>An inherited attribute for a nonterminal B at a parse-tree node N is defined by a semantic rule associated with the production at the parent of N. Note that the production must have B as a symbol in its body. An inherited attribute at node N is defined only in terms of attribute values at N’s parent, N itself, and N’s siblings.<br>　　节点N上的继承属性只能通过N的父节点、 N的兄弟节点和N本身的属性值来定义;</li>
</ol>
</blockquote>
<p>根据前面演示脚本的输出，不难得出，按着LL的分析顺序：<br>1.文法符号的综合属性和由左兄弟节点传递的继承属性是沿着分析栈的栈顶向栈底传递的；<br>2.其他继承属性是由栈底向栈顶传递的。</p>
<p>为了达到传递两种不同属性的目的，我们需要设计不同的方法：<br>针对1，由于1的传递顺序是和弹栈顺序相同（栈顶-&gt;栈底），则直接在调用相应的语义子程序时顺水推舟传到栈底即可，即在语义子程序中加入诸如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stack[top–n].put(“attribute_name”,”attribute_value”)</div></pre></td></tr></table></figure></p>
<p>的操作即可完成栈顶方向属性向栈底传递的操作。</p>
<p>针对2，由于2的传递顺序和弹栈方向相反（栈底-&gt;栈顶），也就意味着，对于先入栈的元素，它的属性有可能传递给后入栈的元素，我们可以用全局变量的方式来实现这个顺序的属性传递。先入栈的元素把它的属性放到一个全局变量里面，后入栈的元素根据需要去全局变量里面查找属性即可。<br>还有一些其他问题，比如属性名重复等等，这个请读者具体问题具体分析自行解决。</p>
<p>做了这些储备之后，就基本可以着手实现了，首先是改造文法，思考并实现SDD，实际上这个过程还是有点难的，可以一步一步地先看看龙书上的样例SDD，再改造自己的文法：</p>
<p>实验二中的文法加入了语义子程序，实际上就是一个字符串，总控程序解析这个字符串判断调用哪个语义动作子程序，下面是我的文法产生式样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line">type_specifier -&gt; CHAR | INT act2 | FLOAT act3 | CHAR*</div><div class="line">#</div><div class="line">declarator -&gt; IDN act4 declarator&apos;</div><div class="line">declarator&apos; -&gt; [ CONST_INT ] act5 declarator&apos; | $ act6</div><div class="line">#</div></pre></td></tr></table></figure></p>
<p>总控程序如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据当前文法分析句子，输出分析结果</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> sentence</div><div class="line"> *            要分析的语句（Token表示）</div><div class="line"> * <span class="doctag">@param</span> startChar</div><div class="line"> *            当前文法的起始符号</div><div class="line"> * <span class="doctag">@return</span> 返回自顶向下推导序列</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Production&gt; <span class="title">Analysis</span><span class="params">(ArrayList&lt;Token&gt; sentence,</span></span></div><div class="line">        String startChar) &#123;</div><div class="line">    ArrayList&lt;Production&gt; productionSequences = <span class="keyword">new</span> ArrayList&lt;Production&gt;();</div><div class="line">    Stack&lt;Object&gt; prodChars = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">    prodChars.push(<span class="string">"#"</span>);</div><div class="line">    prodChars.push(GrammerAnalysis.nCharacters.get(startChar));</div><div class="line">    <span class="comment">// sentence = sentence + "#";</span></div><div class="line">    sentence.add(<span class="keyword">new</span> Token(<span class="string">"#"</span>, <span class="string">"#"</span>));</div><div class="line">    <span class="keyword">int</span> currentIndex = <span class="number">0</span>; <span class="comment">// 当前分析到的下标</span></div><div class="line">    HashMap&lt;String, String&gt; recentAttr = <span class="keyword">null</span>; <span class="comment">// 语义子程序的参数</span></div><div class="line">    HashMap&lt;String, Stack&lt;String&gt;&gt; attachAttr = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 语义子程序的参数</span></div><div class="line">    attachAttr.put(<span class="string">"MostRecentIDN"</span>, <span class="keyword">new</span> Stack&lt;String&gt;());</div><div class="line">    attachAttr.put(<span class="string">"MostRecentConstInt"</span>, <span class="keyword">new</span> Stack&lt;String&gt;());</div><div class="line">    <span class="keyword">while</span> ((prodChars.peek() <span class="keyword">instanceof</span> HashMap&lt;?, ?&gt;)</div><div class="line">            || (prodChars.peek() <span class="keyword">instanceof</span> String &amp;&amp; !<span class="string">"#"</span>.equals(prodChars</div><div class="line">                    .peek())) || prodChars.peek() <span class="keyword">instanceof</span> MyCharacter) &#123;</div><div class="line">        <span class="comment">// outputStack(prodChars);</span></div><div class="line">        Object X = prodChars.peek();</div><div class="line">        <span class="keyword">if</span> (X <span class="keyword">instanceof</span> MyCharacter) &#123; <span class="comment">// X是一个文法符号</span></div><div class="line">            String a = <span class="string">""</span>;</div><div class="line">            <span class="keyword">if</span> (currentIndex &lt; sentence.size()) &#123;</div><div class="line">                a = sentence.get(currentIndex).getToken();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (X <span class="keyword">instanceof</span> TerminateCharacter</div><div class="line">                    || <span class="string">"#"</span>.equals(((MyCharacter) X).what)) &#123;</div><div class="line">                <span class="keyword">if</span> (a.equals(((MyCharacter) X).what)) &#123;</div><div class="line">                    <span class="keyword">if</span> (!<span class="string">"#"</span>.equals(X)) &#123;</div><div class="line">                        prodChars.pop();</div><div class="line">                        <span class="keyword">if</span> (<span class="string">"IDN"</span>.equals(((MyCharacter) X).what)) &#123;</div><div class="line">                            attachAttr.get(<span class="string">"MostRecentIDN"</span>).push(</div><div class="line">                                    sentence.get(currentIndex).getValue());</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"CONST_INT"</span></div><div class="line">                                .equals(((MyCharacter) X).what)) &#123;</div><div class="line">                            attachAttr.get(<span class="string">"MostRecentConstInt"</span>).push(</div><div class="line">                                    sentence.get(currentIndex).getValue());</div><div class="line">                        &#125;</div><div class="line">                        currentIndex++;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    String eStr = ((MyCharacter) prodChars.pop()).what;</div><div class="line">                    System.err.println(<span class="string">"ERROR,Ignore Char : "</span> + eStr);</div><div class="line">                    <span class="comment">// break;</span></div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ArrayList&lt;String&gt; item = GrammerAnalysis.ForecastTable.get(</div><div class="line">                        ((MyCharacter) X).what).get(a);</div><div class="line">                <span class="keyword">if</span> (item != <span class="keyword">null</span>) &#123;</div><div class="line">                    prodChars.pop();</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = item.size() - <span class="number">1</span>; i &gt; -<span class="number">1</span>; i--) &#123;</div><div class="line">                        <span class="keyword">if</span> (<span class="string">"$"</span>.equals(item.get(i))) &#123;</div><div class="line">                            <span class="keyword">continue</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> (isNCharacter(item.get(i))) &#123;</div><div class="line">                            prodChars.push(<span class="keyword">new</span> HashMap&lt;String, String&gt;()); <span class="comment">// 非终结符入栈的同时，把用于存放它综合属性的Hash表也入栈</span></div><div class="line">                            prodChars.push(GrammerAnalysis.nCharacters</div><div class="line">                                    .get(item.get(i)));</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isTCharacter(item.get(i))) &#123;</div><div class="line">                            prodChars.push(GrammerAnalysis.tCharacters</div><div class="line">                                    .get(item.get(i)));</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.get(i).startsWith(<span class="string">"act"</span>)) &#123;</div><div class="line">                            prodChars.push(item.get(i));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    productionSequences.add(<span class="keyword">new</span> Production(</div><div class="line">                            ((MyCharacter) X).what, item));</div><div class="line">                    System.out.println(((MyCharacter) X).what + <span class="string">" -&gt; "</span></div><div class="line">                            + item);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (((NonterminalCharacter) GrammerAnalysis.nCharacters</div><div class="line">                            .get(X)).Sync.contains(a)) &#123;</div><div class="line">                        String eStr = ((MyCharacter) prodChars.pop()).what;</div><div class="line">                        System.err.println(<span class="string">"ERROR,Have Pop NCharacter: "</span></div><div class="line">                                + eStr);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        String eStr = a;</div><div class="line">                        System.err.println(<span class="string">"ERROR,-Ignore Char : "</span> + eStr);</div><div class="line">                        currentIndex++;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// break;</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (X <span class="keyword">instanceof</span> HashMap&lt;?, ?&gt;) &#123; <span class="comment">// X是上一个文法符号的综合属性</span></div><div class="line">            recentAttr = (HashMap&lt;String, String&gt;) prodChars.pop();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (X <span class="keyword">instanceof</span> String) &#123; <span class="comment">// X是一个语义子程序</span></div><div class="line">            String s = (String) prodChars.pop(); <span class="comment">// 解析字符串判断该调用哪个语义子程序</span></div><div class="line">            SDTUtil.execAction(Integer.parseInt(s.substring(<span class="number">3</span>)), prodChars,</div><div class="line">                    recentAttr, attachAttr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> productionSequences;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在写总控程序时，要时刻牢记LL分析法的语法分析树的遍历的顺序，根据这一点编写总控程序。</p>
<p>此外，Java的Stack类只提供了对当前栈顶元素操作的接口，如果想对非栈顶元素进行操作，可以这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">act10</span><span class="params">(Stack&lt;Object&gt; stack,</span></span></div><div class="line">        HashMap&lt;String, String&gt; recentAttribute,</div><div class="line">        HashMap&lt;String, Stack&lt;String&gt;&gt; attachAttribute) &#123;</div><div class="line">    Stack&lt;Object&gt; tmpStack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        tmpStack.push(stack.pop());</div><div class="line">    &#125;</div><div class="line">    ((HashMap&lt;String, String&gt;) stack.peek()).put(</div><div class="line">            <span class="string">"postfix_expression.result"</span>,</div><div class="line">            recentAttribute.get(<span class="string">"primary_expression.result"</span>));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">        stack.push(tmpStack.pop());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的语义子程序完成的就是将某一栈顶的属性传递给stack[top - 2]的属性。</p>
<p>这次实验过程有点复杂，但是如果一步一步梳理下来收获还是不小的，虽然可能实验完成的不怎么样，但是也还是很有成就感的，欢迎讨论。</p>
<p>另附上Java中将标准输出重定向到文件流的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    System.setOut(<span class="keyword">new</span> PrintStream(<span class="keyword">new</span> FileOutputStream(</div><div class="line">            FileAccessUtil.ROOT_DIR + <span class="string">"result.txt"</span>)));</div><div class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[虾米网签到脚本——Python实现]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/11/19/xiami-checkin-python/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>这个脚本完成了自动登录虾米网、签到的功能。</p>
<a id="more"></a>
<p>大致要用到urllib、urllib2、cookielib这几个模块。其实就是用python实现向指定的url去post数据。</p>
<p>至于我怎么知道在浏览器里面登录和签到时浏览器都向服务器post了什么数据的问题，可以用强大的chrome：F12-&gt;Network里面可以看得到。有的服务器登录成功后会让客户端浏览器跳转或者立即刷新一次页面等等，会把登录时向服务器post的数据刷没掉，那么就要用到强大的抓包软件——WireShark来分析。比如用chrome：</p>
<p><img src="http://vars.qiniudn.com/xiami_login_1.jpg" alt=""></p>
<p>然后就可以写了，构造Request Headers和要Post的Data（就是Chrome里的Form Data），ID和Pwd是明文传输，呵呵。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>下面是代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: cp936 -*-</span></div><div class="line"><span class="string">'''</span></div><div class="line">Created on 2012-11-15</div><div class="line"></div><div class="line">@author: liushuai</div><div class="line">'''</div><div class="line"><span class="keyword">import</span> urllib, urllib2, cookielib, sys</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginXiami</span>:</span></div><div class="line">    login_header = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.79 Safari/537.4'</span>&#125;</div><div class="line">    signin_header = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.79 Safari/537.4'</span>, <span class="string">'X-Requested-With'</span>:<span class="string">'XMLHttpRequest'</span>, <span class="string">'Content-Length'</span>:<span class="number">0</span>, <span class="string">'Origin'</span>:<span class="string">'http://www.xiami.com'</span>, <span class="string">'Referer'</span>:<span class="string">'http://www.xiami.com/'</span>&#125;</div><div class="line">    email = <span class="string">''</span></div><div class="line">    password = <span class="string">''</span></div><div class="line">    cookie = <span class="keyword">None</span></div><div class="line">    cookieFile = <span class="string">'./cookie.dat'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, email, pwd)</span>:</span></div><div class="line">        self.email = email</div><div class="line">        self.password = pwd</div><div class="line">        self.cookie = cookielib.LWPCookieJar()</div><div class="line">        opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(self.cookie))</div><div class="line">        urllib2.install_opener(opener)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></div><div class="line">        postdata = &#123;<span class="string">'email'</span>:self.email, <span class="string">'password'</span>:self.password, <span class="string">'done'</span>:<span class="string">'http://www.xiami.com'</span>, <span class="string">'submit'</span>:<span class="string">'%E7%99%BB+%E5%BD%95'</span>&#125;</div><div class="line">        postdata = urllib.urlencode(postdata)</div><div class="line">        <span class="keyword">print</span> <span class="string">'Logining...'</span></div><div class="line">        req = urllib2.Request(url=<span class="string">'http://www.xiami.com/member/login'</span>, data=postdata, headers=self.login_header)</div><div class="line">        result = urllib2.urlopen(req).read()</div><div class="line">        self.cookie.save(self.cookieFile)</div><div class="line">        result = str(result).decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</div><div class="line">        <span class="keyword">if</span> <span class="string">'Email 或者密码错误'</span> <span class="keyword">in</span> result:</div><div class="line">            <span class="keyword">print</span> <span class="string">'Login failed due to Email or Password error...'</span></div><div class="line">            sys.exit()</div><div class="line">        <span class="keyword">else</span> :</div><div class="line">            <span class="keyword">print</span> <span class="string">'Login successfully!'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signIn</span><span class="params">(self)</span>:</span></div><div class="line">        postdata = &#123;&#125;</div><div class="line">        postdata = urllib.urlencode(postdata)</div><div class="line">        <span class="keyword">print</span> <span class="string">'signing...'</span></div><div class="line">        req = urllib2.Request(url=<span class="string">'http://www.xiami.com/task/signin'</span>, data=postdata, headers=self.signin_header)</div><div class="line">        result = urllib2.urlopen(req).read()</div><div class="line">        result = str(result).decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</div><div class="line">        self.cookie.save(self.cookieFile)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            result = int(result)</div><div class="line">        <span class="keyword">except</span> ValueError:</div><div class="line">            <span class="keyword">print</span> <span class="string">'signing failed...'</span></div><div class="line">            sys.exit()</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'signing failed due to unknown reasons ...'</span></div><div class="line">            sys.exit()</div><div class="line">        <span class="keyword">print</span> <span class="string">'signing successfully!'</span></div><div class="line">        <span class="keyword">print</span> self.email,<span class="string">'have signed'</span>, result, <span class="string">'days continuously...'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    user = LoginXiami(<span class="string">'你的登录邮箱'</span>, <span class="string">'你的密码'</span>)</div><div class="line">    user.login()</div><div class="line">    user.signIn()</div></pre></td></tr></table></figure></p>
<p>然后运行一下脚本就可以登录、签到了。</p>
<p><img src="http://vars.qiniudn.com/xiami_login_2.jpg" alt=""></p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>有的Discuz!论坛据说是为了防止用户用网页之外的途径向服务器post数据，服务器在每个用户每次登录成功后生成一个叫formhash的值，作为表单的隐藏域返回给客户端（服务端也有保存）。</p>
<p><img src="http://vars.qiniudn.com/xiami_login_3.jpg" alt=""></p>
<p>客户端在向服务器post数据的时候，这个值会作为表单的一项数据“神不知鬼不觉”（因为是表单的隐藏域）地一同post过去，服务端收到客户端的post请求后，和服务端的formhash值作对比，就能知道是否是通过浏览器页面的方式post的数据了。</p>
<p>不过如果真的是为了防止这，这个做法真的有用吗？我试了一下，只需用简单的正则分析下登录成功返回的html，找到formhash值，再用上述方法和理论post过去即可，成功的完成了签到的功能。</p>
<p>反正不管怎么说，就是用脚本“假装”地完成了一下用浏览器登录并签到的过程。</p>
<h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><p>由于网站可能进行改版或升级，那么向服务器中post的数据可能会有变化，那么就要对代码进行相应调整，故代码仅供研究和学习参考之用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[哈工大软件学院编译原理实验2——语法分析]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/11/10/HIT-Compilers-exercise-2/</url>
      <content type="html"><![CDATA[<p>这次实验让人煞费苦心啊，话说我已经写了一天的C语言文法了，囧。</p>
<p>总结一下，可以说：程序编写很帅很顺利，文法编写很挫很纠结。我用的是LL(1)分析法（又叫预测分析法），开始的时候花了一段时间来理解LL(1)算法，后来到设计、实现、各种测试，可谓经历了一番波折。记得刚开始写的时候想用C++，后来发现竟然忘的差不多了，囧，于是索性挫到底——用Java实现，轻喷啊。<a id="more"></a></p>
<p>这次实验的内容就是让你采用一种语法分析技术分析类高级语言中的基本语句，至少包括函数定义、变量说明、赋值、循环、分支等语句，同时还必须让程序有一定的错误处理的机制。</p>
<p>开始要精度ppt和龙书相关的章节，知道这个LL(1)分析法到底是个啥，具体的相关的知识我不再赘述，其实我弄得也不是特别透彻，首先得知道LL(1)分析器的系统结构吧：</p>
<p><img src="http://vars.qiniudn.com/bianyiyuanli_1.jpg" alt=""></p>
<p>有一句话很重要，<strong>LL(1)分析器是模拟了最左推导的过程</strong>，这句话对理解LL(1)很有帮助。</p>
<p>然后要理解LL(1)的通用控制算法：</p>
<p><img src="http://vars.qiniudn.com/bianyiyuanli_2.jpg" alt=""></p>
<p>漂亮，其实说的通俗一点，LL(1)分析器有一个栈，用来存放推导式，在分析的过程中，由当前栈顶元素和当前输入符号来决定下一步的操作（比如使用哪个产生式继续往下推导，或者弹出栈顶元素前移输入指针，或者报错等操作），另外不要忘了，LL(1)分析法是在模拟最左推导。</p>
<p>根据这个算法，我们要做的事就是构造预测分析表，根据通用控制算法写总控程序，此外，构造预测分析法要用到文法每个产生式的SELECT集，构造SELECT集需要求出每个终结符和非终结符的First集，还要求出每个非终结符的Follow集。</p>
<p>由于代码太多，这次不贴代码了，只是大体说说我的数据结构的设计。</p>
<p>我为非终结符和终结符设计了一个基类（尽管很多情况下我设计的基类被人说成是鸡肋，我还是喜欢这样做）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCharacter</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String what;</div><div class="line">    <span class="keyword">public</span> List&lt;String&gt; First;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCharacter</span><span class="params">()</span> </span>&#123;</div><div class="line">        First = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后终结符和非终结符继承这个基类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminateCharacter</span> <span class="keyword">extends</span> <span class="title">MyCharacter</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TerminateCharacter</span><span class="params">(String what)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.what = what;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonterminalCharacter</span> <span class="keyword">extends</span> <span class="title">MyCharacter</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;String&gt; Follow;</div><div class="line">    <span class="keyword">public</span> List&lt;String&gt; Sync;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NonterminalCharacter</span><span class="params">(String what)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.what = what;</div><div class="line">        Follow = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        Sync = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据一些启发式的方法设置该终结符的同步记号集合，即把该终结符的FOLLOW集、FIRST集加入Sync集</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSync</span><span class="params">()</span> </span>&#123;</div><div class="line">        Sync.addAll(Follow); <span class="comment">// 添加Follow集</span></div><div class="line">        <span class="keyword">for</span> (String s : First) &#123; <span class="comment">// 添加First集</span></div><div class="line">            <span class="keyword">if</span> (!Sync.contains(s)) &#123;</div><div class="line">                Sync.add(s);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此外，产生式也作为程序的一个实体类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Production</span> </span>&#123;</div><div class="line">    <span class="comment">// 产生式的左部</span></div><div class="line">    <span class="keyword">private</span> String Left;</div><div class="line">    <span class="comment">// 产生式的右部</span></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; right;</div><div class="line">    <span class="comment">// 产生式的Select集</span></div><div class="line">    <span class="keyword">public</span> ArrayList&lt;String&gt; Select;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Production</span><span class="params">(String left, ArrayList&lt;String&gt; right)</span> </span>&#123;</div><div class="line">        Left = left;</div><div class="line">        <span class="keyword">this</span>.right = right;</div><div class="line">        <span class="keyword">this</span>.Select = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(String left)</span> </span>&#123;</div><div class="line">        Left = left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getRight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(ArrayList&lt;String&gt; right)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.right = right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于语法分析的输入是词法分析的Token序列，因此，我为读到程序里的Token也设计了一个实体类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Token</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String token;</div><div class="line">    <span class="keyword">private</span> String value;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Token</span><span class="params">(String token, String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.token = token;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> token;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToken</span><span class="params">(String token)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.token = token;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当一个文法确定下来，这个文法的非终结符、终结符、产生式以及这个文法的预测分析表（前提是该文法必须是LL(1)文法，而且产生式已经消除了回溯和左递归）都会确定下来，他们的数据结构如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 非终结符</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, MyCharacter&gt; nCharacters = <span class="keyword">new</span> HashMap&lt;String, MyCharacter&gt;();</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 终结符</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, MyCharacter&gt; tCharacters = <span class="keyword">new</span> HashMap&lt;String, MyCharacter&gt;();</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 产生式</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Production&gt; productions;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 预测分析表</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, HashMap&lt;String, ArrayList&lt;String&gt;&gt;&gt; ForecastTable = <span class="keyword">new</span> HashMap&lt;String, HashMap&lt;String, ArrayList&lt;String&gt;&gt;&gt;();</div></pre></td></tr></table></figure></p>
<p>终结符和非终结符用了一个Map，这个Map用字符本身作为key，该字符同时为这个字符new一个NonterminalCharacter或者TerminateCharacter的对象作为相应的value；预测分析表用了一个二维的Hash表，在查表时可以通过<code>ForecastTable.get(X).get(a)</code>完成。</p>
<p>在写程序的时候要用到一个算法，判断一个非终结符能不能经过N步推导推出空串，这个方法贴出来写下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 递归判断X可否推出空串</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> X</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">canLeadNull</span><span class="params">(String X)</span> </span>&#123;</div><div class="line">    <span class="comment">// X是终结符，则X不可能推出空串</span></div><div class="line">    <span class="keyword">if</span> (isTCharacter(X)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// X是非终结符</span></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 查找Cache表</span></div><div class="line">        <span class="keyword">if</span> (GrammerAnalysis.canLeadNullList.contains(X)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (Production p : GrammerAnalysis.productions) &#123;</div><div class="line">            <span class="keyword">if</span> (X.equals(p.getLeft())) &#123;</div><div class="line">                <span class="comment">// 存在一个 X=&gt;$ 的产生式，则说明X可以推出空串</span></div><div class="line">                <span class="keyword">if</span> (<span class="string">"$"</span>.equals(p.getRight().get(<span class="number">0</span>))) &#123;</div><div class="line">                    <span class="comment">// 把X加入Cache</span></div><div class="line">                    GrammerAnalysis.canLeadNullList.add(X);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 当前产生式不是 X=&gt;$ ，递归调用</span></div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.getRight().size(); i++) &#123;</div><div class="line">                        <span class="comment">// 当前产生式不能产生空串</span></div><div class="line">                        <span class="keyword">if</span> (!canLeadNull(p.getRight().get(i))) &#123;</div><div class="line">                            flag = <span class="keyword">false</span>;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (flag == <span class="keyword">true</span>) &#123;</div><div class="line">                        <span class="comment">// 把X加入Cache</span></div><div class="line">                        GrammerAnalysis.canLeadNullList.add(X);</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面程序的Cache是个啥呢？我们知道，递归一般是很耗资源的，既然文法确定了，那么一个终结符经过判断如果能推出空串，就不会变了，我们把能推出空串的非终结符保存起来，下次直接去查表不就不用再递归判断了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 为了提高递归的效率, 如果某个终结符经过N步推导后能推出空串，则把这个非终结符放在这个集合中 相当于cache</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; canLeadNullList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div></pre></td></tr></table></figure>
<p>这个函数的编写是根据一个“公理”，即：一个非终结符序列可以经过N步推导推出空串的充要条件是构成它的每一个非终结符都能经过N步推导推出空串，所以很显然递归是方便快捷的方式。</p>
<p>下面是总控程序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据当前文法分析句子，输出分析结果</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> sentence</div><div class="line"> *            要分析的语句（Token表示）</div><div class="line"> * <span class="doctag">@param</span> startChar</div><div class="line"> *            当前文法的起始符号</div><div class="line"> * <span class="doctag">@return</span> 返回自顶向下推导序列</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Production&gt; <span class="title">Analysis</span><span class="params">(ArrayList&lt;String&gt; sentence,</span></span></div><div class="line">        String startChar) &#123;</div><div class="line">    ArrayList&lt;Production&gt; productionSequences = <span class="keyword">new</span> ArrayList&lt;Production&gt;();</div><div class="line">    Stack&lt;String&gt; prodChars = <span class="keyword">new</span> Stack&lt;String&gt;();</div><div class="line">    prodChars.push(<span class="string">"#"</span>);</div><div class="line">    prodChars.push(startChar);</div><div class="line">    <span class="comment">// sentence = sentence + "#";</span></div><div class="line">    sentence.add(<span class="string">"#"</span>);</div><div class="line">    <span class="keyword">int</span> currentIndex = <span class="number">0</span>; <span class="comment">// 当前分析到的下标</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (!<span class="string">"#"</span>.equals(prodChars.peek())) &#123;</div><div class="line">        String X = prodChars.peek();</div><div class="line">        String a = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span> (currentIndex &lt; sentence.size()) &#123;</div><div class="line">            a = sentence.get(currentIndex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (isTCharacter(X) || <span class="string">"#"</span>.equals(X)) &#123;</div><div class="line">            <span class="keyword">if</span> (a.equals(X)) &#123;</div><div class="line">                <span class="keyword">if</span> (!<span class="string">"#"</span>.equals(X)) &#123;</div><div class="line">                    prodChars.pop();</div><div class="line">                    currentIndex++;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                String eStr = prodChars.pop();</div><div class="line">                System.err.println(<span class="string">"ERROR,Ignore Char : "</span> + eStr);</div><div class="line">                <span class="comment">// break;</span></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ArrayList&lt;String&gt; item = GrammerAnalysis.ForecastTable.get(X)</div><div class="line">                    .get(a);</div><div class="line">            <span class="keyword">if</span> (item != <span class="keyword">null</span>) &#123;</div><div class="line">                prodChars.pop();</div><div class="line">                <span class="keyword">if</span> (!<span class="string">"$"</span>.equals(item.get(<span class="number">0</span>))) &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = item.size() - <span class="number">1</span>; i &gt; -<span class="number">1</span>; i--) &#123;</div><div class="line">                        prodChars.push(item.get(i));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                productionSequences.add(<span class="keyword">new</span> Production(X, item));</div><div class="line">                System.out.println(X + <span class="string">" -&gt; "</span> + item);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (((NonterminalCharacter) GrammerAnalysis.nCharacters</div><div class="line">                        .get(X)).Sync.contains(a)) &#123;</div><div class="line">                    String eStr = prodChars.pop();</div><div class="line">                    System.err</div><div class="line">                            .println(<span class="string">"ERROR,Have Pop NCharacter: "</span> + eStr);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    String eStr = a;</div><div class="line">                    System.err.println(<span class="string">"ERROR,-Ignore Char : "</span> + eStr);</div><div class="line">                    currentIndex++;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// break;</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> productionSequences;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至于C语言文法的编写，我参考了网上流传很广的一份神文法写的。写的各种纠结，各种消除左递归，消除回溯。</p>
<p>由于现在我的文法还有bug，故暂时不贴出来了，代码和数据结构设计仅供参考。</p>
<p>下周有用户界面设计的考试，下下周有计算机安全概论和知识产权法的考试，任重而道远啊。</p>
<p>欢迎留言讨论。</p>
<hr>
<p>后记：</p>
<p>唉，又调了一下午的文法，终于大部分都基本搞定了，不过这个文法还存在缺陷，还是贴出来吧，毕竟我花了好多心血在里面，各种消除回溯，消除左递归：</p>
<p>缺陷记录：</p>
<p>1.if-else有缺陷，其中selection_statement’的Select集竟然相交了，That is to say，if-else那部分不符合LL（1）文法，即，不支持else子句，求鄙视<br>2.函数调用只支持带参数的函数调用。<code>postfix_expression&#39; -&gt; ( const_expression_list )</code>这一句有点猥琐，如果这句支持无参函数调用的话又会出现if-else的情况。<br>3.给数组的某一个具体项赋值时有缺陷，不能这样复制b[3] = b[2]。<br>上述缺陷如果有时间我还愿意去调试，不过有点调不动了，仅供大家参考。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">program -&gt; external_declaration program&apos;</div><div class="line">program&apos; -&gt; external_declaration program&apos; | $</div><div class="line">#</div><div class="line">external_declaration -&gt; function_definition</div><div class="line">#</div><div class="line">function_definition -&gt; type_specifier declarator_for_fun compound_statement</div><div class="line">#</div><div class="line">type_specifier -&gt; CHAR | INT | FLOAT | CHAR*</div><div class="line">#</div><div class="line">declarator_for_fun -&gt; IDN ( declarator_for_fun&apos;</div><div class="line">declarator_for_fun&apos; -&gt; ) | parameter_list )</div><div class="line">#</div><div class="line">declarator -&gt; IDN declarator&apos;</div><div class="line">declarator&apos; -&gt; [ CONST_INT ] declarator&apos; | $</div><div class="line">#</div><div class="line">#identifer_list -&gt; IDN identifer_list&apos;</div><div class="line">#identifer_list&apos; -&gt; , IDN identifer_list&apos; | $</div><div class="line">#</div><div class="line">parameter_list -&gt; parameter_declaration parameter_list&apos;</div><div class="line">parameter_list&apos; -&gt; , parameter_declaration parameter_list&apos; | $</div><div class="line">parameter_declaration -&gt; type_specifier IDN</div><div class="line">#</div><div class="line">compound_statement -&gt; &#123; compound_statement&apos;</div><div class="line">compound_statement&apos; -&gt; &#125; | statement_list &#125; | declaration_list statement_list &#125;</div><div class="line">#</div><div class="line">declaration_list -&gt; declaration declaration_list&apos;</div><div class="line">declaration_list&apos; -&gt; declaration declaration_list&apos; | $</div><div class="line">declaration -&gt; type_specifier init_declarator declaration&apos;</div><div class="line">declaration&apos; -&gt; , init_declarator declaration&apos; | $</div><div class="line">init_declarator -&gt; declarator init_declarator&apos;</div><div class="line">init_declarator&apos; -&gt; $ | = initializer</div><div class="line">initializer -&gt; assigment_expression | &#123; const_expression_list &#125;</div><div class="line">#</div><div class="line">statement_list -&gt; statement statement_list&apos;</div><div class="line">statement_list&apos; -&gt; statement statement_list&apos; | $</div><div class="line">#</div><div class="line">statement -&gt; compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement | declaration_list</div><div class="line">#</div><div class="line">expression_statement -&gt; ; | expression ;</div><div class="line">#</div><div class="line">selection_statement -&gt; IF ( expression ) statement selection_statement&apos;</div><div class="line">selection_statement&apos; -&gt; $ | ELSE statement</div><div class="line">#</div><div class="line">iteration_statement -&gt; WHILE ( expression ) statement | FOR ( expression_statement expression_statement expression ) statement</div><div class="line">#</div><div class="line">jump_statement -&gt; CONTINUE ; | BREAK ; | RETURN ; | RETURN expression ;</div><div class="line">#</div><div class="line">expression -&gt; assigment_expression expression&apos;</div><div class="line">expression&apos; -&gt; , assigment_expression expression&apos; | $</div><div class="line">#</div><div class="line">assigment_expression -&gt; IDN assigment_expression&apos;&apos; | const_expression assigment_expression&apos;</div><div class="line">assigment_expression&apos;&apos; -&gt; assigment_expression&apos; | = logical_or_expression</div><div class="line">assigment_expression&apos; -&gt; &gt; logical_or_expression | &lt; logical_or_expression | &gt;= logical_or_expression | &lt;= logical_or_expression | == logical_or_expression | != logical_or_expression | AND_OP logical_or_expression | OR_OP logical_or_expression | + logical_or_expression | - logical_or_expression | / logical_or_expression | * logical_or_expression | % logical_or_expression | $</div><div class="line">logical_or_expression -&gt; logical_and_expression logical_or_expression&apos;</div><div class="line">logical_or_expression&apos; -&gt; OR_OP logical_and_expression logical_or_expression&apos; | $</div><div class="line">#</div><div class="line">logical_and_expression -&gt; equality_expression logical_and_expression&apos;</div><div class="line">logical_and_expression&apos; -&gt; AND_OP equality_expression logical_and_expression&apos; | $</div><div class="line">#</div><div class="line">equality_expression -&gt; relational_expression equality_expression&apos;</div><div class="line">equality_expression&apos; -&gt; == relational_expression equality_expression&apos; | $</div><div class="line">equality_expression&apos; -&gt; != relational_expression equality_expression&apos; | $</div><div class="line">#</div><div class="line">relational_expression -&gt; shift_expression relational_expression&apos;</div><div class="line">relational_expression&apos; -&gt; &gt; shift_expression relational_expression&apos; | $</div><div class="line">relational_expression&apos; -&gt; &lt; shift_expression relational_expression&apos; | $</div><div class="line">relational_expression&apos; -&gt; &gt;= shift_expression relational_expression&apos; | $</div><div class="line">relational_expression&apos; -&gt; &lt;= shift_expression relational_expression&apos; | $</div><div class="line">#</div><div class="line">shift_expression -&gt; multiplicative_expression shift_expression&apos;</div><div class="line">shift_expression&apos; -&gt; + multiplicative_expression shift_expression&apos; | $</div><div class="line">shift_expression&apos; -&gt; - multiplicative_expression shift_expression&apos; | $</div><div class="line">#</div><div class="line">multiplicative_expression -&gt; cast_expression multiplicative_expression&apos;</div><div class="line">multiplicative_expression&apos; -&gt; % cast_expression multiplicative_expression&apos; | $</div><div class="line">multiplicative_expression&apos; -&gt; / cast_expression multiplicative_expression&apos; | $</div><div class="line">multiplicative_expression&apos; -&gt; * cast_expression multiplicative_expression&apos; | $</div><div class="line">#</div><div class="line">cast_expression -&gt; postfix_expression</div><div class="line">#</div><div class="line">postfix_expression -&gt; primary_expression postfix_expression&apos;</div><div class="line">postfix_expression&apos; -&gt; [ expression ] postfix_expression&apos; | $</div><div class="line">postfix_expression&apos; -&gt; ( const_expression_list )</div><div class="line">#</div><div class="line">primary_expression -&gt; IDN | const_expression | ( expression )</div><div class="line">const_expression -&gt; CONST_INT | CONST_FLOAT | CHAR* | CHAR</div><div class="line">#</div><div class="line">const_expression_list -&gt; const_expression const_expression_list&apos;</div><div class="line">const_expression_list&apos; -&gt; , const_expression const_expression_list&apos; | $</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一年又一年]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/11/02/year-by-year/</url>
      <content type="html"><![CDATA[<p>又到了周末，一样的场景，大家玩Dota正high，我看着蛋疼的句法分析器，想撸几行代码把SELECT集算出来，但思绪告诉我，它不想工作。</p>
<p>生活，不就是一个一个的循环吗？一周又一周，一年又一年。<a id="more"></a></p>
<p>一个师兄拒了Baidu签了360。我在想，还有一年，面对选择，面对变动，我该何去何从呢？</p>
<p>昨天，第三届Android开发挑战赛的结果出来了，第一次参加，东北赛区三等奖，我只能说这样的结果，差强人意。</p>
<p>现在仍记得开发Ting时的种种滋味，各方压力压的我透不过气来，到后期完全不抱任何信心，说实话自己都不抱任何信心。那时候，最多的感受就是，自己已经被世界抛弃了，我就在一个人苦撑，毫不夸张，啧啧。我真正体会到了食之无味是什么感觉，学苑二楼熟悉的饭菜，怎么吃怎么没味道，二十多岁的小伙还让父母督促吃饭…到提交的前一晚，毫无悬念地通宵，紧急修bug，添加新feature，用Cliff的话来说就是“达到最大化的演示效果”。</p>
<p>OK，回忆到此结束，下面展望下未来。</p>
<p>我发现，要学的东西还有太多太多，突然有了一种，“吾生而有涯，而知也无涯”的感觉。我要继续用好Python，貌似一段时间后还要转战Windows Phone的开发，最近还在看一本叫《Android内核剖析》的书，希望能从底层知其所以然吧；如果还有精力，我还想学学JS，学学前端程序员的一些知识；再有精力，我要学一些框架；当然，梦想很丰满，现实很骨感。</p>
<p>自我感觉在学术上我还是个踏实靠谱的人。我最不喜欢的一类人就是，整天耍嘴皮子磨人际关系的，这简直一点用都没有。</p>
<hr>
<p>　　“同学，你第二次OS实验做了吗？我有个问题一直不知道咋办。”<br>　　“做了一点…”<br>　　“那你能过来帮我看看吗？”<br>　　“好！”<br>　　　　　　　　　　　　　　　　　　　　　——Our Anniversary</p>
<hr>
<p>生活就像一件艺术品，需要人精心雕琢。<br>——liushuaikobe<br>2012.11.02</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用户界面设计小Quiz——缺省值问题]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/10/26/HIT-UI-design-quiz/</url>
      <content type="html"><![CDATA[<p>2010级本科《用户界面设计》课堂Quiz（3）中有一道这样的题：<a id="more"></a></p>
<p><img src="http://vars.qiniudn.com/UI_quiz_1.jpg" alt=""></p>
<p>我是这样想的：<br>设NANJING出现的几率为x%，用NANJING做缺省值才有意义。<br>当不设置默认值时，每个地名出现时的按键次数如下表所示：</p>
<p><img src="http://vars.qiniudn.com/UI_quiz_2.jpg" alt=""></p>
<p>设置了NANJING作为默认值时，每个地名出现时按键次数为：</p>
<p><img src="http://vars.qiniudn.com/UI_quiz_3.jpg" alt=""></p>
<p>因此，为了使默认值有意义，应保证有默认值“NANJING”时的按键次数比无默认值时的按键次数少。</p>
<p>所以有：<br>9 <em> 21% + 7 </em> 28% + 8 <em> x% + 7 </em> (51 - x)% ≥ 10 <em> 21% + 12 </em> 28% + x% + 14 * (51 - x)%<br>解得 x ≥ 37%<br>故，若用南京作为缺省值，则它的出现几率至少为37%时，才有意义。</p>
<p>范老师说，以后可以用数据说服别人，我想还是有道理的。</p>
<p>可能由于题目歧义或者个人理解不同，还有其他的解法和答案，但这个解法是老师喜闻乐见的；另外，范老师说，回车的那一次按键也是必须算在过程里的，不然虽然对结果没有影响，但是过程是不对的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[哈工大软件学院编译原理实验1——词法分析]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/10/24/HIT-Compilers-exercise-1/</url>
      <content type="html"><![CDATA[<p>这次实验被“过来人”们定位很简单，实验内容如下：</p>
<a id="more"></a>
<hr>
<p>对如下工作进行展开描述<br>(1) 给出语言的词法规则描述<br>· 标识符、关键字、整常数、字符常数、浮点常数<br>· 单界符：＋，－，×，;，…<br>· 双界符：/*，:=，&gt;=，&lt;=，!=，…<br>· 注释<br>(2) 针对这种单词的状态转换图和程序框图<br>(3) 核心数据结构的设计<br>如符号表、关键字等<br>(4) 错误处理<br>错误的位置及类型等</p>
<hr>
<p>这次实验我是用python写了一个简单的C语言的词法分析器，词法分析器的编写有很多种方式，比如可以用正则表达式编写，也可以用LEX工具自动生成，当然，也可以用比较朴素的方式——基于有穷自动机（Finite Automata，FA），也即基于有穷自动机的状态转移来编写程序。</p>
<p>说起这个有穷自动机（Finite Automata，FA），真心感觉是个好东西，分析问题简单清晰，而且很直观。记得对有穷自动机有感性认识是在上学期考试分数并不高的《计算机网络》课上，全龙哥讲那个RDT协议的不同版本的时候，用这个自动机来表明遇到不同情况时发送端和接收端要采取的行动。</p>
<p>自动机的形式化定义：<br>M=(Q，Σ，δ，q0，F)<br>Q→有穷状态集<br>Σ→有穷输入字母表<br>δ→从Q×Σ→2Q的映射函数（2Q是Q的幂集）<br>q0∈Q，是唯一的初态<br>F →终态集合，是Q的子集</p>
<p>这里说说我个人的理解。对有穷自动机的形式化定义的理解比较重要的是上述第三条说明的理解：δ→从Q×Σ→2Q的映射函数。也即这个δ定义了某个具体FA的状态间转移关系，或者说定义了某个FA的状态间转移的规则。所谓状态的幂集就是状态集Q的所有子集构成的集族。则这句话的字面意思是：状态集和字母表的笛卡尔乘积到状态集的幂集的映射函数。</p>
<p>比如：M1 = (Q，Σ，δ，q0，F)，其中Q = {q,q0,q1,q2…,qn}，又((q，a) , {q1,q2,q3})∈δ，也即δ((q,a)) = {q1,q2,q3}。则说明自动机M1有一个状态q，q在遇到字母a的时候，自动机状态可能跳转到q1,q2,q3三个状态。自动机又分为有穷自动机和无穷自动机两种，这里不再赘述。</p>
<p>有穷自动机可以用状态图直观表示，例子见下文中图。</p>
<p>至于词法分析的一些基本知识，简单叙述一下：</p>
<hr>
<p>定义：<br>词法分析器的功能输入源程序，按照构词规则分解成一系列单词符号。单词是语言中具有独立意义的最小单位，包括关键字、标识符、运算符、界符和常量等。<br>(1) 关键字 是由程序语言定义的具有固定意义的标识符。例如，Pascal 中的begin，end，if，while都是保留字。这些字通常不用作一般标识符。<br>(2) 标识符 用来表示各种名字，如变量名，数组名，过程名等等。<br>(3) 常数  常数的类型一般有整型、实型、布尔型、文字型等。<br>(4) 运算符 如+、-、*、/等等。<br>(5) 界符  如逗号、分号、括号、等等。<br>输出：<br>词法分析器所输出单词符号常常表示成如下的二元式：<code>(单词种别，单词符号的属性值)</code>。<br>单词种别通常用整数编码。标识符一般统归为一种。常数则宜按类型（整、实、布尔等）分种。关键字可将其全体视为一种。运算符可采用一符一种的方法。界符一般用一符一种的方法。对于每个单词符号，除了给出了种别编码之外，还应给出有关单词符号的属性信息。单词符号的属性是指单词符号的特性或特征。<br>示例：<br>比如如下的代码段：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(i&gt;=j) i--;</div></pre></td></tr></table></figure></p>
<p>经词法分析器处理后，它将被转为如下的单词符号序列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;while, _&gt;</div><div class="line">&lt;(, _&gt;</div><div class="line">&lt;id, 指向i的符号表项的指针&gt;</div><div class="line">&lt;&gt;=, _&gt;</div><div class="line">&lt;id, 指向j的符号表项的指针&gt;</div><div class="line">&lt;), _&gt;</div><div class="line">&lt;id, 指向i的符号表项的指针&gt;</div><div class="line">&lt;--, _&gt;</div><div class="line">&lt;;, _&gt;</div></pre></td></tr></table></figure></p>
<p>词法分析分析器作为一个独立子程序：<br>词法分析是编译过程中的一个阶段，在语法分析前进行。词法分析作为一遍，可以简化设计，改进编译效率，增加编译系统的可移植性。也可以和语法分析结合在一起作为一遍，由语法分析程序调用词法分析程序来获得当前单词供语法分析使用。</p>
<hr>
<p>我写的这个词法分析器，不是很健全，尤其是错误处理机制，像在字符串识别中，’ab’是C语言中不合法的char变量，但是我的词法分析器不能判断出错误，会死循环；此外，只能识别出有限的关键字、有限形式的字符串（相信读者看懂我的状态机就知道哪里有限了），由于时间不够了，我不想再改了，下面贴出代码，供大家参考。</p>
<p>对了，贴代码之前，先说说我的词法分析器的状态机的设计。</p>
<p>我对“数字”的词法分析用了一个状态机，包括浮点数、整形数，状态机如下：</p>
<p><img src="http://vars.qiniudn.com/bianyiyuanli_3.jpg" alt=""></p>
<p>对“字符（串）”的识别用了一个状态机，包括关键字、char、以及char *，如下：</p>
<p><img src="http://vars.qiniudn.com/bianyiyuanli_4.jpg" alt=""></p>
<p>当然，对C语言的注释的识别也用了一个状态机，必须先把源码中的注释cut掉才能进行分析，如下：</p>
<p><img src="http://vars.qiniudn.com/bianyiyuanli_5.jpg" alt=""></p>
<p>我对运算符的识别（包括双目和单目）没有采用明显的状态机，都是直接分析判断的，实际从某种意义上来讲对它们的分析也是采用了状态机的原理，只是状态机结构比较简单，就没再显式用state表示，它们的状态机实际上如下：</p>
<p><img src="http://vars.qiniudn.com/bianyiyuanli_6.jpg" alt=""></p>
<p>下面上代码：<br>Scanner.py，作为主模块来执行：<br><figure class="highlight python"><figcaption><span>Scanner.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">Created on 2012-10-18</div><div class="line"></div><div class="line">@author: liushuai</div><div class="line">'''</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> Category</div><div class="line"><span class="keyword">import</span> FileAccess</div><div class="line"></div><div class="line">_currentIndex = <span class="number">0</span></div><div class="line">_Tokens = []</div><div class="line">_prog = <span class="string">""</span></div><div class="line">_categoryNo = <span class="number">-1</span></div><div class="line"></div><div class="line">_stateNumber = <span class="number">0</span></div><div class="line">_stateString = <span class="number">0</span></div><div class="line">_potentialNumber = <span class="string">""</span></div><div class="line">_potentialString = <span class="string">""</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readComments</span><span class="params">(prog)</span>:</span></div><div class="line">    <span class="string">'''Read the comments of a program'''</span></div><div class="line">    state = <span class="number">0</span></div><div class="line">    currentIndex, beginIndex, endIndex = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">    commentsIndexs = []</div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> prog:</div><div class="line">        <span class="keyword">if</span> state == <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> c == <span class="string">'/'</span>:</div><div class="line">                beginIndex = currentIndex</div><div class="line">                state = <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">pass</span></div><div class="line">        <span class="keyword">elif</span> state == <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> c == <span class="string">'*'</span>:</div><div class="line">                state = <span class="number">2</span></div><div class="line">            <span class="keyword">else</span> :</div><div class="line">                state = <span class="number">0</span></div><div class="line">        <span class="keyword">elif</span> state == <span class="number">2</span>:</div><div class="line">            <span class="keyword">if</span> c == <span class="string">'*'</span>:</div><div class="line">                state = <span class="number">3</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">pass</span></div><div class="line">        <span class="keyword">elif</span> state == <span class="number">3</span>:</div><div class="line">            <span class="keyword">if</span> c == <span class="string">'*'</span>:</div><div class="line">                <span class="keyword">pass</span></div><div class="line">            <span class="keyword">elif</span> c == <span class="string">'/'</span>:</div><div class="line">                endIndex = currentIndex</div><div class="line">                commentsIndexs.append([beginIndex, endIndex])</div><div class="line">                state = <span class="number">0</span> <span class="comment">#set 0 state</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                state = <span class="number">2</span></div><div class="line">        currentIndex += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> commentsIndexs</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cutComments</span><span class="params">(prog, commentsIndexs)</span>:</span></div><div class="line">    <span class="string">'''cut the comments of the program prog'''</span></div><div class="line">    num = len(commentsIndexs)</div><div class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> prog</div><div class="line">    <span class="keyword">else</span> :</div><div class="line">        comments = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num):</div><div class="line">            comments.append(prog[commentsIndexs[i][<span class="number">0</span>]:commentsIndexs[i][<span class="number">1</span>] + <span class="number">1</span>])</div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> comments:</div><div class="line">            prog = prog.replace(item, <span class="string">""</span>)</div><div class="line">        <span class="keyword">return</span> prog</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(helper)</span>:</span></div><div class="line">    <span class="string">'''scan the program, and analysis it'''</span></div><div class="line">    <span class="keyword">global</span> _stateNumber, _stateString, _currentIndex, _Tokens, _prog, _categoryNo, _potentialNumber, _potentialString</div><div class="line">    currentChar = _prog[_currentIndex]</div><div class="line">    <span class="comment">######################################CHAR STRING######################################</span></div><div class="line">    <span class="keyword">if</span> currentChar == <span class="string">'\''</span> <span class="keyword">or</span> currentChar == <span class="string">'\"'</span> <span class="keyword">or</span> currentChar <span class="keyword">in</span> string.letters + <span class="string">"_$\\%\@"</span>  <span class="keyword">or</span> (currentChar <span class="keyword">in</span> string.digits <span class="keyword">and</span> _stateString != <span class="number">0</span>):</div><div class="line">        <span class="keyword">if</span> _stateString == <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> currentChar == <span class="string">'\''</span>:</div><div class="line">                _potentialString = <span class="string">"%s%s"</span> % (_potentialString, currentChar)</div><div class="line">                _stateString = <span class="number">1</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> currentChar == <span class="string">"\""</span>:</div><div class="line">                _potentialString = <span class="string">"%s%s"</span> % (_potentialString, currentChar)</div><div class="line">                _stateString = <span class="number">2</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> currentChar <span class="keyword">in</span> string.letters + <span class="string">"$_"</span>:</div><div class="line">                _potentialString = <span class="string">"%s%s"</span> % (_potentialString, currentChar)</div><div class="line">                _stateString = <span class="number">7</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">                _stateNumber = <span class="number">10</span></div><div class="line">        <span class="keyword">elif</span> _stateString == <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> currentChar <span class="keyword">in</span> string.letters + <span class="string">"#$@%"</span>:</div><div class="line">                _potentialString = <span class="string">"%s%s"</span> % (_potentialString, currentChar)</div><div class="line">                _stateString = <span class="number">3</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> currentChar == <span class="string">'\\'</span>:</div><div class="line">                _potentialString = <span class="string">"%s%s"</span> % (_potentialString, currentChar)</div><div class="line">                _stateString = <span class="number">9</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">                _stateNumber = <span class="number">10</span></div><div class="line">        <span class="keyword">elif</span> _stateString == <span class="number">2</span>:</div><div class="line">            <span class="keyword">if</span> currentChar <span class="keyword">in</span> string.letters + <span class="string">"\\% "</span>:</div><div class="line">                _potentialString = <span class="string">"%s%s"</span> % (_potentialString, currentChar)</div><div class="line">                _stateString = <span class="number">4</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">                _stateNumber = <span class="number">10</span></div><div class="line">        <span class="keyword">elif</span> _stateString == <span class="number">3</span>:</div><div class="line">            <span class="keyword">if</span> currentChar == <span class="string">'\''</span>:</div><div class="line">                _potentialString = <span class="string">"%s%s"</span> % (_potentialString, currentChar)</div><div class="line">                _stateString = <span class="number">5</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">                _stateNumber = <span class="number">10</span></div><div class="line">        <span class="keyword">elif</span> _stateString == <span class="number">4</span>:</div><div class="line">            <span class="keyword">if</span> currentChar == <span class="string">'\"'</span>:</div><div class="line">                _potentialString = <span class="string">"%s%s"</span> % (_potentialString, currentChar)</div><div class="line">                _stateString = <span class="number">6</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> currentChar <span class="keyword">in</span> string.letters + <span class="string">"\\% "</span>:</div><div class="line">                _potentialString = <span class="string">"%s%s"</span> % (_potentialString, currentChar)</div><div class="line">                _stateString = <span class="number">4</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">                _stateNumber = <span class="number">10</span></div><div class="line">        <span class="keyword">elif</span> _stateString == <span class="number">7</span>:</div><div class="line">            <span class="keyword">if</span> currentChar <span class="keyword">in</span> string.digits + string.letters + <span class="string">"$_"</span>:</div><div class="line">                _potentialString = <span class="string">"%s%s"</span> % (_potentialString, currentChar)</div><div class="line">                _stateString = <span class="number">8</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">                _stateNumber = <span class="number">10</span></div><div class="line">        <span class="keyword">elif</span> _stateString == <span class="number">8</span>:</div><div class="line">            <span class="keyword">if</span> currentChar <span class="keyword">in</span> string.digits + string.letters + <span class="string">"$_"</span>:</div><div class="line">                _potentialString = <span class="string">"%s%s"</span> % (_potentialString, currentChar)</div><div class="line">                _stateString = <span class="number">8</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">                _stateNumber = <span class="number">10</span></div><div class="line">        <span class="keyword">elif</span> _stateString == <span class="number">9</span>:</div><div class="line">            <span class="keyword">if</span> currentChar <span class="keyword">in</span> [<span class="string">'b'</span>, <span class="string">'n'</span>, <span class="string">'t'</span>, <span class="string">'\\'</span>, <span class="string">'\''</span>, <span class="string">'\"'</span>]:</div><div class="line">                _potentialString = <span class="string">"%s%s"</span> % (_potentialString, currentChar)</div><div class="line">                _stateString = <span class="number">3</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">                _stateNumber = <span class="number">10</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">    <span class="comment">######################################  NUMBERS  ######################################</span></div><div class="line">    <span class="keyword">elif</span> currentChar <span class="keyword">in</span> string.digits + <span class="string">"."</span>:</div><div class="line">        <span class="keyword">if</span> _stateNumber == <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> currentChar <span class="keyword">in</span> <span class="string">"123456789"</span>:</div><div class="line">                _potentialNumber = <span class="string">"%s%s"</span> % (_potentialNumber, currentChar)</div><div class="line">                _stateNumber = <span class="number">6</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> currentChar == <span class="string">'0'</span>:</div><div class="line">                _potentialNumber = <span class="string">"%s%s"</span> % (_potentialNumber, currentChar)</div><div class="line">                _stateNumber = <span class="number">4</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _stateNumber = <span class="number">8</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> _stateNumber == <span class="number">4</span>:</div><div class="line">            <span class="keyword">if</span> currentChar == <span class="string">'.'</span>:</div><div class="line">                _potentialNumber = <span class="string">"%s%s"</span> % (_potentialNumber, currentChar)</div><div class="line">                _stateNumber = <span class="number">5</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _stateNumber = <span class="number">8</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> _stateNumber == <span class="number">5</span>:</div><div class="line">            <span class="keyword">if</span> currentChar <span class="keyword">in</span> string.digits:</div><div class="line">                _potentialNumber = <span class="string">"%s%s"</span> % (_potentialNumber, currentChar)</div><div class="line">                _stateNumber = <span class="number">7</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _stateNumber = <span class="number">8</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> _stateNumber == <span class="number">6</span>:</div><div class="line">            <span class="keyword">if</span> currentChar <span class="keyword">in</span> string.digits:</div><div class="line">                _potentialNumber = <span class="string">"%s%s"</span> % (_potentialNumber, currentChar)</div><div class="line">                _stateNumber = <span class="number">6</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> currentChar == <span class="string">'.'</span>:</div><div class="line">                _potentialNumber = <span class="string">"%s%s"</span> % (_potentialNumber, currentChar)</div><div class="line">                _stateNumber = <span class="number">5</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _stateNumber = <span class="number">8</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> _stateNumber == <span class="number">7</span>:</div><div class="line">            <span class="keyword">if</span> currentChar <span class="keyword">in</span> string.digits:</div><div class="line">                _potentialNumber = <span class="string">"%s%s"</span> % (_potentialNumber, currentChar)</div><div class="line">                _stateNumber = <span class="number">7</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                _stateNumber = <span class="number">8</span></div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">    <span class="comment">######################################OTEAR OPERATERS######################################</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> _stateNumber == <span class="number">6</span> <span class="keyword">or</span> _stateNumber == <span class="number">4</span>:</div><div class="line">            helper.outPutToken(_potentialNumber, <span class="string">"INT"</span>, Category.IdentifierTable[<span class="string">"INT"</span>])</div><div class="line">        <span class="keyword">elif</span> _stateNumber == <span class="number">7</span>:</div><div class="line">            helper.outPutToken(_potentialNumber, <span class="string">"FLOAT"</span>, Category.IdentifierTable[<span class="string">"FLOAT"</span>])</div><div class="line">        <span class="keyword">elif</span> _stateNumber != <span class="number">0</span>:</div><div class="line">            helper.outPutToken(<span class="string">"ERROR NUMBER"</span>, <span class="string">"None"</span>, <span class="string">"None"</span>)</div><div class="line">        _stateNumber = <span class="number">0</span></div><div class="line">        _potentialNumber = <span class="string">""</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> _stateString == <span class="number">7</span> <span class="keyword">or</span> _stateString == <span class="number">8</span>:</div><div class="line">            <span class="keyword">if</span> _potentialString <span class="keyword">in</span> Category.KeyWordsTable:</div><div class="line">                helper.outPutToken(_potentialString, _potentialString.upper(), Category.IdentifierTable[_potentialString.upper()])</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                helper.outPutToken(_potentialString, <span class="string">"IDN"</span> , Category.IdentifierTable[<span class="string">"IDN"</span>])</div><div class="line">                helper.setSymbolTable(_potentialString, <span class="string">"IDN"</span> , Category.IdentifierTable[<span class="string">"IDN"</span>])</div><div class="line">        <span class="keyword">elif</span> _stateString == <span class="number">5</span>:</div><div class="line">            helper.outPutToken(_potentialString, <span class="string">"CHAR"</span>, Category.IdentifierTable[<span class="string">"CHAR"</span>])</div><div class="line">        <span class="keyword">elif</span> _stateString == <span class="number">6</span>:</div><div class="line">            helper.outPutToken(_potentialString, <span class="string">"CHAR *"</span>, Category.IdentifierTable[<span class="string">"CHAR *"</span>])</div><div class="line">        <span class="keyword">elif</span> _stateString != <span class="number">0</span>:</div><div class="line">            helper.outPutToken(<span class="string">"ERROR STRING"</span>, <span class="string">"None"</span>, <span class="string">"None"</span>)</div><div class="line">        _stateString = <span class="number">0</span></div><div class="line">        _potentialString = <span class="string">""</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> currentChar == <span class="string">" "</span>:</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'&gt;'</span>:</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">            currentChar = _prog[_currentIndex]</div><div class="line">            <span class="keyword">if</span> currentChar == <span class="string">"="</span>:</div><div class="line">                helper.outPutToken(<span class="string">"&gt;="</span>, <span class="string">"&gt;="</span>, Category.IdentifierTable[<span class="string">"&gt;="</span>])</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span> :</div><div class="line">                helper.outPutToken(<span class="string">"&gt;"</span>, <span class="string">"&gt;"</span>, Category.IdentifierTable[<span class="string">"&gt;"</span>])</div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'&lt;'</span>:</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">            currentChar = _prog[_currentIndex]</div><div class="line">            <span class="keyword">if</span> currentChar == <span class="string">"="</span>:</div><div class="line">                helper.outPutToken(<span class="string">"&lt;="</span>, <span class="string">"&lt;="</span>, Category.IdentifierTable[<span class="string">"&lt;="</span>])</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span> :</div><div class="line">                helper.outPutToken(<span class="string">"&lt;"</span>, <span class="string">"&lt;"</span>, Category.IdentifierTable[<span class="string">"&lt;"</span>])</div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'+'</span>:</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">            currentChar = _prog[_currentIndex]</div><div class="line">            <span class="keyword">if</span> currentChar == <span class="string">'+'</span>:</div><div class="line">                helper.outPutToken(<span class="string">"++"</span>, <span class="string">"++"</span>, Category.IdentifierTable[<span class="string">"++"</span>])</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span> :</div><div class="line">                helper.outPutToken(<span class="string">"+"</span>, <span class="string">"+"</span>, Category.IdentifierTable[<span class="string">"+"</span>])</div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'-'</span>:</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">            currentChar = _prog[_currentIndex]</div><div class="line">            <span class="keyword">if</span> currentChar == <span class="string">'-'</span>:</div><div class="line">                helper.outPutToken(<span class="string">"--"</span>, <span class="string">"--"</span>, Category.IdentifierTable[<span class="string">"--"</span>])</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                helper.outPutToken(<span class="string">"-"</span>, <span class="string">"-"</span>, Category.IdentifierTable[<span class="string">"-"</span>])</div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'='</span>:</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">            currentChar = _prog[_currentIndex]</div><div class="line">            <span class="keyword">if</span> currentChar == <span class="string">'='</span>:</div><div class="line">                helper.outPutToken(<span class="string">"=="</span>, <span class="string">"=="</span>, Category.IdentifierTable[<span class="string">"=="</span>])</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span> :</div><div class="line">                helper.outPutToken(<span class="string">"="</span>, <span class="string">"="</span>, Category.IdentifierTable[<span class="string">"="</span>])</div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'!'</span>:</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">            currentChar = _prog[_currentIndex]</div><div class="line">            <span class="keyword">if</span> currentChar == <span class="string">'='</span>:</div><div class="line">                helper.outPutToken(<span class="string">"!="</span>, <span class="string">"!="</span>, Category.IdentifierTable[<span class="string">"!="</span>])</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span> :</div><div class="line">                helper.outPutToken(<span class="string">"!"</span>, <span class="string">"!"</span>, Category.IdentifierTable[<span class="string">"!"</span>])</div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'&amp;'</span>:</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">            currentChar = _prog[_currentIndex]</div><div class="line">            <span class="keyword">if</span> currentChar == <span class="string">'&amp;'</span>:</div><div class="line">                helper.outPutToken(<span class="string">"&amp;&amp;"</span>, <span class="string">"&amp;&amp;"</span>, Category.IdentifierTable[<span class="string">"&amp;&amp;"</span>])</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span> :</div><div class="line">                helper.outPutToken(<span class="string">"&amp;"</span>, <span class="string">"&amp;"</span>, Category.IdentifierTable[<span class="string">"&amp;"</span>])</div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'|'</span>:</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">            currentChar = _prog[_currentIndex]</div><div class="line">            <span class="keyword">if</span> currentChar == <span class="string">'|'</span>:</div><div class="line">                helper.outPutToken(<span class="string">"||"</span>, <span class="string">"||"</span>, Category.IdentifierTable[<span class="string">"||"</span>])</div><div class="line">                _currentIndex += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span> :</div><div class="line">                helper.outPutToken(<span class="string">"|"</span>, <span class="string">"|"</span>, Category.IdentifierTable[<span class="string">"||"</span>])</div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'*'</span>:</div><div class="line">            helper.outPutToken(<span class="string">"*"</span>, <span class="string">"*"</span>, Category.IdentifierTable[<span class="string">"*"</span>])</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'/'</span>:</div><div class="line">            helper.outPutToken(<span class="string">"/"</span>, <span class="string">"/"</span>, Category.IdentifierTable[<span class="string">"/"</span>])</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">';'</span>:</div><div class="line">            helper.outPutToken(<span class="string">";"</span>, <span class="string">";"</span>, Category.IdentifierTable[<span class="string">";"</span>])</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">","</span>:</div><div class="line">            helper.outPutToken(<span class="string">","</span>, <span class="string">","</span>, Category.IdentifierTable[<span class="string">","</span>])</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'&#123;'</span>:</div><div class="line">            helper.outPutToken(<span class="string">"&#123;"</span>, <span class="string">"&#123;"</span>, Category.IdentifierTable[<span class="string">"&#123;"</span>])</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'&#125;'</span>:</div><div class="line">            helper.outPutToken(<span class="string">"&#125;"</span>, <span class="string">"&#125;"</span>, Category.IdentifierTable[<span class="string">"&#125;"</span>])</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'['</span>:</div><div class="line">            helper.outPutToken(<span class="string">"["</span>, <span class="string">"["</span>, Category.IdentifierTable[<span class="string">"["</span>])</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">']'</span>:</div><div class="line">            helper.outPutToken(<span class="string">"]"</span>, <span class="string">"]"</span>, Category.IdentifierTable[<span class="string">"]"</span>])</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">'('</span>:</div><div class="line">            helper.outPutToken(<span class="string">"("</span>, <span class="string">"("</span>, Category.IdentifierTable[<span class="string">"("</span>])</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> currentChar == <span class="string">')'</span>:</div><div class="line">            helper.outPutToken(<span class="string">")"</span>, <span class="string">")"</span>, Category.IdentifierTable[<span class="string">")"</span>])</div><div class="line">            _currentIndex += <span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    helper = FileAccess.FileHelper(<span class="string">"H://test.c"</span>, <span class="string">"H://token.txt"</span>, <span class="string">"H://symbol_table.txt"</span>)</div><div class="line">    prog = helper.readProg()</div><div class="line">    <span class="keyword">print</span> prog</div><div class="line">    comments = readComments(prog)</div><div class="line">    _prog = cutComments(prog, comments)</div><div class="line">    <span class="keyword">print</span> _prog</div><div class="line">    <span class="keyword">while</span> _currentIndex &lt; len(_prog):</div><div class="line">        scan(helper)</div><div class="line">    helper.closeFiles()</div></pre></td></tr></table></figure></p>
<p>Category.py，这个模块里面定义了一些C语言中的关键字、运算符等等，是种别码表：<br><figure class="highlight python"><figcaption><span>Category.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">Created on 2012-10-18</div><div class="line"></div><div class="line">@author: liushuai</div><div class="line">'''</div><div class="line">IdentifierTable = &#123;<span class="string">"INT"</span>:<span class="number">1</span>,<span class="string">"FLOAT"</span>:<span class="number">2</span>,<span class="string">"CHAR"</span>:<span class="number">3</span>,<span class="string">"IDN"</span>:<span class="number">4</span>,<span class="string">"WHILE"</span>:<span class="number">5</span>,<span class="string">"FOR"</span>:<span class="number">6</span>,<span class="string">"DO"</span>:<span class="number">7</span>,<span class="string">"BREAK"</span>:<span class="number">31</span>,<span class="string">"CONTINUE"</span>:<span class="number">32</span>,<span class="string">"CHAR *"</span>:<span class="number">33</span>,<span class="string">"IF"</span>:<span class="number">37</span>,</div><div class="line">                   <span class="string">"*"</span>:<span class="number">8</span>,<span class="string">"/"</span>:<span class="number">9</span>,<span class="string">"+"</span>:<span class="number">10</span>,<span class="string">"-"</span>:<span class="number">11</span>,<span class="string">"&gt;"</span>:<span class="number">12</span>,<span class="string">"&lt;"</span>:<span class="number">13</span>,<span class="string">"="</span>:<span class="number">14</span>,</div><div class="line">                   <span class="string">"++"</span>:<span class="number">15</span>,<span class="string">"--"</span>:<span class="number">16</span>,<span class="string">"=="</span>:<span class="number">17</span>,<span class="string">"!="</span>:<span class="number">18</span>,<span class="string">"&gt;="</span>:<span class="number">19</span>,<span class="string">"&lt;="</span>:<span class="number">20</span>,</div><div class="line">                   <span class="string">"&amp;&amp;"</span>:<span class="number">28</span>,<span class="string">"||"</span>:<span class="number">29</span>,<span class="string">"!"</span>:<span class="number">30</span>,<span class="string">"&amp;"</span>:<span class="number">35</span>,<span class="string">"|"</span>:<span class="number">36</span>,</div><div class="line">                   <span class="string">";"</span>:<span class="number">21</span>,<span class="string">","</span>:<span class="number">34</span>,</div><div class="line">                   <span class="string">"&#123;"</span>:<span class="number">22</span>,<span class="string">"&#125;"</span>:<span class="number">23</span>,<span class="string">"["</span>:<span class="number">24</span>,<span class="string">"]"</span>:<span class="number">25</span>,<span class="string">"("</span>:<span class="number">26</span>,<span class="string">")"</span>:<span class="number">27</span>&#125;</div><div class="line">KeyWordsTable = (<span class="string">"int"</span>, <span class="string">"float"</span>, <span class="string">"char"</span>, <span class="string">"while"</span>, <span class="string">"for"</span>, <span class="string">"do"</span>,<span class="string">"break"</span>,<span class="string">"continue"</span>,<span class="string">"char *"</span>,<span class="string">"if"</span>)</div></pre></td></tr></table></figure></p>
<p>FileAccess.py，里面定义了一个类用来进行对文件的操作，例如输出Token序列以及符号表到文件：<br><figure class="highlight python"><figcaption><span>FileAccess.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">Created on 2012-10-23</div><div class="line"></div><div class="line">@author: liushuai</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">import</span> Category</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHelper</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,progPath,tokenPath,symbolTablePath)</span>:</span></div><div class="line">        self.progPath = progPath</div><div class="line">        self.tokenPath = tokenPath</div><div class="line">        self.symbolTablePath = symbolTablePath</div><div class="line"></div><div class="line">        self.tokenFp = open(self.tokenPath,<span class="string">"w"</span>)</div><div class="line">        self.symbolTableFp = open(self.symbolTablePath,<span class="string">"w"</span>)</div><div class="line"></div><div class="line">        self.symbolTable = &#123;&#125;.fromkeys(Category.KeyWordsTable) <span class="comment">#initialize symbol table</span></div><div class="line">        <span class="keyword">print</span> self.symbolTable</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readProg</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''read the program into the RAM'''</span></div><div class="line">        fp = open(self.progPath, <span class="string">"r+"</span>)</div><div class="line">        prog = <span class="string">""</span></div><div class="line">        <span class="keyword">for</span> eachLine <span class="keyword">in</span> fp.readlines():</div><div class="line">            <span class="comment">#print eachLine</span></div><div class="line">            prog = <span class="string">"%s%s"</span> % (prog, eachLine.strip())</div><div class="line">        fp.close()</div><div class="line">        <span class="keyword">return</span> prog</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outPutToken</span><span class="params">(self,tokenSelf,tokenInner,tokenNo)</span>:</span></div><div class="line">        <span class="string">'''output token into a file'''</span></div><div class="line">        self.tokenFp.write(<span class="string">"("</span> + tokenInner + <span class="string">","</span> + tokenSelf + <span class="string">")"</span> + <span class="string">"\n"</span>)</div><div class="line">        <span class="keyword">print</span> <span class="string">"("</span> + tokenInner + <span class="string">","</span> + tokenSelf + <span class="string">")"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSymbolTable</span><span class="params">(self,tokenSelf,tokenInner,tokenNo)</span>:</span></div><div class="line">        <span class="string">'''output symbol into symbol table'''</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.symbolTable.has_key(tokenSelf):</div><div class="line">            self.symbolTable[tokenSelf] = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeSymbolToFile</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> self.symbolTable:</div><div class="line">            self.symbolTableFp.write(k + <span class="string">"\n"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closeFiles</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''close token Files'''</span></div><div class="line">        self.writeSymbolToFile()</div><div class="line">        <span class="keyword">if</span> self.tokenFp != <span class="keyword">None</span>:</div><div class="line">            self.tokenFp.close()</div><div class="line">        <span class="keyword">if</span> self.symbolTableFp != <span class="keyword">None</span>:</div><div class="line">            self.symbolTableFp.close()</div></pre></td></tr></table></figure></p>
<p>下面是我的测试C语言程序：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span>  str[<span class="number">10000</span>];</div><div class="line">    <span class="keyword">int</span> num[<span class="number">30</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">char</span> <span class="built_in">std</span>[<span class="number">28</span>]=&#123;<span class="string">"abcdefghijklmnopqrstuvwxyz"</span>&#125;;</div><div class="line">    <span class="keyword">int</span> i,j,temp;</div><div class="line">    <span class="keyword">float</span> test=<span class="number">-0.34</span>;</div><div class="line">    <span class="keyword">float</span> test1=<span class="number">23.45</span>;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> tom;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)             <span class="comment">/*字符的读入*/</span></div><div class="line">    &#123;</div><div class="line">        str[i]=getchar();</div><div class="line">        <span class="keyword">if</span> (str[i]==<span class="string">'\n'</span>)</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)             <span class="comment">/*字符的统计数量*/</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (str[i]==<span class="string">'\n'</span>)</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        j=str[i] - <span class="number">97</span>; <span class="comment">/*-97 or sth - 97?*/</span></div><div class="line">        num[j]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">27</span>;i++)              <span class="comment">/*字符的按出现频率排序*/</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;<span class="number">26</span>;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (num[j]&gt;num[i])</div><div class="line">            &#123;</div><div class="line">                temp=num[j];</div><div class="line">                num[j]=num[i];</div><div class="line">                num[i]=temp;</div><div class="line"></div><div class="line">                tom=<span class="built_in">std</span>[j];</div><div class="line">                <span class="built_in">std</span>[j]=<span class="built_in">std</span>[i];</div><div class="line">                <span class="built_in">std</span>[i]=tom;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">27</span>;i++)                     <span class="comment">/*字符的按字母表顺序排序*/</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;<span class="number">26</span>;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (num[i]==num[j])</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">std</span>[j]&lt;<span class="built_in">std</span>[i])</div><div class="line">                &#123;</div><div class="line">                    tom=<span class="built_in">std</span>[j];</div><div class="line">                    <span class="built_in">std</span>[j]=<span class="built_in">std</span>[i];</div><div class="line">                    <span class="built_in">std</span>[i]=tom;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">29</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (num[i]==<span class="number">0</span>)</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后脚本输出如下：<br>Token.txt:</p>
<p><img src="http://vars.qiniudn.com/bianyiyuanli_7.jpg" alt=""></p>
<p>Symbol_table.txt:</p>
<p><img src="http://vars.qiniudn.com/bianyiyuanli_8.jpg" alt=""></p>
<p>这次实验就算做完了。</p>
<p>虽然完成的很水，但是正确情况下的输出还是令人满意的，词法分析完事后，等着句法分析调用它的输出结果吧。对了，至于符号表在整个编译阶段的作用，龙书第一版2.4节和6.7节有介绍，请读者查阅。</p>
<p>写的很水很水，如有不足，欢迎指正。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用python去除文件中的空格 || Tab || 回车]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/09/15/remove-space-python/</url>
      <content type="html"><![CDATA[<p>在最近的开发工作中，为了应付比赛赶进度，服务端的json文件都是人工写的，写完之后发现格式都是十分规整，易于人阅读的json，但是客户端请求不需要那些为了格式而在json里面添加的空格、tab、回车等等没用的字符，遂用python写一脚本，去除文件中的空格、回车、换行。<a id="more"></a></p>
<p>原json文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"amount"</span> : <span class="string">"2"</span>,</div><div class="line">    <span class="string">"content"</span> :</div><div class="line">    [</div><div class="line">        &#123;   <span class="string">"category_id"</span> : <span class="number">0</span>,</div><div class="line">            <span class="string">"name"</span> : <span class="string">"古典文学"</span>,</div><div class="line">            <span class="string">"category_json_url"</span> : <span class="string">"http://172.16.242.14:8080/source/history/history.json"</span></div><div class="line">        &#125;</div><div class="line">        ,</div><div class="line">        &#123;</div><div class="line">            <span class="string">"category_id"</span> : <span class="number">1</span>,</div><div class="line">            <span class="string">"name"</span> : <span class="string">"流行音乐"</span>,</div><div class="line">            <span class="string">"category_json_url"</span>  : <span class="string">"http://172.16.242.14:8080/source//popmusic/popmusic.json"</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用脚本处理后的文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"amount"</span>:<span class="string">"2"</span>,<span class="string">"content"</span>:[&#123;<span class="string">"category_id"</span>:<span class="number">0</span>,<span class="string">"name"</span>:<span class="string">"古典文学"</span>,<span class="string">"category_json_url"</span>:<span class="string">"http://172.16.242.14:8080/source/history/history.json"</span>&#125;,&#123;<span class="string">"category_id"</span>:<span class="number">1</span>,<span class="string">"name"</span>:<span class="string">"流行音乐"</span>,<span class="string">"category_json_url"</span>:<span class="string">"http://172.16.242.14:8080/source//popmusic/popmusic.json"</span>&#125;]&#125;</div></pre></td></tr></table></figure></p>
<p>下面上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">stripFile</span><span class="params">(oldFName,newFName)</span>:</span></div><div class="line">    <span class="string">'''remove the space or Tab or enter in a file,and output to a new file in the same folder'''</span></div><div class="line">    fp = open(oldFName,<span class="string">"r+"</span>)</div><div class="line">    newFp = open(newFName,<span class="string">"w"</span>)</div><div class="line">    <span class="keyword">for</span> eachline <span class="keyword">in</span> fp.readlines():</div><div class="line">        newStr = eachline.replace(<span class="string">" "</span>,<span class="string">""</span>).replace(<span class="string">"\t"</span>,<span class="string">""</span>).strip()</div><div class="line">        <span class="comment">#print "Write:",newStr</span></div><div class="line">        newFp.write(newStr)</div><div class="line">    fp.close()</div><div class="line">    newFp.close()</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    oldName = raw_input(<span class="string">"input file name:"</span>)</div><div class="line">    nameList = oldName.split(<span class="string">"."</span>)</div><div class="line">    newName = <span class="string">"%s%s%s"</span> % (nameList[<span class="number">0</span>],<span class="string">"_new."</span>,nameList[<span class="number">1</span>])</div><div class="line">    stripFile(oldName,newName)</div><div class="line">    <span class="keyword">print</span> <span class="string">"finish output to new file:"</span>,newName</div></pre></td></tr></table></figure></p>
<p>使用脚本时，如果脚本文件和要处理的文件在同一目录下，则直接输入文件名，如果不在，需要输入文件的完整路径。</p>
<p>记得听Cliff说过，程序员就要有一个批量处理的意识，要学会发挥机器的力量，感觉还是很对的。</p>
<p>另外发现一篇说明python字符串拼接效率问题的文章，链接如下：<a href="http://www.cnpythoner.com/post/67.html。" target="_blank" rel="external">http://www.cnpythoner.com/post/67.html。</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pro Git学习笔记(二)——Git 基础]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/08/25/pro-git-notes-2/</url>
      <content type="html"><![CDATA[<p>两种取得 Git 项目仓库的方法：<a id="more"></a></p>
<p>1.从当前目录初始化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#首先切换到你的项目的根目录</div><div class="line">$ git init</div></pre></td></tr></table></figure></p>
<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。</p>
<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add *.c</div><div class="line">$ git add README</div><div class="line">$ git commit -m &apos;initial project version&apos;</div></pre></td></tr></table></figure></p>
<p>现在，你已经得到了一个实际维护着若干文件的 Git 仓库。</p>
<p>2.从已有仓库克隆<br>使用 clone 而不是 checkout。这是个非常重要的差别。Git 收取的是项目历史的所有数据（每一个文件的每一个版本），服务器上有的数据克隆之后本地也都有了。实际上，即便服务器的磁盘发生故障，用任何一个克隆出来的客户端都可以重建服务器上的仓库，回到当初克隆时的状态（可能会丢失某些服务器端的挂钩设置，但所有版本的数据仍旧还在，有关细节请参考<a href="http://github.danmarner.com/section/ch4-0/" target="_blank" rel="external">第四章</a>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#clone命令格式：</div><div class="line">git clone [url] [new_name]</div><div class="line">#例如：克隆 Ruby 语言的 Git 代码仓库 Grit</div><div class="line">$ git clone git://github.com/schacon/grit.git</div><div class="line">#在clone时重新制定要新建项目的名称</div><div class="line">$ git clone git://github.com/schacon/grit.git mygrit</div></pre></td></tr></table></figure></p>
<p>Git 支持许多数据传输协议。上面的例子使用的是 git:// 协议，不过你也可以用 http(s):// 或者user@server:/path.git 表示的 SSH 传输协议，有关细节请参考<a href="http://github.danmarner.com/section/ch4-0/" target="_blank" rel="external">第四章</a>。</p>
<hr>
<p>附上一篇很好Git分支管理的参考资料，是我们实验室的新手引导的wiki：<br><a href="https://github.com/FoOTOo/footoo_newbie_guide/wiki/GIT%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5" target="_blank" rel="external">https://github.com/FoOTOo/footoo_newbie_guide/wiki/GIT%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5</a></p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pro Git学习笔记(一)——起步]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/08/25/pro-git-notes-1/</url>
      <content type="html"><![CDATA[<p>Pro Git简体中文：<a href="http://github.danmarner.com/section/toc/" target="_blank" rel="external">http://github.danmarner.com/section/toc/</a><br>Pro Git英文版：<a href="http://git-scm.com/book" target="_blank" rel="external">http://git-scm.com/book</a>（可能需要翻墙）</p>
<p>Git在保存和处理各种信息的时候，虽然操作起来的命令形式非常相近，但是它与其它版本控制系统的做法颇为不同。</p>
<p>Git和其他版本控制系统的主要差异在于，Git只关心文件数据的整体是否发生变化，大多数其他版本控制工具只关心文件内容的具体差异，记录哪些文件做了更新，更新了什么内容等等。<a id="more"></a></p>
<blockquote>
<p>The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data. Conceptually, most other systems store information as a list of file-based changes. These systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they keep as a set of files and the changes made to each file over time.</p>
</blockquote>
<p><img src="http://vars.qiniudn.com/pro_git_1.jpg" alt=""></p>
<p>在 Git 中的绝大多数操作都只需要访问本地文件和资源，不用连网。<br>对于任何一个文件，在Git内都只有三种状态：<strong>已提交（committed）</strong>、<strong>已修改（modified）</strong>、<strong>已暂存（staged）</strong>。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。</p>
<hr>
<p>初次运行git前需要配置，一些配置文件位置及其作用：</p>
<ol>
<li>/etc/gitconfig文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件。（Windows下如：C:\Program Files\Git\etc\gitconfig）</li>
<li>~/.gitconfig文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。（Windows下如：C:\Users\liushuai.gitconfig）</li>
<li>当前项目的 git 目录中的配置文件（也就是工作目录中的.git/config文件）：这里的配置仅仅针对当前项目有效。</li>
</ol>
<hr>
<p>每一个级别的配置都会覆盖上层的相同配置，所以工作目录中的.git/config文件里的配置会覆盖/etc/gitconfig中的同名变量。</p>
<p>在Windows系统上，Git 会找寻用户主目录下的.gitconfig文件。主目录即 $HOME 变量指定的目录，一般都是 C:\Documents and Settings\$USER。此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。</p>
<p>用户信息等的配置：<a href="http://github.danmarner.com/section/ch1-5/" target="_blank" rel="external">http://github.danmarner.com/section/ch1-5/</a><br>想了解git的各式工具该怎么用，可以阅读它们的使用帮助：<a href="http://github.danmarner.com/section/ch1-6/" target="_blank" rel="external">http://github.danmarner.com/section/ch1-6/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[只要人的内心够强大，一切都不是事]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/04/03/strong-mind/</url>
      <content type="html"><![CDATA[<p>明天是清明小长假的最后一天了，出去旅游的也快回来了。</p>
<a id="more"></a>
<p>我一直是一个没啥文采的人，记得高中的时候，作文写的那么烂，还被刚哥拿来当范文来读，往事不堪回首，岁月如风在耳边。<br>前几天发生了很多事，让我状态非常差，再加上流感的袭击，简直有些痛苦。有些事让我一下子把从未经历过的经历了。我常常回想小时候，或者早年间发生的一些事，有时候，某个瞬间会在我脑海一直回放，某句话会被我一直在心里默念，一些瞬间，注定要烙在心底，回味一生。<br>是上天的巧妙安排还是机缘的巧合，有些事，放到未来想一想简直太巧妙了，或者说发生的太是时宜了。可能现在我们不愿意做一些事情，但是，就像我在高中时的一篇日记里写的，那是在为你的未来编织最最美好的回忆。<br>谁也无法预知未来，但是我相信，只要人愿意改变，未来就会有胜算。<br>再苦再累，再多的困难，只要人的内心够强大，都不是事。<br>有时候，拼命努力，是为了证明自己，为了曾经吹过的牛B。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我在HIT第一次.net实验中用到的sql语句]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/03/18/HIT-dotNet-exercise-SQL/</url>
      <content type="html"><![CDATA[<p>这次实验主要是开发基于.net framework的窗体应用程序。我感觉这次实验让我学到了挺多东西。我做的是一个加州招待所管理系统，囧。</p>
<a id="more"></a>
<p>第一就是尽量减少模块（不知道写了个这么水的实验能不能称得上是模块，暂时先这么叫着吧，显得牛B一点）之间的耦合性，这个特别重要。之前总是听一些什么减少模块之间的耦合的观点，没有意识到有什么用，以为是用来装B的，但是这次让我深深地意识到了这个advice的重要性。我对这个advice的理解就是各部分分工要非常明确，负责processing data的专门processing data，负责操作UI的专门来操作UI，诸如此类。这个在android的开发中也有所体现，即intent的机制。</p>
<p>此外感觉总是对数据库的增删改查没啥意思，于是就想通过将sql语句设计的复杂一点来帮助分担一些程序逻辑的复杂程度。</p>
<p>第一在这个实验中完全是用来装B的，就是数据库的分页查询与分页显示，这个功能在一些实际的应用中比较有用，例如当数据量很大时，不可能一次都读出来。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">"<span class="keyword">select</span> top <span class="string">" + NUMBER_IN_A_PAGE + "</span> * <span class="keyword">from</span> <span class="string">" + DBKEYS.ROOM_INFO_TABLE_NAME</span></div><div class="line">                + " <span class="keyword">where</span> RoomNumber <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> top <span class="string">" + page * NUMBER_IN_A_PAGE + "</span> RoomNumber <span class="keyword">from</span> <span class="string">" + DBKEYS.ROOM_INFO_TABLE_NAME + "</span>)<span class="string">";</span></div></pre></td></tr></table></figure>
<p>其中<code>NUMBER_IN_A_PAGE</code>是每页的数量，对应的C#代码如下：<br>这个函数是查询数据库，返回一个DataSet供填充DataGridView使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/// &lt;summary&gt;</div><div class="line">/// 根据给定的sql字符串查询数据，返回结果DataSet,flag为区分函数重载标志</div><div class="line">/// &lt;/summary&gt;</div><div class="line">/// &lt;param name=&quot;sqlString&quot;&gt;&lt;/param&gt;</div><div class="line">/// &lt;param name=&quot;flag&quot;&gt;&lt;/param&gt;</div><div class="line">/// &lt;returns&gt;&lt;/returns&gt;</div><div class="line">public DataSet inquiry(String sqlString,Boolean flag)</div><div class="line">&#123;</div><div class="line">    SqlCommand command;</div><div class="line">    SqlDataAdapter adapter;</div><div class="line">    DataSet dataSet;</div><div class="line">    try</div><div class="line">    &#123;</div><div class="line">        command = new SqlCommand(sqlString, connection);</div><div class="line">        adapter = new SqlDataAdapter(command);</div><div class="line">        dataSet = new DataSet();</div><div class="line">        adapter.Fill(dataSet);</div><div class="line">        return dataSet;</div><div class="line">    &#125;</div><div class="line">    catch (SqlException e)</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(e.Message + flag);</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">/// &lt;summary&gt;</div><div class="line">/// 设置setDataGridView的显示</div><div class="line">/// &lt;/summary&gt;</div><div class="line">private Boolean setDataGridView(int page)</div><div class="line">&#123;</div><div class="line">    String sqlString = &quot;select top &quot; + NUMBER_IN_A_PAGE + &quot; * from &quot; + DBKEYS.ROOM_INFO_TABLE_NAME</div><div class="line">        + &quot; where RoomNumber not in (select top &quot; + page * NUMBER_IN_A_PAGE + &quot; RoomNumber from &quot; + DBKEYS.ROOM_INFO_TABLE_NAME + &quot;)&quot;;</div><div class="line">    DataSet dataSet = dao.inquiry(sqlString, true);</div><div class="line">    // 说明没有查到结果，到达了页首或者页尾</div><div class="line">    if (dataSet == null || dataSet.Tables.Count == 0 || dataSet.Tables[0].Rows.Count &lt;= 0)</div><div class="line">    &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    DataTable tableFirst = dataSet.Tables[0]; // 用DataTable 取 DataSet中的第一个表</div><div class="line">    // 设置DataGridView的列名</div><div class="line">    foreach (DataColumn dc in tableFirst.Columns)</div><div class="line">    &#123;</div><div class="line">        RoomInfoDataGridView.Columns.Add(dc.ColumnName, dc.ColumnName);</div><div class="line">    &#125;</div><div class="line">    // 每次新建一行将数据填到DataGridView中</div><div class="line">    foreach (DataRow dr in tableFirst.Rows)</div><div class="line">    &#123;</div><div class="line">        DataGridViewRow vr = new DataGridViewRow();</div><div class="line">        foreach (DataGridViewColumn dc in RoomInfoDataGridView.Columns)</div><div class="line">        &#123;</div><div class="line">            vr.Cells.Add(dc.CellTemplate.Clone() as DataGridViewCell);</div><div class="line">            vr.Cells[vr.Cells.Count - 1].Value = dr[dc.Name];</div><div class="line">        &#125;</div><div class="line">        RoomInfoDataGridView.Rows.Add(vr);</div><div class="line">    &#125;</div><div class="line">    // 设置RoomInfoDataGridView禁止根据列排序</div><div class="line">    int i;</div><div class="line">    for (i = 0; i &lt; this.RoomInfoDataGridView.Columns.Count; i++) &#123; &#125;</div><div class="line">    this.RoomInfoDataGridView.Columns[--i].SortMode = DataGridViewColumnSortMode.NotSortable;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有一个sql语句是日期的比较，简单说来就是给定个date，选出date在ExpectiveLiveDate和从ExpectiveLiveDate算起ExpextiveLastingTime天后之间的记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">"<span class="keyword">select</span> * <span class="keyword">from</span> VisitorBookInfo <span class="keyword">where</span> ( <span class="string">'" + date + "'</span><span class="string">"</span></div><div class="line">                +" <span class="keyword">between</span> ExpectiveLiveDate <span class="keyword">and</span> <span class="keyword">dateadd</span>(<span class="keyword">day</span>,ExpextiveLastingTime,ExpectiveLiveDate))<span class="string">";</span></div></pre></td></tr></table></figure></p>
<p>对应的C#函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">/// &lt;summary&gt;</div><div class="line">/// 根据查询日期填充表格</div><div class="line">/// &lt;/summary&gt;</div><div class="line">/// &lt;param name=&quot;date&quot;&gt;&lt;/param&gt;</div><div class="line">/// &lt;returns&gt;&lt;/returns&gt;</div><div class="line">private Boolean setDataGridView(String date)</div><div class="line">&#123;</div><div class="line">    String sqlString = &quot;select * from VisitorBookInfo where ( &apos;&quot; + date + &quot;&apos;&quot;</div><div class="line">        +&quot; between ExpectiveLiveDate and dateadd(day,ExpextiveLastingTime,ExpectiveLiveDate))&quot;;</div><div class="line">    DataSet dataSet = dao.inquiry(sqlString, true);</div><div class="line">    // 说明没有查到结果</div><div class="line">    if (dataSet == null || dataSet.Tables.Count == 0 || dataSet.Tables[0].Rows.Count &lt;= 0)</div><div class="line">    &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    DataTable tableFirst = dataSet.Tables[0]; // 用DataTable 取 DataSet中的第一个表</div><div class="line">    // 设置DataGridView的列名</div><div class="line">    foreach (DataColumn dc in tableFirst.Columns)</div><div class="line">    &#123;</div><div class="line">        RoomInfoDataGridView.Columns.Add(dc.ColumnName, dc.ColumnName);</div><div class="line">    &#125;</div><div class="line">    // 每次新建一行将数据填到DataGridView中</div><div class="line">    foreach (DataRow dr in tableFirst.Rows)</div><div class="line">    &#123;</div><div class="line">        DataGridViewRow vr = new DataGridViewRow();</div><div class="line">        foreach (DataGridViewColumn dc in RoomInfoDataGridView.Columns)</div><div class="line">        &#123;</div><div class="line">            vr.Cells.Add(dc.CellTemplate.Clone() as DataGridViewCell);</div><div class="line">            vr.Cells[vr.Cells.Count - 1].Value = dr[dc.Name];</div><div class="line">        &#125;</div><div class="line">        RoomInfoDataGridView.Rows.Add(vr);</div><div class="line">    &#125;</div><div class="line">    // 设置RoomInfoDataGridView禁止根据列排序</div><div class="line">    int i;</div><div class="line">    for (i = 0; i &lt; this.RoomInfoDataGridView.Columns.Count; i++) &#123; &#125;</div><div class="line">    this.RoomInfoDataGridView.Columns[--i].SortMode = DataGridViewColumnSortMode.NotSortable;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个sql语句是选出某一层的房间，就是比如我要选出7楼的房间，也就是选出所有房间号以7开头的，比如702,711等：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"<span class="keyword">select</span> * <span class="keyword">from</span> RoomInfo <span class="keyword">where</span>(<span class="keyword">ASCII</span>(RoomNumber) = <span class="keyword">ASCII</span>(<span class="string">'" + level +"'</span>))<span class="string">"</span></div></pre></td></tr></table></figure></p>
<p>对应的C#函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">/// &lt;summary&gt;</div><div class="line">/// 根据楼层填充表格,flag为重载函数标志</div><div class="line">/// &lt;/summary&gt;</div><div class="line">/// &lt;param name=&quot;date&quot;&gt;&lt;/param&gt;</div><div class="line">/// &lt;returns&gt;&lt;/returns&gt;</div><div class="line">private Boolean setDataGridView(String level,Boolean flag)</div><div class="line">&#123;</div><div class="line">    String sqlString = &quot;select * from RoomInfo where(ASCII(RoomNumber) = ASCII(&apos;&quot; + level +&quot;&apos;))&quot;;</div><div class="line">    DataSet dataSet = dao.inquiry(sqlString, true);</div><div class="line">    // 说明没有查到结果</div><div class="line">    if (dataSet == null || dataSet.Tables.Count == 0 || dataSet.Tables[0].Rows.Count &lt;= 0)</div><div class="line">    &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    DataTable tableFirst = dataSet.Tables[0]; // 用DataTable 取 DataSet中的第一个表</div><div class="line">    // 设置DataGridView的列名</div><div class="line">    foreach (DataColumn dc in tableFirst.Columns)</div><div class="line">    &#123;</div><div class="line">        RoomInfoDataGridView.Columns.Add(dc.ColumnName, dc.ColumnName);</div><div class="line">    &#125;</div><div class="line">    // 每次新建一行将数据填到DataGridView中</div><div class="line">    foreach (DataRow dr in tableFirst.Rows)</div><div class="line">    &#123;</div><div class="line">        DataGridViewRow vr = new DataGridViewRow();</div><div class="line">        foreach (DataGridViewColumn dc in RoomInfoDataGridView.Columns)</div><div class="line">        &#123;</div><div class="line">            vr.Cells.Add(dc.CellTemplate.Clone() as DataGridViewCell);</div><div class="line">            vr.Cells[vr.Cells.Count - 1].Value = dr[dc.Name];</div><div class="line">        &#125;</div><div class="line">        RoomInfoDataGridView.Rows.Add(vr);</div><div class="line">    &#125;</div><div class="line">    // 设置RoomInfoDataGridView禁止根据列排序</div><div class="line">    int i;</div><div class="line">    for (i = 0; i &lt; this.RoomInfoDataGridView.Columns.Count; i++) &#123; &#125;</div><div class="line">    this.RoomInfoDataGridView.Columns[--i].SortMode = DataGridViewColumnSortMode.NotSortable;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个是比较牛B的一条语句了，同时查询两个表，实现的功能就是我想预定房间，给你一个预定的日期和我要预定的天数，你给我找出现在为空的并且没有在装修的，而且那天没有预定记录的房间（貌似逻辑有点错误，我要预定那天的，你为啥限制我现在必须也得为空和现在不能在装修？！其实删掉那两个等于0的查询限制就好，不过不影响这条语句的牛B程度）：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> RoomInfo <span class="keyword">where</span> (RoomInfo.RoomNumber <span class="keyword">not</span> <span class="keyword">in</span> ((<span class="keyword">select</span> VisitorBookInfo.RoomNumber <span class="keyword">from</span> VisitorBookInfo <span class="keyword">where</span> (<span class="string">'" + dateBegin + "'</span> <span class="keyword">between</span> ExpectiveLiveDate <span class="keyword">and</span> <span class="keyword">dateadd</span>(<span class="keyword">day</span>,ExpextiveLastingTime,ExpectiveLiveDate)) <span class="keyword">and</span> (ExpectiveLiveDate <span class="keyword">between</span> <span class="string">'" + dateBegin + "'</span> <span class="keyword">and</span> <span class="string">'" + dateEnd + "'</span>)<span class="keyword">or</span> (<span class="string">'" + dateBegin + "'</span>=ExpectiveLiveDate)<span class="keyword">or</span>(<span class="string">'" + dateEnd + "'</span>=<span class="keyword">dateadd</span>(<span class="keyword">day</span>,ExpextiveLastingTime,ExpectiveLiveDate)))))<span class="string">"</span></div></pre></td></tr></table></figure></p>
<p>对应的C#函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">/// &lt;summary&gt;</div><div class="line">/// 根据开始日期和结束日期查询在该日期内房间的预定情况</div><div class="line">/// &lt;/summary&gt;</div><div class="line">/// &lt;param name=&quot;dateBegin&quot;&gt;&lt;/param&gt;</div><div class="line">/// &lt;param name=&quot;dateEnd&quot;&gt;&lt;/param&gt;</div><div class="line">/// &lt;returns&gt;&lt;/returns&gt;</div><div class="line">private Boolean setDataGridView(String dateBegin,String dateEnd)</div><div class="line">&#123;</div><div class="line">    //String sqlString = &quot;select * from RoomInfo where (RoomInfo.RoomNumber not in ((select VisitorBookInfo.RoomNumber from VisitorBookInfo where not (&apos;&quot; + dateBegin + &quot;&apos; not between ExpectiveLiveDate and dateadd(day,ExpextiveLastingTime,ExpectiveLiveDate)) and (ExpectiveLiveDate not between &apos;&quot; + dateBegin + &quot;&apos; and &apos;&quot; + dateEnd + &quot;&apos;))))&quot;;</div><div class="line">    String sqlString = &quot;select * from RoomInfo where (RoomInfo.RoomNumber not in ((select VisitorBookInfo.RoomNumber from VisitorBookInfo where (&apos;&quot; + dateBegin + &quot;&apos; between ExpectiveLiveDate and dateadd(day,ExpextiveLastingTime,ExpectiveLiveDate)) and (ExpectiveLiveDate between &apos;&quot; + dateBegin + &quot;&apos; and &apos;&quot; + dateEnd + &quot;&apos;)or (&apos;&quot; + dateBegin + &quot;&apos;=ExpectiveLiveDate)or(&apos;&quot; + dateEnd + &quot;&apos;=dateadd(day,ExpextiveLastingTime,ExpectiveLiveDate)))))&quot;;</div><div class="line">    DataSet dataSet = dao.inquiry(sqlString, true);</div><div class="line">    // 说明没有查到结果</div><div class="line">    if (dataSet == null || dataSet.Tables.Count == 0 || dataSet.Tables[0].Rows.Count &lt;= 0)</div><div class="line">    &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    DataTable tableFirst = dataSet.Tables[0]; // 用DataTable 取 DataSet中的第一个表</div><div class="line">    // 设置DataGridView的列名</div><div class="line">    foreach (DataColumn dc in tableFirst.Columns)</div><div class="line">    &#123;</div><div class="line">        RoomInfoDataGridView.Columns.Add(dc.ColumnName, dc.ColumnName);</div><div class="line">    &#125;</div><div class="line">    // 每次新建一行将数据填到DataGridView中</div><div class="line">    foreach (DataRow dr in tableFirst.Rows)</div><div class="line">    &#123;</div><div class="line">        DataGridViewRow vr = new DataGridViewRow();</div><div class="line">        foreach (DataGridViewColumn dc in RoomInfoDataGridView.Columns)</div><div class="line">        &#123;</div><div class="line">            vr.Cells.Add(dc.CellTemplate.Clone() as DataGridViewCell);</div><div class="line">            vr.Cells[vr.Cells.Count - 1].Value = dr[dc.Name];</div><div class="line">        &#125;</div><div class="line">        RoomInfoDataGridView.Rows.Add(vr);</div><div class="line">    &#125;</div><div class="line">    // 设置RoomInfoDataGridView禁止根据列排序</div><div class="line">    int i;</div><div class="line">    for (i = 0; i &lt; this.RoomInfoDataGridView.Columns.Count; i++) &#123; &#125;</div><div class="line">    this.RoomInfoDataGridView.Columns[--i].SortMode = DataGridViewColumnSortMode.NotSortable;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此外，记住不能用关键字（如“user”）作为表和表中列的名字，否则你会很麻烦。<br>下面是我的界面（功能略显单薄）：</p>
<p><img src="http://vars.qiniudn.com/C_sharp_sql_1.gif" alt=""></p>
<p><img src="http://vars.qiniudn.com/C_sharp_sql_2.gif" alt=""></p>
<p><img src="http://vars.qiniudn.com/C_sharp_sql_3.gif" alt=""></p>
<p>其实实验做到什么成度不重要，重要的是能提高自己的思考能力和代码水平，从中有所收获。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio 2010已安装，sql server 2008 management studio安装教程]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/03/13/sql-server-2008-install/</url>
      <content type="html"><![CDATA[<p>最近学校学习.net，要用到sql server。</p>
<a id="more"></a>
<p>一般来说，管理数据库一种是像mySQL一样，在命令行那个黑乎乎的窗口下敲命令管理（但是我没有找到如何在命令行下管理sql server），那会显的你很牛B；另一种就是安装一个像SQLyog这样的可视化数据库管理软件，sql server 2008 management studio就是这样的软件。大部分同学已经安装了Visual Studio 2010，安了Visual Studio2010后（前提是你在安装Visual Studio 2010时，安装了全部组件，比如.net framework等等），会自动安装一个简化版的sql server 2008，这个是不带sql server 2008 management studio的，需要你后天安装。     </p>
<p>此外，我从某位大神处得知，如果不安装sql server 2008 management studio的话，在VS2010里面也是可以可视化地操作sql server 2008的，具体还有待考证，安不安自己选择。<br>安装过程中如果出现什么本文没有提到的异常，请照着程序提示操作，或者自行搜索解决方案，Google不是吃素的，可能会遇到什么版本低的异常，自行下载补丁包升级即可。     </p>
<p>在上述条件下安装sql server 2008 management studio，有很多方法，网上也做法不一，其中我觉得比较靠谱的一种方法是<a href="http://www.cnblogs.com/william-lee/archive/2010/10/22/1858227.html" target="_blank" rel="external">这篇文章</a>。本人是自己各种Google，各种尝试后，成功安装的，下面是我的安装的简明过程：       </p>
<p>首先下载sql server 2008 management studio安装包（以下链接是官网链接，请放心下载，200M左右）：     </p>
<ul>
<li>64位机：<a href="http://www.microsoft.com/downloads/info.aspx?na=46&amp;SrcFamilyId=08E52AC2-1D62-45F6-9A4A-4B76A8564A2B&amp;SrcDisplayLang=zh-cn&amp;u=http%3a%2f%2fdownload.microsoft.com%2fdownload%2fE%2f0%2f8%2fE08BDDD3-0D6D-4813-8068-F1E809D2F827%2fSQLManagementStudio_x64_CHS.exe" target="_blank" rel="external">SQLManagementStudio_x64_CHS.exe</a>     </li>
<li>32位机：<a href="http://www.microsoft.com/downloads/info.aspx?na=46&amp;SrcFamilyId=08E52AC2-1D62-45F6-9A4A-4B76A8564A2B&amp;SrcDisplayLang=zh-cn&amp;u=http%3a%2f%2fdownload.microsoft.com%2fdownload%2fE%2f0%2f8%2fE08BDDD3-0D6D-4813-8068-F1E809D2F827%2fSQLManagementStudio_x86_CHS.exe" target="_blank" rel="external">SQLManagementStudio_x86_CHS.exe</a>      </li>
</ul>
<p>之后运行下载的文件，会出现程序兼容性提示：</p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_1.gif" alt=""></p>
<p>这个官方说是正常的，直接点击运行程序即可。<br>接下来有可能出现这样的一个错误：    </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_2.gif" alt=""></p>
<p>这个我查了一下，你可以关闭查毒软件和防火墙，然后右键选择“以管理员身份运行”，如果还出现，就退出多运行几次，应该就会弹出以下的界面了：     </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_3.gif" alt=""></p>
<p>在这个界面上点击左侧的“安装”，在右面选第一个“全新SQL server独立安装或向现有安装添加新功能”，接下来会出现这个界面：     </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_4.gif" alt=""></p>
<p>点击“确定”按钮，会出现：     </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_5.gif" alt=""></p>
<p>等它操作完毕后，点击“安装”按钮，会出现：     </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_6.gif" alt=""></p>
<p>注意，万一有什么问题，点击后面蓝色的字，会弹出错误或者警告的具体信息，这个很有用，你可以用弹出来的信息搜索一下解决方案，如果没问题，在这个界面上点击“下一步”，会出现：    </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_7.gif" alt=""></p>
<p>这个界面很重要，我们可以看到，在我们的机器上只安装了SQLEngine，感觉如果选择 “向sql server 2008 的现有的实例中添加新功能” 也可以成功安装，但是我当时索性就选了上面的 “执行sql server 2008 全新的安装” ，经本人亲测可以成功安装，所以这里我们选择“执行sql server 2008 全新的安装”，然后单击下一步，会出现：     </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_8.gif" alt=""></p>
<p>然后继续“下一步”：     </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_9.gif" alt=""></p>
<p>没说的，我接受，“下一步”：     </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_10.gif" alt=""></p>
<p>在这个界面中点击下面的“全选”按钮即可，确保功能都选上，然后下一步：    </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_11.gif" alt=""></p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_12.gif" alt=""></p>
<p>你懂的，“下一步”：    </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_13.gif" alt=""></p>
<p>这个可以不选，随意，然后“下一步”：    </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_14.gif" alt=""></p>
<p>然后它就进行安装前的准备工作了，如果出现什么“重启问题”，则重启电脑，重复上述步骤即可，接着“下一步”：     </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_15.gif" alt=""></p>
<p>路径就不要修改了，直接点击“安装”即可：    </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_16.gif" alt=""></p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_17.gif" alt=""></p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_18.gif" alt=""></p>
<p>至此就成功了，点击”下一步“：     </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_19.gif" alt=""></p>
<p>点击“关闭”即可。<br>接着到开始-&gt;所有程序-&gt;Microsoft SQL Server 2008中找到sql server 2008 management studio（如下图）：<br><img src="http://vars.qiniudn.com/vs2010_sqlserver_20.gif" alt=""></p>
<p>打开，会出现让你认证的界面：      </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_21.gif" alt=""></p>
<p>注意：服务器名称一定要填写：“你计算机的名字\SQLEXPRESS”，写什么“(local)”或者”127.0.0.1”是会有错误的，第一次“身份认证”选择“Windows身份认证”，然后就点击“连接”即可，接着：   </p>
<p><img src="http://vars.qiniudn.com/vs2010_sqlserver_22.gif" alt=""></p>
<p>至于后续的我们写程序连sql server不能用Windows身份认证，要用sql server认证，你可以添加一个新的账户，设置密码，然后重启一下数据库就好，至此就全部结束了。<br>在后续的使用过程中你可能会遇到什么错误233啊，或者什么错误14XXX啊，不要沮丧，自己去Google吧。<br>我想我们在遇到问题时首先要想到自己去解决问题，身为当代的高级知识分子，我们必须有自己处理问题的能力，可以尝试一下，有不懂得问题一定记得去问谷歌或者度娘，坚信你不是第一个遇到这个问题的人，祝你好运，欢迎指正。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用Python统计600W+的sql文件]]></title>
      <url>http://blog.liushuaiko.be/blog/2012/01/24/sql-processing-python/</url>
      <content type="html"><![CDATA[<p>用python写了一个统计用户资料sql文件中的所用的邮箱的数量，总数600W+，算上屏幕输出共耗时5min+：<a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</div><div class="line"></div><div class="line">sql = open(<span class="string">"www.csdn.net.sql"</span>,<span class="string">"r+"</span>)</div><div class="line">d = &#123;&#125;</div><div class="line">iCount = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> eachLine <span class="keyword">in</span> sql :</div><div class="line">    line_list = eachLine.strip().split(<span class="string">" # "</span>)</div><div class="line">    e_address = line_list[<span class="number">2</span>]</div><div class="line">    <span class="keyword">if</span> <span class="string">"@"</span> <span class="keyword">in</span> e_address :</div><div class="line">        e_domain = e_address.split(<span class="string">"@"</span>)[<span class="number">1</span>]</div><div class="line">    <span class="keyword">else</span> :</div><div class="line">        e_domain = e_address</div><div class="line">    <span class="comment">#print e_domain</span></div><div class="line">    <span class="keyword">if</span> e_domain <span class="keyword">not</span> <span class="keyword">in</span> d :</div><div class="line">        d[e_domain] = <span class="number">1</span></div><div class="line">        iCount += <span class="number">1</span></div><div class="line">    <span class="keyword">else</span> :</div><div class="line">        d[e_domain] += <span class="number">1</span></div><div class="line">        iCount += <span class="number">1</span></div><div class="line"><span class="keyword">print</span> <span class="string">"*"</span> * <span class="number">80</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Sum:"</span>,str(iCount)</div><div class="line"><span class="keyword">print</span> <span class="string">"*"</span> * <span class="number">80</span></div><div class="line">l = sorted(d.iteritems(), key=itemgetter(<span class="number">1</span>),reverse=<span class="keyword">True</span>) <span class="comment"># 据说这种对字典值的排序方法效率最高</span></div><div class="line"><span class="keyword">for</span> eachItem <span class="keyword">in</span> l :</div><div class="line">    <span class="keyword">print</span> eachItem,str(((int(eachItem[<span class="number">1</span>]))/iCount) * <span class="number">100.0</span>)+<span class="string">"%"</span></div></pre></td></tr></table></figure></p>
<p>另外，发现了一个不错的网站，叫<a href="http://www.oschina.net/" target="_blank" rel="external">OSChina</a>，是一个跟开源有关的网站，有很多优秀的成熟的源代码，读读肯定会自己的能力的提高有好处的。<br>另：Python排序参考：<br><a href="http://www.cnblogs.com/itech/archive/2011/12/27/2303740.html" target="_blank" rel="external">http://www.cnblogs.com/itech/archive/2011/12/27/2303740.html</a><br><a href="http://zuroc.42qu.com/10037539" target="_blank" rel="external">http://zuroc.42qu.com/10037539</a><br>统计结果截图：</p>
<p><img src="http://vars.qiniudn.com/python_600w_1.gif" alt=""></p>
<p><img src="http://vars.qiniudn.com/python_600w_2.gif" alt=""></p>
<p><img src="http://vars.qiniudn.com/python_600w_3.gif" alt=""></p>
<p><img src="http://vars.qiniudn.com/python_600w_4.gif" alt=""></p>
<p><img src="http://vars.qiniudn.com/python_600w_5.gif" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HIT软件学院第五次OS实验]]></title>
      <url>http://blog.liushuaiko.be/blog/2011/11/30/HIT-OS-exercise-5/</url>
      <content type="html"><![CDATA[<p>继之前的实验的各种衰，今天终于把实验五搞得略懂略懂。   </p>
<a id="more"></a>
<p>本次实验的基本内容是：    </p>
<ul>
<li>用Bochs调试工具跟踪Linux 0.11的地址翻译（地址映射）过程，了解IA-32和Linux 0.11的内存管理机制    </li>
<li>在Ubuntu上编写多进程的生产者—消费者程序，用共享内存做缓冲区   </li>
<li>在信号量实验的基础上，为Linux 0.11增加共享内存功能，并将生产者—消费者程序移植到Linux 0.11    </li>
</ul>
<p>实验指导书书上有说，第一个实验内容不需要耗费太多的脑细胞，其实还是要消耗一些的，你要记住这些过程，最好知道这些过程是干什么的。    </p>
<p>第一个实验内容指导书的表述顺序不是很合理，很容易把人搞蒙，下面我简要介绍一下第一个实验内容的操作顺序以及基本原理。    </p>
<p>通过在Bochs中的输出，我们可以看到变量i的逻辑地址是0x3004，这一结果也可以从ubuntu下的终端中看到，详细一点是：ds:0x3004，ds表明这个地址属于ds段。根据linux0.11内存的分段管理机制，我们知道ds寄存器中的内容就是ds段的段选择符（段选择子），通过sreg命令看到ds的内容是0x0017，根据段选择子每位的定义，我们可以知道TI=1.也即我们要查找当前进程的LDT表而不是直接查找系统的GDT表（<a href="http://hi.baidu.com/%CF%C0%BF%CDxl/blog/item/9961bcf08c7b8c19b07ec5fd.html#lastcmt" target="_blank" rel="external">GDT与LDT</a>，建议大家好好研读一下这篇文章，对理解后面的实验过程很有帮助），而且索引值为2（十进制），表示要查找LDT的第3个段描述符。     </p>
<p>那么接下来的问题是，我们说查找LDT，到哪里去找LDT呢？我们可以通过sreg命令看到ldtr的值，这个值就是LDT在GDT中的描述符的索引。GDT的位置已经由gdtr明确给出，可以通过命令查看。这样，知道了GDT的位置和我们要找的LDT描述符在GDT中的索引值，就可以找到我们要找的LDT在GDT中的描述符了，在根据GDT中描述符每位的含义，就能根据这个描述符知道我们要找的LDT表的物理地址（就是该描述符某几位数字的组合），找到了LDT表的物理地址，就可以通过命令查看LDT表的内容了。     </p>
<p>上文说到，我们要找LDT的第三个段描述符，而且刚才也介绍了怎样查看LDT的内容，这不就行了么！赶紧看看LDT第3个描述符（每个段描述符64位）是什么鸟东西（如何查看详见指导书），查看后发现是这货：0x00003fff 0x10c0f300，通过段描述符每位的含义，我们终于知道了ds段的在线性空间的基地址是：0x10000000（实际上也是段描述符某些位的组合）。这样，段基址+段内偏移，就是变量i的线性地址了：0x10000000 + 0x3004 = 0x10003004。     </p>
<p>接下来要做的事情从32位线性地址中分析出物理地址。我们从32位线性地址中可以得到页目录号、页表号和页内偏移，它们分别对应了32位线性地址的10位+10位+12位，所以0x10003004的页目录号是64，页号是3，页内偏移是4。    </p>
<p>IA-32下，页目录表的位置由CR3寄存器指引。creg命令可以看到CR3寄存器的内容，从而找到页目录表的物理地址（是页目录表的物理基地址，或者说是首地址），知道了页目录的首地址，赶紧看看页目录里第65项（从0开始）存的页目录项是什么吧！通过命令查看（详见指导书）了第65个页目录项的内容，再根据页目录项内容是什么含义就能知道我们要找的页表的起始地址了。知道了我们要找的页表的起始地址，我们赶紧看看这个页表第4个页表项（从0开始）是什么！通过命令查看（详见指导书）后，我们得到了这个页表的第4项：0x00faa00c : 0x00fa7067。页表项中某些位的组合就是它对应的那页内存的物理起始地址，上文已经说到页内偏移是4，这样，我们得到了变量i的物理地址：0x00fa7004，这就是地址映射的全部过程，个人感觉指导书上的叙述顺序不容易让人理解，本文才是正常的顺序。   </p>
<p>后面的内存共享，要用到两个很重要的函数：<code>put_page( )</code>和<code>get_free_page()</code>。在编写相应的系统调用之前建议大家先研读赵炯博士的书，了解一下一个进程在内存中是如何存放的，会很有帮助。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入浅出Web Service]]></title>
      <url>http://blog.liushuaiko.be/blog/2011/11/23/webservice-introduction/</url>
      <content type="html"><![CDATA[<p>最近学校的某个俱乐部要搞Web Service，而我近期各种衰气侧漏，也研究了一下Web Service，想把我的成果与大家分享一下。           </p>
<a id="more"></a>                
<p>要了解Web Service，首先要知道它的起源，然后才能明白它的大致思想。在八十年代初期，各个计算机公司都墨守成规地发展CISC（<a href="http://baike.baidu.com/view/65652.htm" target="_blank" rel="external">复杂指令计算机系统</a>），也就是说都想把自己生产的PC机的性能变得厉害一点，此外他们还拼命保护自己的技术，抢夺市场。就在这个时期，Sun公司一声炮响，提出了“网络就是计算机”的口号，它想开发面向网络的、RISC（<a href="http://baike.baidu.com/view/23531.htm" target="_blank" rel="external">精简指令计算机系统</a>）、分布式的C-S结构的系统，挖掘网络的力量。这个思想就是对每个用户来说，网络就是是一个大的虚拟计算机，我们可以把用户的请求分散到网上的各个可用的计算机（或其他资源）上，让这些资源处理用户的请求。当时大家都以为这是Sun公司的一个宣传口号，但现在，我们不得不佩服Sun公司的远见卓识以及这个思想的睿智。这个思想，就是今天与计算、分布式计算、以及Web Service的起源。      </p>
<p>W3C组织对Web Service的官方定义是：</p>
<blockquote>
<p>Web Service 是一个软件系统，用以支持网络间不同机器的互动操作。网络服务通常是许多应用程序的接口所组成的，它们通过网络，例如国际互联网的远程服务器端，执行客户所提交服务的请求。         </p>
</blockquote>
<p>其实说的贴近群众一点，Web Service就是一个函数的远程调用。比如我有一个Web Service，它实现的就是一个求和的函数，当用户请求我的Web Service时，通过网络给我两个数13和14，我调用了这个函数计算了一下，得出结果27，之后再通过网络返回给用户，这就是一个简单的Web Service的模型。可能再牛B一点，我的Web Service还可能调用其他的Web Service以相同的方式来获取数据，许多个这样的模型也就实现了“网络就是计算机”的构想。<br><img src="http://vars.qiniudn.com/webservice_introduction_1.gif" alt=""></p>
<p>那么Web Service是如何实现的呢？它的实现有两个关键的点：<strong>动态连接</strong>和<strong>一系列的标准和协议</strong>。<br><strong>动态连接</strong>，顾名思义，就是你的应用程序按正确的方式请求某个Web Service，Web Service会给你答复。这样就保持了一个动态的连接。此外，这样的方式还有一个好处就是，不论你怎么改变你Service内部具体的实现，只要你的Web Service提供给调用者的接口不变，那么调用者就可以照旧使用你的Web Service，这样就降低了你的应用与网络之间的依赖，使整个模型更加健壮可行。<br><strong>一系列的标准和协议</strong>，主要有三个东西要清楚。         </p>
<ol>
<li>SOAP协议，全称是Simple Object Access Protocol（ 简单对象访问协议）。这里面的“对象”不是我们平常的OOP中的面向对象里的“对象”，是个广义上的对象。我们完全可以把Web Service的函数看做是一个对象，把你的应用程序看成是一个对象等等。相信你已经对这个SOAP协议有了一个感性的认识了。其实它主要规定了这么几件事：第一它规定了Web Service与调用者的信息传递采用XML格式（XML的优点我就不再赘述，什么与平台无关啊等等，想了解更多去Google吧）。第二它规定了XML与参数类型的映射，也即Web Service所需的参数如何包装成XML供双方通信。第三它规定了异常处理的相关信息，也即出现异常要采取什么措施，转向什么处理等等。      </li>
<li>WSDL语言，全称是Web Services Description Language（网络服务描述语言）。它是一种语言，也使一种标准。这货本质也是一个XML格式（<a href="http://www.webxml.com.cn/webservices/weatherwebservice.asmx?WSDL" target="_blank" rel="external">样例WSDL</a>）。它向调用者提供了某个Web Service的信息。包括传什么参数，命名空间是什么，返回值是什么等等。这样，采用统一的语言（或者说标准）来描述某个Web Service，既方便人阅读理解，又可以让IDE解析该文件，自动生成该Web Service的调用程序框架，方便使用。       </li>
<li>UDDI，全称是Universal Description, Discovery, and Integration（统一描述、发现、集成）。UDDI是一个公开的标准，以结构化的形式让Web Service的提供者来注册，并让服务使用者查询。这样所有的WSDL文件就可以集中存放在UDDI上，实际上UDDI起着索引服务器的作用。<br>可能有点懵，它们的关系图如下：          </li>
</ol>
<p><img src="http://vars.qiniudn.com/webservice_introduction_2.gif" alt=""></p>
<p>在Web Service的协议方面，它的协议栈如图：</p>
<p><img src="http://vars.qiniudn.com/webservice_introduction_3.gif" alt=""></p>
<p>可以看到，Web Service最底层的协议是http协议，相信什么好处你也能猜到，对，就是防火墙。Web Service可以自由穿越防火墙，要知道很多服务器或终端或节点的防火墙都是只允许http协议的连接自由通过。<br>说了这么多，相信你也能对Web Service有一定的认识了，你自己也能通过强大的eclipse做一个Web Service，或做一个Web Service 的客户端，详见本博客其它文章。  </p>
<hr>
<p>当然，Web Service也有一定的缺点，以下是我通过查资料得到的一些看法。              </p>
<ol>
<li>Web Service会造成一定程度的资源浪费。这个很容易理解。传递信息用XML，纯文本，那么双方解析数据肯定要消耗额外的CPU资源和内存资源（感觉这个浪费相比Web Service的优点来说太微不足道了）；其次，传纯文本肯定没有直接传二进制来得快，也即会浪费一些网络资源。     </li>
<li>Web Service的数据传递的颗粒度较大，也即他把结果直接打个包丢给你。因此，它不适用于基于对话的，数据颗粒度较小的应用中。    </li>
<li>数据转换存在限制。因为不是所有的数据都能方便的转换成XML，比如面向对象语言中某个类的实例等等。    </li>
<li>学习要求高，技术曲线长。前面听起来或许感觉Web Service很容易，但是你要想真正开发出一款成熟健壮的Web Service，必然要学习很多具体的技术，而且，这些技术还在不断发展。<br>其实说这些是缺点也有一定道理，读者可以辩证地借鉴一下。   </li>
</ol>
<hr>
<p>Web Service有很多应用。现在也有很多成熟的Web Service。比如eBay网商品价格查询等等，有一个网站叫“Xmethods”，里面有很多有用的Web Service的信息，可以百度一下。<br>主要的应用有三类：    </p>
<ol>
<li>公司或个人的咨询查询提供，如查询美国的邮编区号，查询延迟20秒的即使股票信息等等   </li>
<li>资料档案的分散存取及服务，如提供一兆的自由存取空间的服务，FTP服务等等。    </li>
<li>数据远端分散运算，如根据当前汇率提供转换业务等。<br>以上Web Service均可在Xmethods网站上搜到。<br>一些有用的链接可参考本博客另外文章。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[逻辑地址、线性地址、物理地址和虚拟地址]]></title>
      <url>http://blog.liushuaiko.be/blog/2011/11/23/computer-address/</url>
      <content type="html"><![CDATA[<p><strong>逻辑地址（Logical Address）</strong>是指由程序产生的与段相关的偏移地址部分。例如，你在进行C语言指针编程中，可以读取指针变量本身值(&amp;操作)，实际上这个值就是逻辑地址，它是相对于你当前进程数据段的地址，不和绝对物理地址相干。只有在Intel实模式下，逻辑地址才和物理地址相等（因为实模式没有分段或分页机制,Cpu不进行自动地址转换）；逻辑也就是在Intel 保护模式下程序执行代码段限长内的偏移地址（假定代码段、数据段如果完全一样）。应用程序员仅需与逻辑地址打交道，而分段和分页机制对您来说是完全透明的，仅由系统编程人员涉及。应用程序员虽然自己可以直接操作内存，那也只能在操作系统给你分配的内存段操作。<br><a id="more"></a><br><strong>线性地址（Linear Address）</strong>是逻辑地址到物理地址变换之间的中间层。程序代码会产生逻辑地址，或者说是段中的偏移地址，加上相应段的基地址就生成了一个线性地址。如果启用了分页机制，那么线性地址可以再经变换以产生一个物理地址。若没有启用分页机制，那么线性地址直接就是物理地址。Intel 80386的线性地址空间容量为4G（2的32次方即32根地址总线寻址）。<br><strong>物理地址（Physical Address）</strong>是指出现在CPU外部地址总线上的寻址物理内存的地址信号，是地址变换的最终结果地址。如果启用了分页机制，那么线性地址会使用页目录和页表中的项变换成物理地址。如果没有启用分页机制，那么线性地址就直接成为物理地址了。<br><strong>虚拟内存（Virtual Memory）</strong>是指计算机呈现出要比实际拥有的内存大得多的内存量。因此它允许程序员编制并运行比实际系统拥有的内存大得多的程序。这使得许多大型项目也能够在具有有限内存资源的系统上实现。一个很恰当的比喻是：你不需要很长的轨道就可以让一列火车从上海开到北京。你只需要足够长的铁轨（比如说3公里）就可以完成这个任务。采取的方法是把后面的铁轨立刻铺到火车的前面，只要你的操作足够快并能满足要求，列车就能象在一条完整的轨道上运行。这也就是虚拟内存管理需要完成的任务。在Linux 0.11内核中，给每个程序（进程）都划分了总容量为64MB的虚拟内存空间。因此程序的逻辑地址范围是0x0000000到0x4000000。</p>
<hr>
<p>有时我们也把逻辑地址称为虚拟地址。因为与虚拟内存空间的概念类似，逻辑地址也是与实际物理内存容量无关的。<br>逻辑地址与物理地址的“差距”是0xC0000000，是由于虚拟地址-&gt;线性地址-&gt;物理地址映射正好差这个值。这个值是由操作系统指定的。<br>虚拟地址到物理地址的转化方法是与体系结构相关的。一般来说有分段、分页两种方式。以现在的x86 cpu为例，分段分页都是支持的。Memory Mangement Unit负责从虚拟地址到物理地址的转化。逻辑地址是段标识+段内偏移量的形式，MMU通过查询段表，可以把逻辑地址转化为线性地址。如果cpu没有开启分页功能，那么线性地址就是物理地址；如果cpu开启了分页功能，MMU还需要查询页表来将线性地址转化为物理地址：<br>逻辑地址 —-（段表）—&gt; 线性地址 — （页表）—&gt; 物理地址<br>不同的逻辑地址可以映射到同一个线性地址上；不同的线性地址也可以映射到同一个物理地址上；所以是多对一的关系。另外，同一个线性地址，在发生换页以后，也可能被重新装载到另外一个物理地址上。所以这种多对一的映射关系也会随时间发生变化。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HIT软件学院第二次OS实验]]></title>
      <url>http://blog.liushuaiko.be/blog/2011/11/14/HIT-OS-exercise-2/</url>
      <content type="html"><![CDATA[<p>这次实验是让你在linux0.11上增加两个系统调用，并编写两个简单的应用程序测试你写的系统调用。<br><a id="more"></a>    </p>
<h3 id="iam"><a href="#iam" class="headerlink" title="iam( )"></a>iam( )</h3><p>第一个系统调用是<code>iam()</code>，其原型为：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">iam</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * name)</span></span>;</div><div class="line">```      </div><div class="line">完成的功能是将字符串参数`name`的内容拷贝到内核中保存下来。要求`name`的长度不能超过<span class="number">23</span>个字符。返回值是拷贝的字符数。如果`name`的字符个数超过了<span class="number">23</span>，则返回<span class="number">-1</span>，并置`errno`为`EINVAL`。         </div><div class="line">在kernel/who.c中实现此系统调用。              </div><div class="line">##<span class="meta"># whoami( )</span></div><div class="line">第二个系统调用是`whoami()`，其原型为：        </div><div class="line">``` C++</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">whoami</span><span class="params">(<span class="keyword">char</span>* name, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span>;</div><div class="line">```     </div><div class="line">它将内核中由`iam()`保存的名字拷贝到name指向的用户地址空间中，同时确保不会对name越界访存（`name`的大小由`size`说明）。返回值是拷贝的字符数。如果`size`小于需要的空间，则返回<span class="number">-1</span>，并置`errno`为`EINVAL`。       </div><div class="line">也是在kernel/who.c中实现。        </div><div class="line">要注意的是这两个函数是系统调用，是内核态的。      </div><div class="line">### 测试程序</div><div class="line">运行添加过新系统调用的Linux <span class="number">0.11</span>，在其环境下编写两个测试程序iam.c和whoami.c。最终的运行结果是：</div></pre></td></tr></table></figure></p>
<p>$ ./iam lizhijun<br>$ ./whoami<br>lizhijun<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">这个测试程序是一个普通的用户态的C语言程序，你需要在这个函数中调用你上面你编写的那两个系统调用。     </div><div class="line">这次实验首先应该大致了解一下linux0.11系统调用的过程，仔细阅读实验指导书，然后看看现成的系统调用（如lib/close.c中的系统调用），之后再研习一下赵烔博士的《linux0.11内核完全注释》相应的章节会对这次实验会对这次实验有很大帮助。      </div><div class="line">你首先需要修改/include/unistd.h，在里面加上新系统调用的宏定义，代码如下：       </div><div class="line">``` C++</div><div class="line">#define __NR_sgetmask   68  </div><div class="line">#define __NR_ssetmask   69  </div><div class="line">#define __NR_setreuid   70  </div><div class="line">#define __NR_setregid   71     /*系统原来的系统调用，可见原来linux0.11中有72个系统调用（从0开始）*/  </div><div class="line">#define __NR_whoami 72     /*新系统调用的宏定义*/  </div><div class="line">#define __NR_iam    73     /*新系统调用的宏定义*/  </div><div class="line">```   </div><div class="line">然后你要修改/include/linux/sys.h，学着前面的方式在里面加上`extern int sys_whoami()`和`extern int sys_iam()`,     </div><div class="line">``` C++</div><div class="line">extern int sys_sgetmask();</div><div class="line">extern int sys_ssetmask();</div><div class="line">extern int sys_setreuid();</div><div class="line">extern int sys_setregid();</div><div class="line">extern int sys_whoami();     /*你添加的已存在声明*/</div><div class="line">extern int sys_iam();     /*你添加的已存在声明*/</div></pre></td></tr></table></figure></p>
<p>并在该文件的<code>sys_call_table[]</code>数组中加上两项<code>sys_whoami</code>和<code>sys_iam</code>（这里<code>sys_whoami</code>和<code>sys_iam</code>在该数组的位置一定要和上述宏定义的数字相对应，比如<code>sys_whoami</code>在/include/unistd.h中的宏定义为72,则<code>sys_whoami</code>应该是该数组的第72项，从0开始数），如下所示：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">fn_ptr sys_call_table[] = &#123; sys_setup, sys_exit, sys_fork, sys_read,</div><div class="line">sys_write, sys_open, sys_close, sys_waitpid, sys_creat, sys_link,</div><div class="line">sys_unlink, sys_execve, sys_chdir, sys_time, sys_mknod, sys_chmod,</div><div class="line">sys_chown, sys_break, sys_stat, sys_lseek, sys_getpid, sys_mount,</div><div class="line">sys_umount, sys_setuid, sys_getuid, sys_stime, sys_ptrace, sys_alarm,</div><div class="line">sys_fstat, sys_pause, sys_utime, sys_stty, sys_gtty, sys_access,</div><div class="line">sys_nice, sys_ftime, sys_sync, sys_kill, sys_rename, sys_mkdir,</div><div class="line">sys_rmdir, sys_dup, sys_pipe, sys_times, sys_prof, sys_brk, sys_setgid,</div><div class="line">sys_getgid, sys_signal, sys_geteuid, sys_getegid, sys_acct, sys_phys,</div><div class="line">sys_lock, sys_ioctl, sys_fcntl, sys_mpx, sys_setpgid, sys_ulimit,</div><div class="line">sys_uname, sys_umask, sys_chroot, sys_ustat, sys_dup2, sys_getppid,</div><div class="line">sys_getpgrp, sys_setsid, sys_sigaction, sys_sgetmask, sys_ssetmask,</div><div class="line">sys_setreuid,sys_setregid, sys_whoami, sys_iam &#125;;     <span class="comment">/*在后面添加两项*/</span></div></pre></td></tr></table></figure></p>
<p>然后，修改/kernel里面的system_call.s文件改变里面的系统调用个数，也即在原来的个数上加你添加的系统调用数，如下所示：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># offsets within sigaction</span></div><div class="line">sa_handler = <span class="number">0</span></div><div class="line">sa_mask = <span class="number">4</span></div><div class="line">sa_flags = <span class="number">8</span></div><div class="line">sa_restorer = <span class="number">12</span></div><div class="line"></div><div class="line">nr_system_calls = <span class="number">74</span>  <span class="comment">/*原来是72,你加了两个，变成74*/</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Ok, I get parallel printer interrupts while using the floppy for some</div><div class="line"> * strange reason. Urgel. Now I just ignore them.</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p>最后在/kernel中编写实现新加的系统调用函数的文件who.c,实现你新加的系统调用：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utime.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/tty.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/segment.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="comment">/*以上头文件可能不必全包含，但是我偷懒了，直接全包含算了*/</span></div><div class="line"><span class="comment">/*注意：注释时一定不要用双斜线，变量的声明要全写在可执行语句的前面，必须严格按着C语言的语法*/</span></div><div class="line"><span class="keyword">char</span> myName[<span class="number">23</span>];	<span class="comment">/*内核态全局变量，保存从用户态得到的名字*/</span></div><div class="line"><span class="keyword">int</span> len;		<span class="comment">/*内核态全局变量，保存从用户态得到的名字的长度*/</span></div><div class="line"><span class="comment">/*注意：在本文件中声明以及定义的变量均为内核态变量，而且不能直接访问用户态变量*/</span></div><div class="line"><span class="comment">/*2011-11-4 19:23*/</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_iam</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> temp[<span class="number">23</span>];</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;(temp[i] = get_fs_byte(&amp;name[i]))!=<span class="string">'\0'</span>;i++)&#123;&#125;<span class="comment">/*获取名字的长度*/</span></div><div class="line">	<span class="keyword">if</span> (i&gt;<span class="number">23</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> (-EINVAL);<span class="comment">/*直接这样写可以把指导书上的情况全包含*/</span></div><div class="line">	&#125;</div><div class="line">	len = i;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">	&#123;</div><div class="line">		myName[i] = temp[i];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*printk("Save complete!\n");*/</span><span class="comment">/*内核中向终端输出用printk函数*/</span></div><div class="line">	<span class="keyword">return</span> len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_whoami</span><span class="params">(<span class="keyword">char</span>* name, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">if</span> (len&gt;size)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> (-EINVAL);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;len;i++)</div><div class="line">	&#123;</div><div class="line">		put_fs_byte(myName[i],&amp;name[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/*printk("%s\n",myName);*/</span></div><div class="line">	<span class="comment">/*printk("Copy complete!\n");*/</span></div><div class="line">	<span class="keyword">return</span> len;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到这里系统调用就添加完成了，接下来修改kernel目录下的makefile文件，让我们添加的kernel/who.c可以和其它Linux代码编译链接到一起，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">OBJS  = sched.o system_call.o traps.o asm.o fork.o \</div><div class="line">        panic.o printk.o vsprintf.o sys.o exit.o \</div><div class="line">        signal.o mktime.o</div><div class="line"></div><div class="line">改为：</div><div class="line"></div><div class="line">OBJS  = sched.o system_call.o traps.o asm.o fork.o \</div><div class="line">        panic.o printk.o vsprintf.o sys.o exit.o \</div><div class="line">        signal.o mktime.o who.o</div><div class="line"></div><div class="line">另一处：</div><div class="line"></div><div class="line">### Dependencies:</div><div class="line">exit.s exit.o: exit.c ../include/errno.h ../include/signal.h \</div><div class="line">  ../include/sys/types.h ../include/sys/wait.h ../include/linux/sched.h \</div><div class="line">  ../include/linux/head.h ../include/linux/fs.h ../include/linux/mm.h \</div><div class="line">  ../include/linux/kernel.h ../include/linux/tty.h ../include/termios.h \</div><div class="line">  ../include/asm/segment.h</div><div class="line"></div><div class="line">改为：</div><div class="line"></div><div class="line">### Dependencies:</div><div class="line">who.s who.o: who.c ../include/linux/kernel.h ../include/unistd.h</div><div class="line">exit.s exit.o: exit.c ../include/errno.h ../include/signal.h \</div><div class="line">  ../include/sys/types.h ../include/sys/wait.h ../include/linux/sched.h \</div><div class="line">  ../include/linux/head.h ../include/linux/fs.h ../include/linux/mm.h \</div><div class="line">  ../include/linux/kernel.h ../include/linux/tty.h ../include/termios.h \</div><div class="line">  ../include/asm/segment.h</div></pre></td></tr></table></figure></p>
<p>接下来编写测试程序，在虚拟机上运行，测试你的系统调用是否添加成功：<br>iam.c样例代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __LIBRARY__					<span class="comment">/* 有它，_syscall1等才有效。详见unistd.h */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span>				<span class="comment">/* 有它，编译器才能获知自定义的系统调用的编号 */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="number">_</span>syscall1(<span class="keyword">int</span>, iam, <span class="keyword">const</span> <span class="keyword">char</span>*, name);		<span class="comment">/* iam()在用户空间的接口函数 */</span></div><div class="line"></div><div class="line"><span class="comment">/*2011-11-4 19:24*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> arg ,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">/*printf("%s\n",argv[0]);</span></div><div class="line">	printf("%s\n",argv[1]);*/</div><div class="line">	iam(argv[<span class="number">1</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>whoami.c 样例代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __LIBRARY__					<span class="comment">/* 有它，_syscall1等才有效。详见unistd.h */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span>				<span class="comment">/* 有它，编译器才能获知自定义的系统调用的编号 */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="number">_</span>syscall2(<span class="keyword">int</span>, whoami,<span class="keyword">char</span>*,name,<span class="keyword">unsigned</span> <span class="keyword">int</span>,size);	<span class="comment">/* whoami()在用户空间的接口函数 */</span></div><div class="line"></div><div class="line"><span class="comment">/*2011-11-4 19:25*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> arg ,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> *aname;</div><div class="line">	<span class="keyword">int</span> alen;</div><div class="line">	<span class="comment">/*unsigned int n = 0;*/</span></div><div class="line">	<span class="comment">/*printf("%s\n",argv[0]);*/</span></div><div class="line">	<span class="comment">/*printf("%s\n",argv[1]);*/</span></div><div class="line">	<span class="comment">/*scanf("%d",&amp;n);*/</span></div><div class="line">	aname = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">23</span>);</div><div class="line">	alen = whoami(aname,<span class="number">23</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,aname);</div><div class="line">	<span class="comment">/*printf("%d\n",alen);*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实验报告参考：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1.从Linux 0.11现在的机制看，它的系统调用最多能传递几个参数？你能想出办法来扩大这个限制吗？</div><div class="line">答：当应用程序经过库函数向内核发送一个中断调用int 0x80，开始执行一个系统调用。其中寄存器eax存放着系统调用号，参数可以存放寄存器ebx、ecx、edx中。因此Linux 0.11系统调用最多能向内核传递3个参数。</div><div class="line">解决方案是传给函数一个指针值，该指针值指向一个大块数据，这个大块数据可以是一个线性表或者某个特定的数据结构，存放着该函数所有的参数，这样通过寄存器间接寻址，便可向系统调用传递多个参数。</div><div class="line"></div><div class="line">2.用文字简要描述向Linux 0.11添加一个系统调用foo()的步骤。</div><div class="line">答：首先修改/include/unistd.h，在里面加上新系统调用的宏定义：#define __NR_foo	72（原来从0开始数有71个系统调用，加了一个，变成72）。然后修改/include/linux/sys.h，在里面加上extern int sys_foo();,并在该文件的fn_ptr sys_call_table[]数组中加上一项sys_foo（这里sys_foo在该数组的位置一定要和上述宏定义的数字相对应，比如上述为72,则sys_foo应该是该数组的第72项，从0开始数）。然后修改/kernel里面的system_call.s文件改变里面的系统调用个数，也即在原来的个数上加1；最后在/kernel中编写实现新加的系统调用函数的文件foo.c,实现你新加的函数，到这里系统调用就添加完成了。最后修改makefile文件，使其在编译linux时能将新加的调用同时编译，全部完成（还可以编写测试程序测试新加的系统调用是否成功）。</div></pre></td></tr></table></figure></p>
<p>还可以下载测试脚本测试你得多少分，一些具体的细节请看实验指导书，会对你有很大帮助，加油吧！！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HIT软件学院第一次OS实验]]></title>
      <url>http://blog.liushuaiko.be/blog/2011/11/05/HIT-OS-exercise-1/</url>
      <content type="html"><![CDATA[<p>这次实验主要是修改linux V0.11版本的引导程序的代码，使操作系统在启动时能再屏幕上打印一个你自己规定的字符串。因为这次实验仅仅修改了OS的引导部分（bootsect.s），我们只需要让引导部分能正常工作就可以验证你的字符串有没有正常输出了，至于后面的System模块我们不需要让它正常加载，所以，我们还要修改build.c文件，让它执行时不加载System模块，这是本次实验的要点。<br><a id="more"></a><br>赵烔博士的《Linux 内核完全注释》一书第六章中对Linux  V0.11操作系统的引导过程有详细的描述，对本次实验有很大帮助。<br>首先要修改bootsect.s，以达到OS引导时能再屏幕上输出你指定的字符串，样例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">! Print some inane message</div><div class="line"></div><div class="line">    mov ah,#0x03        ! read cursor pos</div><div class="line">    xor bh,bh</div><div class="line">    int 0x10</div><div class="line"></div><div class="line">    mov cx,#49                  !在这里要将原来的“24”改为“24+你指定的字符串的字符数”，我指定了25个字符串，故改为29</div><div class="line">    mov bx,#0x0007      ! page 0, attribute 7 (normal)</div><div class="line">    mov bp,#msg1</div><div class="line">    mov ax,#0x1301      ! write string, move cursor</div><div class="line">    int 0x10</div><div class="line"></div><div class="line">! ok, we&apos;ve written the message, now</div></pre></td></tr></table></figure></p>
<p>然后在这里（bootsect.s里）加上你的字符串，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">msg1:</div><div class="line">    .byte 13,10</div><div class="line">    .ascii &quot;Loading system ...&quot;</div><div class="line">    .byte 13,10,13,10</div><div class="line">    .ascii &quot;Liushuai&apos;OS is booting...&quot;           !这里是你指定的在引导时在屏幕上显示的字符串,13和10好像是回车和空格</div></pre></td></tr></table></figure></p>
<p>然后，如上所述，修改build.c，让其不引导System模块，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(<span class="string">"none"</span>,argv[<span class="number">3</span>]))<span class="comment">//当第三个参数是none时</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"System block have not been wrriten!\n"</span>);<span class="comment">//提醒用户系统模块并未被写入</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//直接返回</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((id=open(argv[<span class="number">3</span>],O_RDONLY,<span class="number">0</span>))&lt;<span class="number">0</span>)</div><div class="line">        die(<span class="string">"Unable to open 'system'"</span>);</div><div class="line"><span class="comment">//  if (read(id,buf,GCC_HEADER) != GCC_HEADER)</span></div><div class="line"><span class="comment">//      die("Unable to read header of 'system'");</span></div><div class="line"><span class="comment">//  if (((long *) buf)[5] != 0)</span></div><div class="line"><span class="comment">//      die("Non-GCC header of 'system'");</span></div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span> ; (c=read(id,buf,<span class="keyword">sizeof</span> buf))&gt;<span class="number">0</span> ; i+=c )</div><div class="line">        <span class="keyword">if</span> (write(<span class="number">1</span>,buf,c)!=c)</div><div class="line">            die(<span class="string">"Write call failed"</span>);</div><div class="line">    close(id);</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"System is %d bytes.\n"</span>,i);</div><div class="line">    <span class="keyword">if</span> (i &gt; SYS_SIZE*<span class="number">16</span>)</div><div class="line">        die(<span class="string">"System is too big"</span>);</div><div class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p>上面代码的带汉语注释的部分是修改的部分，这样做是为什么呢？<br>原来，build.c从命令行参数得到bootsect、setup和system内核的文件名，将三者做简单的整理后一起写入Image。其中system是第三个参数（argv[3]）。当“make all”或者“makeall”的时候，这个参数传过来的是正确的文件名，build.c会打开它，将内容写入Image。而“make BootImage”时，传过来的是字符串”none”。所以，改造build.c的思路就是当argv[3]是”none”的时候，只写bootsect和setup，忽略所有与system有关的工作，或者在该写system的位置都写上“0”，这是基本思想。<br>修改工作主要集中在build.c的尾部，本文中样例代码的改法只是改法中的一种。<br>此外，还要对setup.s做简单的删除，删除与System模块有关的部分，否则会出现加载虚拟机时虚拟机里的Linux0.11总是重启的现象，详见实验指导书。<br>最后是实验的报告部分，笔者的报告仅供参考。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1.有时，继承传统意味着别手蹩脚。x86计算机为了向下兼容，导致启动过程比较复杂。请找出x86计算机启动过程中，被硬件强制，软件必须遵守的两个“多此一举”的步骤（多找几个也无妨），说说它们为什么多此一举，并设计更简洁的替代方案。</div><div class="line"></div><div class="line">答：1）.BIOS初始化时，会在物理内存开始处放置大小位1KB的中断向量表，供BIOS的中断使用。这就强制了操作系统的引导程序在加载操作系统的主模块时如果要利用BIOS中断获取一些信息，则主模块的加载位置不能将BIOS的向量表覆盖掉，而操作系统的主模块一般运行时要在内存的开始处（这样主模块中的代码地址也就等于实际的物理地址，便于操作），所以操作系统的引导程序会先将主模块（如Linux0.11中的System模块）读到内存中不与BIOS中断向量表冲突的位置，之后在将主模块移动到内存起始处，将BIOS的中断向量表覆盖掉，这是“多此一举”的。</div><div class="line">解决方案是BIOS初始化时将BIOS的中断向量表放到内存中其他实模式下BIOS可以访问到的内存处，这样操作系统引导程序就可以直接将操作系统的主模块读到内存的起始处了。</div><div class="line">2）PC机加电后，执行BIOS中的代码时，由于BIOS可访问的内存有限，则操作系统最开始的引导程序（如Linux0.11中的bootsect模块）会被读到内存绝对地址0x7C00处开始执行。执行时它会自己把自己移到内存中相对靠后的位置，以便加载系统主模块。这步是“多此一举”的。</div><div class="line">解决方案是在保证可靠性的前提下尽量扩大BIOS的可访问的内存的范围，免去这不必要的移动。</div><div class="line"></div><div class="line"></div><div class="line">2.操作系统的引导程序都完成哪些功能？你知道几个操作系统引导程序？分别是什么？</div><div class="line"></div><div class="line">答：操作系统的引导程序一般完成识别主机的某些特性，确保内核被正确加载；加载内核到内存；将系统控制权交给内核；通知内核所需要的根文件系统的位置；确定根文件的设备号；将CPU由实模式切换为保护模式等功能。我知道的操作系统的引导程序有Windows NT 5.X 和Windows NT 6.X</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
  
  
</search>
